// cineraria_core_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.0 153

`timescale 1 ps / 1 ps
module cineraria_core_mm_interconnect_1 (
		input  wire        clk_peri_clk_clk,                                        //                                      clk_peri_clk.clk
		input  wire        peripherals_bridge_m0_reset_reset_bridge_in_reset_reset, // peripherals_bridge_m0_reset_reset_bridge_in_reset.reset
		input  wire [23:0] peripherals_bridge_m0_address,                           //                             peripherals_bridge_m0.address
		output wire        peripherals_bridge_m0_waitrequest,                       //                                                  .waitrequest
		input  wire [0:0]  peripherals_bridge_m0_burstcount,                        //                                                  .burstcount
		input  wire [3:0]  peripherals_bridge_m0_byteenable,                        //                                                  .byteenable
		input  wire        peripherals_bridge_m0_read,                              //                                                  .read
		output wire [31:0] peripherals_bridge_m0_readdata,                          //                                                  .readdata
		output wire        peripherals_bridge_m0_readdatavalid,                     //                                                  .readdatavalid
		input  wire        peripherals_bridge_m0_write,                             //                                                  .write
		input  wire [31:0] peripherals_bridge_m0_writedata,                         //                                                  .writedata
		input  wire        peripherals_bridge_m0_debugaccess,                       //                                                  .debugaccess
		output wire [1:0]  dipsw_s1_address,                                        //                                          dipsw_s1.address
		input  wire [31:0] dipsw_s1_readdata,                                       //                                                  .readdata
		output wire [2:0]  epcq_avl_csr_address,                                    //                                      epcq_avl_csr.address
		output wire        epcq_avl_csr_write,                                      //                                                  .write
		output wire        epcq_avl_csr_read,                                       //                                                  .read
		input  wire [31:0] epcq_avl_csr_readdata,                                   //                                                  .readdata
		output wire [31:0] epcq_avl_csr_writedata,                                  //                                                  .writedata
		input  wire        epcq_avl_csr_readdatavalid,                              //                                                  .readdatavalid
		input  wire        epcq_avl_csr_waitrequest,                                //                                                  .waitrequest
		output wire [20:0] epcq_avl_mem_address,                                    //                                      epcq_avl_mem.address
		output wire        epcq_avl_mem_write,                                      //                                                  .write
		output wire        epcq_avl_mem_read,                                       //                                                  .read
		input  wire [31:0] epcq_avl_mem_readdata,                                   //                                                  .readdata
		output wire [31:0] epcq_avl_mem_writedata,                                  //                                                  .writedata
		output wire [6:0]  epcq_avl_mem_burstcount,                                 //                                                  .burstcount
		output wire [3:0]  epcq_avl_mem_byteenable,                                 //                                                  .byteenable
		input  wire        epcq_avl_mem_readdatavalid,                              //                                                  .readdatavalid
		input  wire        epcq_avl_mem_waitrequest,                                //                                                  .waitrequest
		output wire [1:0]  gpio0_s1_address,                                        //                                          gpio0_s1.address
		output wire        gpio0_s1_write,                                          //                                                  .write
		input  wire [31:0] gpio0_s1_readdata,                                       //                                                  .readdata
		output wire [31:0] gpio0_s1_writedata,                                      //                                                  .writedata
		output wire        gpio0_s1_chipselect,                                     //                                                  .chipselect
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,                     //                       jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,                       //                                                  .write
		output wire        jtag_uart_avalon_jtag_slave_read,                        //                                                  .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,                    //                                                  .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,                   //                                                  .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,                 //                                                  .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,                  //                                                  .chipselect
		output wire [1:0]  led_s1_address,                                          //                                            led_s1.address
		output wire        led_s1_write,                                            //                                                  .write
		input  wire [31:0] led_s1_readdata,                                         //                                                  .readdata
		output wire [31:0] led_s1_writedata,                                        //                                                  .writedata
		output wire        led_s1_chipselect,                                       //                                                  .chipselect
		output wire [1:0]  led_7seg_0_s1_address,                                   //                                     led_7seg_0_s1.address
		output wire        led_7seg_0_s1_write,                                     //                                                  .write
		input  wire [31:0] led_7seg_0_s1_readdata,                                  //                                                  .readdata
		output wire [31:0] led_7seg_0_s1_writedata,                                 //                                                  .writedata
		output wire        led_7seg_0_s1_chipselect,                                //                                                  .chipselect
		output wire [1:0]  led_7seg_1_s1_address,                                   //                                     led_7seg_1_s1.address
		output wire        led_7seg_1_s1_write,                                     //                                                  .write
		input  wire [31:0] led_7seg_1_s1_readdata,                                  //                                                  .readdata
		output wire [31:0] led_7seg_1_s1_writedata,                                 //                                                  .writedata
		output wire        led_7seg_1_s1_chipselect,                                //                                                  .chipselect
		output wire [1:0]  led_7seg_2_s1_address,                                   //                                     led_7seg_2_s1.address
		output wire        led_7seg_2_s1_write,                                     //                                                  .write
		input  wire [31:0] led_7seg_2_s1_readdata,                                  //                                                  .readdata
		output wire [31:0] led_7seg_2_s1_writedata,                                 //                                                  .writedata
		output wire        led_7seg_2_s1_chipselect,                                //                                                  .chipselect
		output wire [7:0]  mmcdma_s1_address,                                       //                                         mmcdma_s1.address
		output wire        mmcdma_s1_write,                                         //                                                  .write
		output wire        mmcdma_s1_read,                                          //                                                  .read
		input  wire [31:0] mmcdma_s1_readdata,                                      //                                                  .readdata
		output wire [31:0] mmcdma_s1_writedata,                                     //                                                  .writedata
		output wire        mmcdma_s1_chipselect,                                    //                                                  .chipselect
		output wire [1:0]  pcm_s0_address,                                          //                                            pcm_s0.address
		output wire        pcm_s0_write,                                            //                                                  .write
		output wire        pcm_s0_read,                                             //                                                  .read
		input  wire [31:0] pcm_s0_readdata,                                         //                                                  .readdata
		output wire [31:0] pcm_s0_writedata,                                        //                                                  .writedata
		output wire [0:0]  ps2_kb_avalon_ps2_slave_address,                         //                           ps2_kb_avalon_ps2_slave.address
		output wire        ps2_kb_avalon_ps2_slave_write,                           //                                                  .write
		output wire        ps2_kb_avalon_ps2_slave_read,                            //                                                  .read
		input  wire [31:0] ps2_kb_avalon_ps2_slave_readdata,                        //                                                  .readdata
		output wire [31:0] ps2_kb_avalon_ps2_slave_writedata,                       //                                                  .writedata
		output wire [3:0]  ps2_kb_avalon_ps2_slave_byteenable,                      //                                                  .byteenable
		input  wire        ps2_kb_avalon_ps2_slave_waitrequest,                     //                                                  .waitrequest
		output wire        ps2_kb_avalon_ps2_slave_chipselect,                      //                                                  .chipselect
		output wire [1:0]  psw_s1_address,                                          //                                            psw_s1.address
		output wire        psw_s1_write,                                            //                                                  .write
		input  wire [31:0] psw_s1_readdata,                                         //                                                  .readdata
		output wire [31:0] psw_s1_writedata,                                        //                                                  .writedata
		output wire        psw_s1_chipselect,                                       //                                                  .chipselect
		output wire [0:0]  sysid_control_slave_address,                             //                               sysid_control_slave.address
		input  wire [31:0] sysid_control_slave_readdata,                            //                                                  .readdata
		output wire [2:0]  systimer_s1_address,                                     //                                       systimer_s1.address
		output wire        systimer_s1_write,                                       //                                                  .write
		input  wire [15:0] systimer_s1_readdata,                                    //                                                  .readdata
		output wire [15:0] systimer_s1_writedata,                                   //                                                  .writedata
		output wire        systimer_s1_chipselect,                                  //                                                  .chipselect
		output wire [7:0]  usb_s1_address,                                          //                                            usb_s1.address
		output wire        usb_s1_write,                                            //                                                  .write
		output wire        usb_s1_read,                                             //                                                  .read
		input  wire [7:0]  usb_s1_readdata,                                         //                                                  .readdata
		output wire [7:0]  usb_s1_writedata,                                        //                                                  .writedata
		input  wire        usb_s1_waitrequest,                                      //                                                  .waitrequest
		output wire        usb_s1_chipselect,                                       //                                                  .chipselect
		output wire [1:0]  vga_s1_address,                                          //                                            vga_s1.address
		output wire        vga_s1_write,                                            //                                                  .write
		output wire        vga_s1_read,                                             //                                                  .read
		input  wire [31:0] vga_s1_readdata,                                         //                                                  .readdata
		output wire [31:0] vga_s1_writedata                                         //                                                  .writedata
	);

	wire          peripherals_bridge_m0_translator_avalon_universal_master_0_waitrequest;   // peripherals_bridge_m0_agent:av_waitrequest -> peripherals_bridge_m0_translator:uav_waitrequest
	wire   [31:0] peripherals_bridge_m0_translator_avalon_universal_master_0_readdata;      // peripherals_bridge_m0_agent:av_readdata -> peripherals_bridge_m0_translator:uav_readdata
	wire          peripherals_bridge_m0_translator_avalon_universal_master_0_debugaccess;   // peripherals_bridge_m0_translator:uav_debugaccess -> peripherals_bridge_m0_agent:av_debugaccess
	wire   [23:0] peripherals_bridge_m0_translator_avalon_universal_master_0_address;       // peripherals_bridge_m0_translator:uav_address -> peripherals_bridge_m0_agent:av_address
	wire          peripherals_bridge_m0_translator_avalon_universal_master_0_read;          // peripherals_bridge_m0_translator:uav_read -> peripherals_bridge_m0_agent:av_read
	wire    [3:0] peripherals_bridge_m0_translator_avalon_universal_master_0_byteenable;    // peripherals_bridge_m0_translator:uav_byteenable -> peripherals_bridge_m0_agent:av_byteenable
	wire          peripherals_bridge_m0_translator_avalon_universal_master_0_readdatavalid; // peripherals_bridge_m0_agent:av_readdatavalid -> peripherals_bridge_m0_translator:uav_readdatavalid
	wire          peripherals_bridge_m0_translator_avalon_universal_master_0_lock;          // peripherals_bridge_m0_translator:uav_lock -> peripherals_bridge_m0_agent:av_lock
	wire          peripherals_bridge_m0_translator_avalon_universal_master_0_write;         // peripherals_bridge_m0_translator:uav_write -> peripherals_bridge_m0_agent:av_write
	wire   [31:0] peripherals_bridge_m0_translator_avalon_universal_master_0_writedata;     // peripherals_bridge_m0_translator:uav_writedata -> peripherals_bridge_m0_agent:av_writedata
	wire    [2:0] peripherals_bridge_m0_translator_avalon_universal_master_0_burstcount;    // peripherals_bridge_m0_translator:uav_burstcount -> peripherals_bridge_m0_agent:av_burstcount
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                            // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                         // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                         // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire   [23:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                             // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                          // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                       // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                           // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                               // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                          // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                        // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [116:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                         // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                        // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                  // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                     // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [116:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                      // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                     // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;             // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;               // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                        // cmd_mux:src_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [115:0] cmd_mux_src_data;                                                         // cmd_mux:src_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                        // jtag_uart_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [16:0] cmd_mux_src_channel;                                                      // cmd_mux:src_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                // cmd_mux:src_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                  // cmd_mux:src_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] ps2_kb_avalon_ps2_slave_agent_m0_readdata;                                // ps2_kb_avalon_ps2_slave_translator:uav_readdata -> ps2_kb_avalon_ps2_slave_agent:m0_readdata
	wire          ps2_kb_avalon_ps2_slave_agent_m0_waitrequest;                             // ps2_kb_avalon_ps2_slave_translator:uav_waitrequest -> ps2_kb_avalon_ps2_slave_agent:m0_waitrequest
	wire          ps2_kb_avalon_ps2_slave_agent_m0_debugaccess;                             // ps2_kb_avalon_ps2_slave_agent:m0_debugaccess -> ps2_kb_avalon_ps2_slave_translator:uav_debugaccess
	wire   [23:0] ps2_kb_avalon_ps2_slave_agent_m0_address;                                 // ps2_kb_avalon_ps2_slave_agent:m0_address -> ps2_kb_avalon_ps2_slave_translator:uav_address
	wire    [3:0] ps2_kb_avalon_ps2_slave_agent_m0_byteenable;                              // ps2_kb_avalon_ps2_slave_agent:m0_byteenable -> ps2_kb_avalon_ps2_slave_translator:uav_byteenable
	wire          ps2_kb_avalon_ps2_slave_agent_m0_read;                                    // ps2_kb_avalon_ps2_slave_agent:m0_read -> ps2_kb_avalon_ps2_slave_translator:uav_read
	wire          ps2_kb_avalon_ps2_slave_agent_m0_readdatavalid;                           // ps2_kb_avalon_ps2_slave_translator:uav_readdatavalid -> ps2_kb_avalon_ps2_slave_agent:m0_readdatavalid
	wire          ps2_kb_avalon_ps2_slave_agent_m0_lock;                                    // ps2_kb_avalon_ps2_slave_agent:m0_lock -> ps2_kb_avalon_ps2_slave_translator:uav_lock
	wire   [31:0] ps2_kb_avalon_ps2_slave_agent_m0_writedata;                               // ps2_kb_avalon_ps2_slave_agent:m0_writedata -> ps2_kb_avalon_ps2_slave_translator:uav_writedata
	wire          ps2_kb_avalon_ps2_slave_agent_m0_write;                                   // ps2_kb_avalon_ps2_slave_agent:m0_write -> ps2_kb_avalon_ps2_slave_translator:uav_write
	wire    [2:0] ps2_kb_avalon_ps2_slave_agent_m0_burstcount;                              // ps2_kb_avalon_ps2_slave_agent:m0_burstcount -> ps2_kb_avalon_ps2_slave_translator:uav_burstcount
	wire          ps2_kb_avalon_ps2_slave_agent_rf_source_valid;                            // ps2_kb_avalon_ps2_slave_agent:rf_source_valid -> ps2_kb_avalon_ps2_slave_agent_rsp_fifo:in_valid
	wire  [116:0] ps2_kb_avalon_ps2_slave_agent_rf_source_data;                             // ps2_kb_avalon_ps2_slave_agent:rf_source_data -> ps2_kb_avalon_ps2_slave_agent_rsp_fifo:in_data
	wire          ps2_kb_avalon_ps2_slave_agent_rf_source_ready;                            // ps2_kb_avalon_ps2_slave_agent_rsp_fifo:in_ready -> ps2_kb_avalon_ps2_slave_agent:rf_source_ready
	wire          ps2_kb_avalon_ps2_slave_agent_rf_source_startofpacket;                    // ps2_kb_avalon_ps2_slave_agent:rf_source_startofpacket -> ps2_kb_avalon_ps2_slave_agent_rsp_fifo:in_startofpacket
	wire          ps2_kb_avalon_ps2_slave_agent_rf_source_endofpacket;                      // ps2_kb_avalon_ps2_slave_agent:rf_source_endofpacket -> ps2_kb_avalon_ps2_slave_agent_rsp_fifo:in_endofpacket
	wire          ps2_kb_avalon_ps2_slave_agent_rsp_fifo_out_valid;                         // ps2_kb_avalon_ps2_slave_agent_rsp_fifo:out_valid -> ps2_kb_avalon_ps2_slave_agent:rf_sink_valid
	wire  [116:0] ps2_kb_avalon_ps2_slave_agent_rsp_fifo_out_data;                          // ps2_kb_avalon_ps2_slave_agent_rsp_fifo:out_data -> ps2_kb_avalon_ps2_slave_agent:rf_sink_data
	wire          ps2_kb_avalon_ps2_slave_agent_rsp_fifo_out_ready;                         // ps2_kb_avalon_ps2_slave_agent:rf_sink_ready -> ps2_kb_avalon_ps2_slave_agent_rsp_fifo:out_ready
	wire          ps2_kb_avalon_ps2_slave_agent_rsp_fifo_out_startofpacket;                 // ps2_kb_avalon_ps2_slave_agent_rsp_fifo:out_startofpacket -> ps2_kb_avalon_ps2_slave_agent:rf_sink_startofpacket
	wire          ps2_kb_avalon_ps2_slave_agent_rsp_fifo_out_endofpacket;                   // ps2_kb_avalon_ps2_slave_agent_rsp_fifo:out_endofpacket -> ps2_kb_avalon_ps2_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                    // cmd_mux_001:src_valid -> ps2_kb_avalon_ps2_slave_agent:cp_valid
	wire  [115:0] cmd_mux_001_src_data;                                                     // cmd_mux_001:src_data -> ps2_kb_avalon_ps2_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                    // ps2_kb_avalon_ps2_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [16:0] cmd_mux_001_src_channel;                                                  // cmd_mux_001:src_channel -> ps2_kb_avalon_ps2_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                            // cmd_mux_001:src_startofpacket -> ps2_kb_avalon_ps2_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                              // cmd_mux_001:src_endofpacket -> ps2_kb_avalon_ps2_slave_agent:cp_endofpacket
	wire   [31:0] epcq_avl_csr_agent_m0_readdata;                                           // epcq_avl_csr_translator:uav_readdata -> epcq_avl_csr_agent:m0_readdata
	wire          epcq_avl_csr_agent_m0_waitrequest;                                        // epcq_avl_csr_translator:uav_waitrequest -> epcq_avl_csr_agent:m0_waitrequest
	wire          epcq_avl_csr_agent_m0_debugaccess;                                        // epcq_avl_csr_agent:m0_debugaccess -> epcq_avl_csr_translator:uav_debugaccess
	wire   [23:0] epcq_avl_csr_agent_m0_address;                                            // epcq_avl_csr_agent:m0_address -> epcq_avl_csr_translator:uav_address
	wire    [3:0] epcq_avl_csr_agent_m0_byteenable;                                         // epcq_avl_csr_agent:m0_byteenable -> epcq_avl_csr_translator:uav_byteenable
	wire          epcq_avl_csr_agent_m0_read;                                               // epcq_avl_csr_agent:m0_read -> epcq_avl_csr_translator:uav_read
	wire          epcq_avl_csr_agent_m0_readdatavalid;                                      // epcq_avl_csr_translator:uav_readdatavalid -> epcq_avl_csr_agent:m0_readdatavalid
	wire          epcq_avl_csr_agent_m0_lock;                                               // epcq_avl_csr_agent:m0_lock -> epcq_avl_csr_translator:uav_lock
	wire   [31:0] epcq_avl_csr_agent_m0_writedata;                                          // epcq_avl_csr_agent:m0_writedata -> epcq_avl_csr_translator:uav_writedata
	wire          epcq_avl_csr_agent_m0_write;                                              // epcq_avl_csr_agent:m0_write -> epcq_avl_csr_translator:uav_write
	wire    [2:0] epcq_avl_csr_agent_m0_burstcount;                                         // epcq_avl_csr_agent:m0_burstcount -> epcq_avl_csr_translator:uav_burstcount
	wire          epcq_avl_csr_agent_rf_source_valid;                                       // epcq_avl_csr_agent:rf_source_valid -> epcq_avl_csr_agent_rsp_fifo:in_valid
	wire  [116:0] epcq_avl_csr_agent_rf_source_data;                                        // epcq_avl_csr_agent:rf_source_data -> epcq_avl_csr_agent_rsp_fifo:in_data
	wire          epcq_avl_csr_agent_rf_source_ready;                                       // epcq_avl_csr_agent_rsp_fifo:in_ready -> epcq_avl_csr_agent:rf_source_ready
	wire          epcq_avl_csr_agent_rf_source_startofpacket;                               // epcq_avl_csr_agent:rf_source_startofpacket -> epcq_avl_csr_agent_rsp_fifo:in_startofpacket
	wire          epcq_avl_csr_agent_rf_source_endofpacket;                                 // epcq_avl_csr_agent:rf_source_endofpacket -> epcq_avl_csr_agent_rsp_fifo:in_endofpacket
	wire          epcq_avl_csr_agent_rsp_fifo_out_valid;                                    // epcq_avl_csr_agent_rsp_fifo:out_valid -> epcq_avl_csr_agent:rf_sink_valid
	wire  [116:0] epcq_avl_csr_agent_rsp_fifo_out_data;                                     // epcq_avl_csr_agent_rsp_fifo:out_data -> epcq_avl_csr_agent:rf_sink_data
	wire          epcq_avl_csr_agent_rsp_fifo_out_ready;                                    // epcq_avl_csr_agent:rf_sink_ready -> epcq_avl_csr_agent_rsp_fifo:out_ready
	wire          epcq_avl_csr_agent_rsp_fifo_out_startofpacket;                            // epcq_avl_csr_agent_rsp_fifo:out_startofpacket -> epcq_avl_csr_agent:rf_sink_startofpacket
	wire          epcq_avl_csr_agent_rsp_fifo_out_endofpacket;                              // epcq_avl_csr_agent_rsp_fifo:out_endofpacket -> epcq_avl_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                    // cmd_mux_002:src_valid -> epcq_avl_csr_agent:cp_valid
	wire  [115:0] cmd_mux_002_src_data;                                                     // cmd_mux_002:src_data -> epcq_avl_csr_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                    // epcq_avl_csr_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [16:0] cmd_mux_002_src_channel;                                                  // cmd_mux_002:src_channel -> epcq_avl_csr_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                            // cmd_mux_002:src_startofpacket -> epcq_avl_csr_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                              // cmd_mux_002:src_endofpacket -> epcq_avl_csr_agent:cp_endofpacket
	wire   [31:0] epcq_avl_mem_agent_m0_readdata;                                           // epcq_avl_mem_translator:uav_readdata -> epcq_avl_mem_agent:m0_readdata
	wire          epcq_avl_mem_agent_m0_waitrequest;                                        // epcq_avl_mem_translator:uav_waitrequest -> epcq_avl_mem_agent:m0_waitrequest
	wire          epcq_avl_mem_agent_m0_debugaccess;                                        // epcq_avl_mem_agent:m0_debugaccess -> epcq_avl_mem_translator:uav_debugaccess
	wire   [23:0] epcq_avl_mem_agent_m0_address;                                            // epcq_avl_mem_agent:m0_address -> epcq_avl_mem_translator:uav_address
	wire    [3:0] epcq_avl_mem_agent_m0_byteenable;                                         // epcq_avl_mem_agent:m0_byteenable -> epcq_avl_mem_translator:uav_byteenable
	wire          epcq_avl_mem_agent_m0_read;                                               // epcq_avl_mem_agent:m0_read -> epcq_avl_mem_translator:uav_read
	wire          epcq_avl_mem_agent_m0_readdatavalid;                                      // epcq_avl_mem_translator:uav_readdatavalid -> epcq_avl_mem_agent:m0_readdatavalid
	wire          epcq_avl_mem_agent_m0_lock;                                               // epcq_avl_mem_agent:m0_lock -> epcq_avl_mem_translator:uav_lock
	wire   [31:0] epcq_avl_mem_agent_m0_writedata;                                          // epcq_avl_mem_agent:m0_writedata -> epcq_avl_mem_translator:uav_writedata
	wire          epcq_avl_mem_agent_m0_write;                                              // epcq_avl_mem_agent:m0_write -> epcq_avl_mem_translator:uav_write
	wire    [8:0] epcq_avl_mem_agent_m0_burstcount;                                         // epcq_avl_mem_agent:m0_burstcount -> epcq_avl_mem_translator:uav_burstcount
	wire          epcq_avl_mem_agent_rf_source_valid;                                       // epcq_avl_mem_agent:rf_source_valid -> epcq_avl_mem_agent_rsp_fifo:in_valid
	wire  [116:0] epcq_avl_mem_agent_rf_source_data;                                        // epcq_avl_mem_agent:rf_source_data -> epcq_avl_mem_agent_rsp_fifo:in_data
	wire          epcq_avl_mem_agent_rf_source_ready;                                       // epcq_avl_mem_agent_rsp_fifo:in_ready -> epcq_avl_mem_agent:rf_source_ready
	wire          epcq_avl_mem_agent_rf_source_startofpacket;                               // epcq_avl_mem_agent:rf_source_startofpacket -> epcq_avl_mem_agent_rsp_fifo:in_startofpacket
	wire          epcq_avl_mem_agent_rf_source_endofpacket;                                 // epcq_avl_mem_agent:rf_source_endofpacket -> epcq_avl_mem_agent_rsp_fifo:in_endofpacket
	wire          epcq_avl_mem_agent_rsp_fifo_out_valid;                                    // epcq_avl_mem_agent_rsp_fifo:out_valid -> epcq_avl_mem_agent:rf_sink_valid
	wire  [116:0] epcq_avl_mem_agent_rsp_fifo_out_data;                                     // epcq_avl_mem_agent_rsp_fifo:out_data -> epcq_avl_mem_agent:rf_sink_data
	wire          epcq_avl_mem_agent_rsp_fifo_out_ready;                                    // epcq_avl_mem_agent:rf_sink_ready -> epcq_avl_mem_agent_rsp_fifo:out_ready
	wire          epcq_avl_mem_agent_rsp_fifo_out_startofpacket;                            // epcq_avl_mem_agent_rsp_fifo:out_startofpacket -> epcq_avl_mem_agent:rf_sink_startofpacket
	wire          epcq_avl_mem_agent_rsp_fifo_out_endofpacket;                              // epcq_avl_mem_agent_rsp_fifo:out_endofpacket -> epcq_avl_mem_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                    // cmd_mux_003:src_valid -> epcq_avl_mem_agent:cp_valid
	wire  [115:0] cmd_mux_003_src_data;                                                     // cmd_mux_003:src_data -> epcq_avl_mem_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                    // epcq_avl_mem_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [16:0] cmd_mux_003_src_channel;                                                  // cmd_mux_003:src_channel -> epcq_avl_mem_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                            // cmd_mux_003:src_startofpacket -> epcq_avl_mem_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                              // cmd_mux_003:src_endofpacket -> epcq_avl_mem_agent:cp_endofpacket
	wire   [31:0] sysid_control_slave_agent_m0_readdata;                                    // sysid_control_slave_translator:uav_readdata -> sysid_control_slave_agent:m0_readdata
	wire          sysid_control_slave_agent_m0_waitrequest;                                 // sysid_control_slave_translator:uav_waitrequest -> sysid_control_slave_agent:m0_waitrequest
	wire          sysid_control_slave_agent_m0_debugaccess;                                 // sysid_control_slave_agent:m0_debugaccess -> sysid_control_slave_translator:uav_debugaccess
	wire   [23:0] sysid_control_slave_agent_m0_address;                                     // sysid_control_slave_agent:m0_address -> sysid_control_slave_translator:uav_address
	wire    [3:0] sysid_control_slave_agent_m0_byteenable;                                  // sysid_control_slave_agent:m0_byteenable -> sysid_control_slave_translator:uav_byteenable
	wire          sysid_control_slave_agent_m0_read;                                        // sysid_control_slave_agent:m0_read -> sysid_control_slave_translator:uav_read
	wire          sysid_control_slave_agent_m0_readdatavalid;                               // sysid_control_slave_translator:uav_readdatavalid -> sysid_control_slave_agent:m0_readdatavalid
	wire          sysid_control_slave_agent_m0_lock;                                        // sysid_control_slave_agent:m0_lock -> sysid_control_slave_translator:uav_lock
	wire   [31:0] sysid_control_slave_agent_m0_writedata;                                   // sysid_control_slave_agent:m0_writedata -> sysid_control_slave_translator:uav_writedata
	wire          sysid_control_slave_agent_m0_write;                                       // sysid_control_slave_agent:m0_write -> sysid_control_slave_translator:uav_write
	wire    [2:0] sysid_control_slave_agent_m0_burstcount;                                  // sysid_control_slave_agent:m0_burstcount -> sysid_control_slave_translator:uav_burstcount
	wire          sysid_control_slave_agent_rf_source_valid;                                // sysid_control_slave_agent:rf_source_valid -> sysid_control_slave_agent_rsp_fifo:in_valid
	wire  [116:0] sysid_control_slave_agent_rf_source_data;                                 // sysid_control_slave_agent:rf_source_data -> sysid_control_slave_agent_rsp_fifo:in_data
	wire          sysid_control_slave_agent_rf_source_ready;                                // sysid_control_slave_agent_rsp_fifo:in_ready -> sysid_control_slave_agent:rf_source_ready
	wire          sysid_control_slave_agent_rf_source_startofpacket;                        // sysid_control_slave_agent:rf_source_startofpacket -> sysid_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_control_slave_agent_rf_source_endofpacket;                          // sysid_control_slave_agent:rf_source_endofpacket -> sysid_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_valid;                             // sysid_control_slave_agent_rsp_fifo:out_valid -> sysid_control_slave_agent:rf_sink_valid
	wire  [116:0] sysid_control_slave_agent_rsp_fifo_out_data;                              // sysid_control_slave_agent_rsp_fifo:out_data -> sysid_control_slave_agent:rf_sink_data
	wire          sysid_control_slave_agent_rsp_fifo_out_ready;                             // sysid_control_slave_agent:rf_sink_ready -> sysid_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_control_slave_agent_rsp_fifo_out_startofpacket;                     // sysid_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_control_slave_agent:rf_sink_startofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_endofpacket;                       // sysid_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                    // cmd_mux_004:src_valid -> sysid_control_slave_agent:cp_valid
	wire  [115:0] cmd_mux_004_src_data;                                                     // cmd_mux_004:src_data -> sysid_control_slave_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                    // sysid_control_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [16:0] cmd_mux_004_src_channel;                                                  // cmd_mux_004:src_channel -> sysid_control_slave_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                            // cmd_mux_004:src_startofpacket -> sysid_control_slave_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                              // cmd_mux_004:src_endofpacket -> sysid_control_slave_agent:cp_endofpacket
	wire   [31:0] pcm_s0_agent_m0_readdata;                                                 // pcm_s0_translator:uav_readdata -> pcm_s0_agent:m0_readdata
	wire          pcm_s0_agent_m0_waitrequest;                                              // pcm_s0_translator:uav_waitrequest -> pcm_s0_agent:m0_waitrequest
	wire          pcm_s0_agent_m0_debugaccess;                                              // pcm_s0_agent:m0_debugaccess -> pcm_s0_translator:uav_debugaccess
	wire   [23:0] pcm_s0_agent_m0_address;                                                  // pcm_s0_agent:m0_address -> pcm_s0_translator:uav_address
	wire    [3:0] pcm_s0_agent_m0_byteenable;                                               // pcm_s0_agent:m0_byteenable -> pcm_s0_translator:uav_byteenable
	wire          pcm_s0_agent_m0_read;                                                     // pcm_s0_agent:m0_read -> pcm_s0_translator:uav_read
	wire          pcm_s0_agent_m0_readdatavalid;                                            // pcm_s0_translator:uav_readdatavalid -> pcm_s0_agent:m0_readdatavalid
	wire          pcm_s0_agent_m0_lock;                                                     // pcm_s0_agent:m0_lock -> pcm_s0_translator:uav_lock
	wire   [31:0] pcm_s0_agent_m0_writedata;                                                // pcm_s0_agent:m0_writedata -> pcm_s0_translator:uav_writedata
	wire          pcm_s0_agent_m0_write;                                                    // pcm_s0_agent:m0_write -> pcm_s0_translator:uav_write
	wire    [2:0] pcm_s0_agent_m0_burstcount;                                               // pcm_s0_agent:m0_burstcount -> pcm_s0_translator:uav_burstcount
	wire          pcm_s0_agent_rf_source_valid;                                             // pcm_s0_agent:rf_source_valid -> pcm_s0_agent_rsp_fifo:in_valid
	wire  [116:0] pcm_s0_agent_rf_source_data;                                              // pcm_s0_agent:rf_source_data -> pcm_s0_agent_rsp_fifo:in_data
	wire          pcm_s0_agent_rf_source_ready;                                             // pcm_s0_agent_rsp_fifo:in_ready -> pcm_s0_agent:rf_source_ready
	wire          pcm_s0_agent_rf_source_startofpacket;                                     // pcm_s0_agent:rf_source_startofpacket -> pcm_s0_agent_rsp_fifo:in_startofpacket
	wire          pcm_s0_agent_rf_source_endofpacket;                                       // pcm_s0_agent:rf_source_endofpacket -> pcm_s0_agent_rsp_fifo:in_endofpacket
	wire          pcm_s0_agent_rsp_fifo_out_valid;                                          // pcm_s0_agent_rsp_fifo:out_valid -> pcm_s0_agent:rf_sink_valid
	wire  [116:0] pcm_s0_agent_rsp_fifo_out_data;                                           // pcm_s0_agent_rsp_fifo:out_data -> pcm_s0_agent:rf_sink_data
	wire          pcm_s0_agent_rsp_fifo_out_ready;                                          // pcm_s0_agent:rf_sink_ready -> pcm_s0_agent_rsp_fifo:out_ready
	wire          pcm_s0_agent_rsp_fifo_out_startofpacket;                                  // pcm_s0_agent_rsp_fifo:out_startofpacket -> pcm_s0_agent:rf_sink_startofpacket
	wire          pcm_s0_agent_rsp_fifo_out_endofpacket;                                    // pcm_s0_agent_rsp_fifo:out_endofpacket -> pcm_s0_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                    // cmd_mux_005:src_valid -> pcm_s0_agent:cp_valid
	wire  [115:0] cmd_mux_005_src_data;                                                     // cmd_mux_005:src_data -> pcm_s0_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                    // pcm_s0_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [16:0] cmd_mux_005_src_channel;                                                  // cmd_mux_005:src_channel -> pcm_s0_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                            // cmd_mux_005:src_startofpacket -> pcm_s0_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                              // cmd_mux_005:src_endofpacket -> pcm_s0_agent:cp_endofpacket
	wire   [31:0] vga_s1_agent_m0_readdata;                                                 // vga_s1_translator:uav_readdata -> vga_s1_agent:m0_readdata
	wire          vga_s1_agent_m0_waitrequest;                                              // vga_s1_translator:uav_waitrequest -> vga_s1_agent:m0_waitrequest
	wire          vga_s1_agent_m0_debugaccess;                                              // vga_s1_agent:m0_debugaccess -> vga_s1_translator:uav_debugaccess
	wire   [23:0] vga_s1_agent_m0_address;                                                  // vga_s1_agent:m0_address -> vga_s1_translator:uav_address
	wire    [3:0] vga_s1_agent_m0_byteenable;                                               // vga_s1_agent:m0_byteenable -> vga_s1_translator:uav_byteenable
	wire          vga_s1_agent_m0_read;                                                     // vga_s1_agent:m0_read -> vga_s1_translator:uav_read
	wire          vga_s1_agent_m0_readdatavalid;                                            // vga_s1_translator:uav_readdatavalid -> vga_s1_agent:m0_readdatavalid
	wire          vga_s1_agent_m0_lock;                                                     // vga_s1_agent:m0_lock -> vga_s1_translator:uav_lock
	wire   [31:0] vga_s1_agent_m0_writedata;                                                // vga_s1_agent:m0_writedata -> vga_s1_translator:uav_writedata
	wire          vga_s1_agent_m0_write;                                                    // vga_s1_agent:m0_write -> vga_s1_translator:uav_write
	wire    [2:0] vga_s1_agent_m0_burstcount;                                               // vga_s1_agent:m0_burstcount -> vga_s1_translator:uav_burstcount
	wire          vga_s1_agent_rf_source_valid;                                             // vga_s1_agent:rf_source_valid -> vga_s1_agent_rsp_fifo:in_valid
	wire  [116:0] vga_s1_agent_rf_source_data;                                              // vga_s1_agent:rf_source_data -> vga_s1_agent_rsp_fifo:in_data
	wire          vga_s1_agent_rf_source_ready;                                             // vga_s1_agent_rsp_fifo:in_ready -> vga_s1_agent:rf_source_ready
	wire          vga_s1_agent_rf_source_startofpacket;                                     // vga_s1_agent:rf_source_startofpacket -> vga_s1_agent_rsp_fifo:in_startofpacket
	wire          vga_s1_agent_rf_source_endofpacket;                                       // vga_s1_agent:rf_source_endofpacket -> vga_s1_agent_rsp_fifo:in_endofpacket
	wire          vga_s1_agent_rsp_fifo_out_valid;                                          // vga_s1_agent_rsp_fifo:out_valid -> vga_s1_agent:rf_sink_valid
	wire  [116:0] vga_s1_agent_rsp_fifo_out_data;                                           // vga_s1_agent_rsp_fifo:out_data -> vga_s1_agent:rf_sink_data
	wire          vga_s1_agent_rsp_fifo_out_ready;                                          // vga_s1_agent:rf_sink_ready -> vga_s1_agent_rsp_fifo:out_ready
	wire          vga_s1_agent_rsp_fifo_out_startofpacket;                                  // vga_s1_agent_rsp_fifo:out_startofpacket -> vga_s1_agent:rf_sink_startofpacket
	wire          vga_s1_agent_rsp_fifo_out_endofpacket;                                    // vga_s1_agent_rsp_fifo:out_endofpacket -> vga_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                    // cmd_mux_006:src_valid -> vga_s1_agent:cp_valid
	wire  [115:0] cmd_mux_006_src_data;                                                     // cmd_mux_006:src_data -> vga_s1_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                    // vga_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [16:0] cmd_mux_006_src_channel;                                                  // cmd_mux_006:src_channel -> vga_s1_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                            // cmd_mux_006:src_startofpacket -> vga_s1_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                              // cmd_mux_006:src_endofpacket -> vga_s1_agent:cp_endofpacket
	wire    [7:0] usb_s1_agent_m0_readdata;                                                 // usb_s1_translator:uav_readdata -> usb_s1_agent:m0_readdata
	wire          usb_s1_agent_m0_waitrequest;                                              // usb_s1_translator:uav_waitrequest -> usb_s1_agent:m0_waitrequest
	wire          usb_s1_agent_m0_debugaccess;                                              // usb_s1_agent:m0_debugaccess -> usb_s1_translator:uav_debugaccess
	wire   [23:0] usb_s1_agent_m0_address;                                                  // usb_s1_agent:m0_address -> usb_s1_translator:uav_address
	wire    [0:0] usb_s1_agent_m0_byteenable;                                               // usb_s1_agent:m0_byteenable -> usb_s1_translator:uav_byteenable
	wire          usb_s1_agent_m0_read;                                                     // usb_s1_agent:m0_read -> usb_s1_translator:uav_read
	wire          usb_s1_agent_m0_readdatavalid;                                            // usb_s1_translator:uav_readdatavalid -> usb_s1_agent:m0_readdatavalid
	wire          usb_s1_agent_m0_lock;                                                     // usb_s1_agent:m0_lock -> usb_s1_translator:uav_lock
	wire    [7:0] usb_s1_agent_m0_writedata;                                                // usb_s1_agent:m0_writedata -> usb_s1_translator:uav_writedata
	wire          usb_s1_agent_m0_write;                                                    // usb_s1_agent:m0_write -> usb_s1_translator:uav_write
	wire    [0:0] usb_s1_agent_m0_burstcount;                                               // usb_s1_agent:m0_burstcount -> usb_s1_translator:uav_burstcount
	wire          usb_s1_agent_rf_source_valid;                                             // usb_s1_agent:rf_source_valid -> usb_s1_agent_rsp_fifo:in_valid
	wire   [89:0] usb_s1_agent_rf_source_data;                                              // usb_s1_agent:rf_source_data -> usb_s1_agent_rsp_fifo:in_data
	wire          usb_s1_agent_rf_source_ready;                                             // usb_s1_agent_rsp_fifo:in_ready -> usb_s1_agent:rf_source_ready
	wire          usb_s1_agent_rf_source_startofpacket;                                     // usb_s1_agent:rf_source_startofpacket -> usb_s1_agent_rsp_fifo:in_startofpacket
	wire          usb_s1_agent_rf_source_endofpacket;                                       // usb_s1_agent:rf_source_endofpacket -> usb_s1_agent_rsp_fifo:in_endofpacket
	wire          usb_s1_agent_rsp_fifo_out_valid;                                          // usb_s1_agent_rsp_fifo:out_valid -> usb_s1_agent:rf_sink_valid
	wire   [89:0] usb_s1_agent_rsp_fifo_out_data;                                           // usb_s1_agent_rsp_fifo:out_data -> usb_s1_agent:rf_sink_data
	wire          usb_s1_agent_rsp_fifo_out_ready;                                          // usb_s1_agent:rf_sink_ready -> usb_s1_agent_rsp_fifo:out_ready
	wire          usb_s1_agent_rsp_fifo_out_startofpacket;                                  // usb_s1_agent_rsp_fifo:out_startofpacket -> usb_s1_agent:rf_sink_startofpacket
	wire          usb_s1_agent_rsp_fifo_out_endofpacket;                                    // usb_s1_agent_rsp_fifo:out_endofpacket -> usb_s1_agent:rf_sink_endofpacket
	wire   [31:0] systimer_s1_agent_m0_readdata;                                            // systimer_s1_translator:uav_readdata -> systimer_s1_agent:m0_readdata
	wire          systimer_s1_agent_m0_waitrequest;                                         // systimer_s1_translator:uav_waitrequest -> systimer_s1_agent:m0_waitrequest
	wire          systimer_s1_agent_m0_debugaccess;                                         // systimer_s1_agent:m0_debugaccess -> systimer_s1_translator:uav_debugaccess
	wire   [23:0] systimer_s1_agent_m0_address;                                             // systimer_s1_agent:m0_address -> systimer_s1_translator:uav_address
	wire    [3:0] systimer_s1_agent_m0_byteenable;                                          // systimer_s1_agent:m0_byteenable -> systimer_s1_translator:uav_byteenable
	wire          systimer_s1_agent_m0_read;                                                // systimer_s1_agent:m0_read -> systimer_s1_translator:uav_read
	wire          systimer_s1_agent_m0_readdatavalid;                                       // systimer_s1_translator:uav_readdatavalid -> systimer_s1_agent:m0_readdatavalid
	wire          systimer_s1_agent_m0_lock;                                                // systimer_s1_agent:m0_lock -> systimer_s1_translator:uav_lock
	wire   [31:0] systimer_s1_agent_m0_writedata;                                           // systimer_s1_agent:m0_writedata -> systimer_s1_translator:uav_writedata
	wire          systimer_s1_agent_m0_write;                                               // systimer_s1_agent:m0_write -> systimer_s1_translator:uav_write
	wire    [2:0] systimer_s1_agent_m0_burstcount;                                          // systimer_s1_agent:m0_burstcount -> systimer_s1_translator:uav_burstcount
	wire          systimer_s1_agent_rf_source_valid;                                        // systimer_s1_agent:rf_source_valid -> systimer_s1_agent_rsp_fifo:in_valid
	wire  [116:0] systimer_s1_agent_rf_source_data;                                         // systimer_s1_agent:rf_source_data -> systimer_s1_agent_rsp_fifo:in_data
	wire          systimer_s1_agent_rf_source_ready;                                        // systimer_s1_agent_rsp_fifo:in_ready -> systimer_s1_agent:rf_source_ready
	wire          systimer_s1_agent_rf_source_startofpacket;                                // systimer_s1_agent:rf_source_startofpacket -> systimer_s1_agent_rsp_fifo:in_startofpacket
	wire          systimer_s1_agent_rf_source_endofpacket;                                  // systimer_s1_agent:rf_source_endofpacket -> systimer_s1_agent_rsp_fifo:in_endofpacket
	wire          systimer_s1_agent_rsp_fifo_out_valid;                                     // systimer_s1_agent_rsp_fifo:out_valid -> systimer_s1_agent:rf_sink_valid
	wire  [116:0] systimer_s1_agent_rsp_fifo_out_data;                                      // systimer_s1_agent_rsp_fifo:out_data -> systimer_s1_agent:rf_sink_data
	wire          systimer_s1_agent_rsp_fifo_out_ready;                                     // systimer_s1_agent:rf_sink_ready -> systimer_s1_agent_rsp_fifo:out_ready
	wire          systimer_s1_agent_rsp_fifo_out_startofpacket;                             // systimer_s1_agent_rsp_fifo:out_startofpacket -> systimer_s1_agent:rf_sink_startofpacket
	wire          systimer_s1_agent_rsp_fifo_out_endofpacket;                               // systimer_s1_agent_rsp_fifo:out_endofpacket -> systimer_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                    // cmd_mux_008:src_valid -> systimer_s1_agent:cp_valid
	wire  [115:0] cmd_mux_008_src_data;                                                     // cmd_mux_008:src_data -> systimer_s1_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                    // systimer_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [16:0] cmd_mux_008_src_channel;                                                  // cmd_mux_008:src_channel -> systimer_s1_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                            // cmd_mux_008:src_startofpacket -> systimer_s1_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                              // cmd_mux_008:src_endofpacket -> systimer_s1_agent:cp_endofpacket
	wire   [31:0] led_s1_agent_m0_readdata;                                                 // led_s1_translator:uav_readdata -> led_s1_agent:m0_readdata
	wire          led_s1_agent_m0_waitrequest;                                              // led_s1_translator:uav_waitrequest -> led_s1_agent:m0_waitrequest
	wire          led_s1_agent_m0_debugaccess;                                              // led_s1_agent:m0_debugaccess -> led_s1_translator:uav_debugaccess
	wire   [23:0] led_s1_agent_m0_address;                                                  // led_s1_agent:m0_address -> led_s1_translator:uav_address
	wire    [3:0] led_s1_agent_m0_byteenable;                                               // led_s1_agent:m0_byteenable -> led_s1_translator:uav_byteenable
	wire          led_s1_agent_m0_read;                                                     // led_s1_agent:m0_read -> led_s1_translator:uav_read
	wire          led_s1_agent_m0_readdatavalid;                                            // led_s1_translator:uav_readdatavalid -> led_s1_agent:m0_readdatavalid
	wire          led_s1_agent_m0_lock;                                                     // led_s1_agent:m0_lock -> led_s1_translator:uav_lock
	wire   [31:0] led_s1_agent_m0_writedata;                                                // led_s1_agent:m0_writedata -> led_s1_translator:uav_writedata
	wire          led_s1_agent_m0_write;                                                    // led_s1_agent:m0_write -> led_s1_translator:uav_write
	wire    [2:0] led_s1_agent_m0_burstcount;                                               // led_s1_agent:m0_burstcount -> led_s1_translator:uav_burstcount
	wire          led_s1_agent_rf_source_valid;                                             // led_s1_agent:rf_source_valid -> led_s1_agent_rsp_fifo:in_valid
	wire  [116:0] led_s1_agent_rf_source_data;                                              // led_s1_agent:rf_source_data -> led_s1_agent_rsp_fifo:in_data
	wire          led_s1_agent_rf_source_ready;                                             // led_s1_agent_rsp_fifo:in_ready -> led_s1_agent:rf_source_ready
	wire          led_s1_agent_rf_source_startofpacket;                                     // led_s1_agent:rf_source_startofpacket -> led_s1_agent_rsp_fifo:in_startofpacket
	wire          led_s1_agent_rf_source_endofpacket;                                       // led_s1_agent:rf_source_endofpacket -> led_s1_agent_rsp_fifo:in_endofpacket
	wire          led_s1_agent_rsp_fifo_out_valid;                                          // led_s1_agent_rsp_fifo:out_valid -> led_s1_agent:rf_sink_valid
	wire  [116:0] led_s1_agent_rsp_fifo_out_data;                                           // led_s1_agent_rsp_fifo:out_data -> led_s1_agent:rf_sink_data
	wire          led_s1_agent_rsp_fifo_out_ready;                                          // led_s1_agent:rf_sink_ready -> led_s1_agent_rsp_fifo:out_ready
	wire          led_s1_agent_rsp_fifo_out_startofpacket;                                  // led_s1_agent_rsp_fifo:out_startofpacket -> led_s1_agent:rf_sink_startofpacket
	wire          led_s1_agent_rsp_fifo_out_endofpacket;                                    // led_s1_agent_rsp_fifo:out_endofpacket -> led_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                    // cmd_mux_009:src_valid -> led_s1_agent:cp_valid
	wire  [115:0] cmd_mux_009_src_data;                                                     // cmd_mux_009:src_data -> led_s1_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                    // led_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [16:0] cmd_mux_009_src_channel;                                                  // cmd_mux_009:src_channel -> led_s1_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                            // cmd_mux_009:src_startofpacket -> led_s1_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                              // cmd_mux_009:src_endofpacket -> led_s1_agent:cp_endofpacket
	wire   [31:0] led_7seg_0_s1_agent_m0_readdata;                                          // led_7seg_0_s1_translator:uav_readdata -> led_7seg_0_s1_agent:m0_readdata
	wire          led_7seg_0_s1_agent_m0_waitrequest;                                       // led_7seg_0_s1_translator:uav_waitrequest -> led_7seg_0_s1_agent:m0_waitrequest
	wire          led_7seg_0_s1_agent_m0_debugaccess;                                       // led_7seg_0_s1_agent:m0_debugaccess -> led_7seg_0_s1_translator:uav_debugaccess
	wire   [23:0] led_7seg_0_s1_agent_m0_address;                                           // led_7seg_0_s1_agent:m0_address -> led_7seg_0_s1_translator:uav_address
	wire    [3:0] led_7seg_0_s1_agent_m0_byteenable;                                        // led_7seg_0_s1_agent:m0_byteenable -> led_7seg_0_s1_translator:uav_byteenable
	wire          led_7seg_0_s1_agent_m0_read;                                              // led_7seg_0_s1_agent:m0_read -> led_7seg_0_s1_translator:uav_read
	wire          led_7seg_0_s1_agent_m0_readdatavalid;                                     // led_7seg_0_s1_translator:uav_readdatavalid -> led_7seg_0_s1_agent:m0_readdatavalid
	wire          led_7seg_0_s1_agent_m0_lock;                                              // led_7seg_0_s1_agent:m0_lock -> led_7seg_0_s1_translator:uav_lock
	wire   [31:0] led_7seg_0_s1_agent_m0_writedata;                                         // led_7seg_0_s1_agent:m0_writedata -> led_7seg_0_s1_translator:uav_writedata
	wire          led_7seg_0_s1_agent_m0_write;                                             // led_7seg_0_s1_agent:m0_write -> led_7seg_0_s1_translator:uav_write
	wire    [2:0] led_7seg_0_s1_agent_m0_burstcount;                                        // led_7seg_0_s1_agent:m0_burstcount -> led_7seg_0_s1_translator:uav_burstcount
	wire          led_7seg_0_s1_agent_rf_source_valid;                                      // led_7seg_0_s1_agent:rf_source_valid -> led_7seg_0_s1_agent_rsp_fifo:in_valid
	wire  [116:0] led_7seg_0_s1_agent_rf_source_data;                                       // led_7seg_0_s1_agent:rf_source_data -> led_7seg_0_s1_agent_rsp_fifo:in_data
	wire          led_7seg_0_s1_agent_rf_source_ready;                                      // led_7seg_0_s1_agent_rsp_fifo:in_ready -> led_7seg_0_s1_agent:rf_source_ready
	wire          led_7seg_0_s1_agent_rf_source_startofpacket;                              // led_7seg_0_s1_agent:rf_source_startofpacket -> led_7seg_0_s1_agent_rsp_fifo:in_startofpacket
	wire          led_7seg_0_s1_agent_rf_source_endofpacket;                                // led_7seg_0_s1_agent:rf_source_endofpacket -> led_7seg_0_s1_agent_rsp_fifo:in_endofpacket
	wire          led_7seg_0_s1_agent_rsp_fifo_out_valid;                                   // led_7seg_0_s1_agent_rsp_fifo:out_valid -> led_7seg_0_s1_agent:rf_sink_valid
	wire  [116:0] led_7seg_0_s1_agent_rsp_fifo_out_data;                                    // led_7seg_0_s1_agent_rsp_fifo:out_data -> led_7seg_0_s1_agent:rf_sink_data
	wire          led_7seg_0_s1_agent_rsp_fifo_out_ready;                                   // led_7seg_0_s1_agent:rf_sink_ready -> led_7seg_0_s1_agent_rsp_fifo:out_ready
	wire          led_7seg_0_s1_agent_rsp_fifo_out_startofpacket;                           // led_7seg_0_s1_agent_rsp_fifo:out_startofpacket -> led_7seg_0_s1_agent:rf_sink_startofpacket
	wire          led_7seg_0_s1_agent_rsp_fifo_out_endofpacket;                             // led_7seg_0_s1_agent_rsp_fifo:out_endofpacket -> led_7seg_0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                    // cmd_mux_010:src_valid -> led_7seg_0_s1_agent:cp_valid
	wire  [115:0] cmd_mux_010_src_data;                                                     // cmd_mux_010:src_data -> led_7seg_0_s1_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                    // led_7seg_0_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [16:0] cmd_mux_010_src_channel;                                                  // cmd_mux_010:src_channel -> led_7seg_0_s1_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                            // cmd_mux_010:src_startofpacket -> led_7seg_0_s1_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                              // cmd_mux_010:src_endofpacket -> led_7seg_0_s1_agent:cp_endofpacket
	wire   [31:0] led_7seg_1_s1_agent_m0_readdata;                                          // led_7seg_1_s1_translator:uav_readdata -> led_7seg_1_s1_agent:m0_readdata
	wire          led_7seg_1_s1_agent_m0_waitrequest;                                       // led_7seg_1_s1_translator:uav_waitrequest -> led_7seg_1_s1_agent:m0_waitrequest
	wire          led_7seg_1_s1_agent_m0_debugaccess;                                       // led_7seg_1_s1_agent:m0_debugaccess -> led_7seg_1_s1_translator:uav_debugaccess
	wire   [23:0] led_7seg_1_s1_agent_m0_address;                                           // led_7seg_1_s1_agent:m0_address -> led_7seg_1_s1_translator:uav_address
	wire    [3:0] led_7seg_1_s1_agent_m0_byteenable;                                        // led_7seg_1_s1_agent:m0_byteenable -> led_7seg_1_s1_translator:uav_byteenable
	wire          led_7seg_1_s1_agent_m0_read;                                              // led_7seg_1_s1_agent:m0_read -> led_7seg_1_s1_translator:uav_read
	wire          led_7seg_1_s1_agent_m0_readdatavalid;                                     // led_7seg_1_s1_translator:uav_readdatavalid -> led_7seg_1_s1_agent:m0_readdatavalid
	wire          led_7seg_1_s1_agent_m0_lock;                                              // led_7seg_1_s1_agent:m0_lock -> led_7seg_1_s1_translator:uav_lock
	wire   [31:0] led_7seg_1_s1_agent_m0_writedata;                                         // led_7seg_1_s1_agent:m0_writedata -> led_7seg_1_s1_translator:uav_writedata
	wire          led_7seg_1_s1_agent_m0_write;                                             // led_7seg_1_s1_agent:m0_write -> led_7seg_1_s1_translator:uav_write
	wire    [2:0] led_7seg_1_s1_agent_m0_burstcount;                                        // led_7seg_1_s1_agent:m0_burstcount -> led_7seg_1_s1_translator:uav_burstcount
	wire          led_7seg_1_s1_agent_rf_source_valid;                                      // led_7seg_1_s1_agent:rf_source_valid -> led_7seg_1_s1_agent_rsp_fifo:in_valid
	wire  [116:0] led_7seg_1_s1_agent_rf_source_data;                                       // led_7seg_1_s1_agent:rf_source_data -> led_7seg_1_s1_agent_rsp_fifo:in_data
	wire          led_7seg_1_s1_agent_rf_source_ready;                                      // led_7seg_1_s1_agent_rsp_fifo:in_ready -> led_7seg_1_s1_agent:rf_source_ready
	wire          led_7seg_1_s1_agent_rf_source_startofpacket;                              // led_7seg_1_s1_agent:rf_source_startofpacket -> led_7seg_1_s1_agent_rsp_fifo:in_startofpacket
	wire          led_7seg_1_s1_agent_rf_source_endofpacket;                                // led_7seg_1_s1_agent:rf_source_endofpacket -> led_7seg_1_s1_agent_rsp_fifo:in_endofpacket
	wire          led_7seg_1_s1_agent_rsp_fifo_out_valid;                                   // led_7seg_1_s1_agent_rsp_fifo:out_valid -> led_7seg_1_s1_agent:rf_sink_valid
	wire  [116:0] led_7seg_1_s1_agent_rsp_fifo_out_data;                                    // led_7seg_1_s1_agent_rsp_fifo:out_data -> led_7seg_1_s1_agent:rf_sink_data
	wire          led_7seg_1_s1_agent_rsp_fifo_out_ready;                                   // led_7seg_1_s1_agent:rf_sink_ready -> led_7seg_1_s1_agent_rsp_fifo:out_ready
	wire          led_7seg_1_s1_agent_rsp_fifo_out_startofpacket;                           // led_7seg_1_s1_agent_rsp_fifo:out_startofpacket -> led_7seg_1_s1_agent:rf_sink_startofpacket
	wire          led_7seg_1_s1_agent_rsp_fifo_out_endofpacket;                             // led_7seg_1_s1_agent_rsp_fifo:out_endofpacket -> led_7seg_1_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                    // cmd_mux_011:src_valid -> led_7seg_1_s1_agent:cp_valid
	wire  [115:0] cmd_mux_011_src_data;                                                     // cmd_mux_011:src_data -> led_7seg_1_s1_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                    // led_7seg_1_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [16:0] cmd_mux_011_src_channel;                                                  // cmd_mux_011:src_channel -> led_7seg_1_s1_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                            // cmd_mux_011:src_startofpacket -> led_7seg_1_s1_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                              // cmd_mux_011:src_endofpacket -> led_7seg_1_s1_agent:cp_endofpacket
	wire   [31:0] led_7seg_2_s1_agent_m0_readdata;                                          // led_7seg_2_s1_translator:uav_readdata -> led_7seg_2_s1_agent:m0_readdata
	wire          led_7seg_2_s1_agent_m0_waitrequest;                                       // led_7seg_2_s1_translator:uav_waitrequest -> led_7seg_2_s1_agent:m0_waitrequest
	wire          led_7seg_2_s1_agent_m0_debugaccess;                                       // led_7seg_2_s1_agent:m0_debugaccess -> led_7seg_2_s1_translator:uav_debugaccess
	wire   [23:0] led_7seg_2_s1_agent_m0_address;                                           // led_7seg_2_s1_agent:m0_address -> led_7seg_2_s1_translator:uav_address
	wire    [3:0] led_7seg_2_s1_agent_m0_byteenable;                                        // led_7seg_2_s1_agent:m0_byteenable -> led_7seg_2_s1_translator:uav_byteenable
	wire          led_7seg_2_s1_agent_m0_read;                                              // led_7seg_2_s1_agent:m0_read -> led_7seg_2_s1_translator:uav_read
	wire          led_7seg_2_s1_agent_m0_readdatavalid;                                     // led_7seg_2_s1_translator:uav_readdatavalid -> led_7seg_2_s1_agent:m0_readdatavalid
	wire          led_7seg_2_s1_agent_m0_lock;                                              // led_7seg_2_s1_agent:m0_lock -> led_7seg_2_s1_translator:uav_lock
	wire   [31:0] led_7seg_2_s1_agent_m0_writedata;                                         // led_7seg_2_s1_agent:m0_writedata -> led_7seg_2_s1_translator:uav_writedata
	wire          led_7seg_2_s1_agent_m0_write;                                             // led_7seg_2_s1_agent:m0_write -> led_7seg_2_s1_translator:uav_write
	wire    [2:0] led_7seg_2_s1_agent_m0_burstcount;                                        // led_7seg_2_s1_agent:m0_burstcount -> led_7seg_2_s1_translator:uav_burstcount
	wire          led_7seg_2_s1_agent_rf_source_valid;                                      // led_7seg_2_s1_agent:rf_source_valid -> led_7seg_2_s1_agent_rsp_fifo:in_valid
	wire  [116:0] led_7seg_2_s1_agent_rf_source_data;                                       // led_7seg_2_s1_agent:rf_source_data -> led_7seg_2_s1_agent_rsp_fifo:in_data
	wire          led_7seg_2_s1_agent_rf_source_ready;                                      // led_7seg_2_s1_agent_rsp_fifo:in_ready -> led_7seg_2_s1_agent:rf_source_ready
	wire          led_7seg_2_s1_agent_rf_source_startofpacket;                              // led_7seg_2_s1_agent:rf_source_startofpacket -> led_7seg_2_s1_agent_rsp_fifo:in_startofpacket
	wire          led_7seg_2_s1_agent_rf_source_endofpacket;                                // led_7seg_2_s1_agent:rf_source_endofpacket -> led_7seg_2_s1_agent_rsp_fifo:in_endofpacket
	wire          led_7seg_2_s1_agent_rsp_fifo_out_valid;                                   // led_7seg_2_s1_agent_rsp_fifo:out_valid -> led_7seg_2_s1_agent:rf_sink_valid
	wire  [116:0] led_7seg_2_s1_agent_rsp_fifo_out_data;                                    // led_7seg_2_s1_agent_rsp_fifo:out_data -> led_7seg_2_s1_agent:rf_sink_data
	wire          led_7seg_2_s1_agent_rsp_fifo_out_ready;                                   // led_7seg_2_s1_agent:rf_sink_ready -> led_7seg_2_s1_agent_rsp_fifo:out_ready
	wire          led_7seg_2_s1_agent_rsp_fifo_out_startofpacket;                           // led_7seg_2_s1_agent_rsp_fifo:out_startofpacket -> led_7seg_2_s1_agent:rf_sink_startofpacket
	wire          led_7seg_2_s1_agent_rsp_fifo_out_endofpacket;                             // led_7seg_2_s1_agent_rsp_fifo:out_endofpacket -> led_7seg_2_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_012_src_valid;                                                    // cmd_mux_012:src_valid -> led_7seg_2_s1_agent:cp_valid
	wire  [115:0] cmd_mux_012_src_data;                                                     // cmd_mux_012:src_data -> led_7seg_2_s1_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                    // led_7seg_2_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [16:0] cmd_mux_012_src_channel;                                                  // cmd_mux_012:src_channel -> led_7seg_2_s1_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                            // cmd_mux_012:src_startofpacket -> led_7seg_2_s1_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                              // cmd_mux_012:src_endofpacket -> led_7seg_2_s1_agent:cp_endofpacket
	wire   [31:0] psw_s1_agent_m0_readdata;                                                 // psw_s1_translator:uav_readdata -> psw_s1_agent:m0_readdata
	wire          psw_s1_agent_m0_waitrequest;                                              // psw_s1_translator:uav_waitrequest -> psw_s1_agent:m0_waitrequest
	wire          psw_s1_agent_m0_debugaccess;                                              // psw_s1_agent:m0_debugaccess -> psw_s1_translator:uav_debugaccess
	wire   [23:0] psw_s1_agent_m0_address;                                                  // psw_s1_agent:m0_address -> psw_s1_translator:uav_address
	wire    [3:0] psw_s1_agent_m0_byteenable;                                               // psw_s1_agent:m0_byteenable -> psw_s1_translator:uav_byteenable
	wire          psw_s1_agent_m0_read;                                                     // psw_s1_agent:m0_read -> psw_s1_translator:uav_read
	wire          psw_s1_agent_m0_readdatavalid;                                            // psw_s1_translator:uav_readdatavalid -> psw_s1_agent:m0_readdatavalid
	wire          psw_s1_agent_m0_lock;                                                     // psw_s1_agent:m0_lock -> psw_s1_translator:uav_lock
	wire   [31:0] psw_s1_agent_m0_writedata;                                                // psw_s1_agent:m0_writedata -> psw_s1_translator:uav_writedata
	wire          psw_s1_agent_m0_write;                                                    // psw_s1_agent:m0_write -> psw_s1_translator:uav_write
	wire    [2:0] psw_s1_agent_m0_burstcount;                                               // psw_s1_agent:m0_burstcount -> psw_s1_translator:uav_burstcount
	wire          psw_s1_agent_rf_source_valid;                                             // psw_s1_agent:rf_source_valid -> psw_s1_agent_rsp_fifo:in_valid
	wire  [116:0] psw_s1_agent_rf_source_data;                                              // psw_s1_agent:rf_source_data -> psw_s1_agent_rsp_fifo:in_data
	wire          psw_s1_agent_rf_source_ready;                                             // psw_s1_agent_rsp_fifo:in_ready -> psw_s1_agent:rf_source_ready
	wire          psw_s1_agent_rf_source_startofpacket;                                     // psw_s1_agent:rf_source_startofpacket -> psw_s1_agent_rsp_fifo:in_startofpacket
	wire          psw_s1_agent_rf_source_endofpacket;                                       // psw_s1_agent:rf_source_endofpacket -> psw_s1_agent_rsp_fifo:in_endofpacket
	wire          psw_s1_agent_rsp_fifo_out_valid;                                          // psw_s1_agent_rsp_fifo:out_valid -> psw_s1_agent:rf_sink_valid
	wire  [116:0] psw_s1_agent_rsp_fifo_out_data;                                           // psw_s1_agent_rsp_fifo:out_data -> psw_s1_agent:rf_sink_data
	wire          psw_s1_agent_rsp_fifo_out_ready;                                          // psw_s1_agent:rf_sink_ready -> psw_s1_agent_rsp_fifo:out_ready
	wire          psw_s1_agent_rsp_fifo_out_startofpacket;                                  // psw_s1_agent_rsp_fifo:out_startofpacket -> psw_s1_agent:rf_sink_startofpacket
	wire          psw_s1_agent_rsp_fifo_out_endofpacket;                                    // psw_s1_agent_rsp_fifo:out_endofpacket -> psw_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_013_src_valid;                                                    // cmd_mux_013:src_valid -> psw_s1_agent:cp_valid
	wire  [115:0] cmd_mux_013_src_data;                                                     // cmd_mux_013:src_data -> psw_s1_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                    // psw_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [16:0] cmd_mux_013_src_channel;                                                  // cmd_mux_013:src_channel -> psw_s1_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                            // cmd_mux_013:src_startofpacket -> psw_s1_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                              // cmd_mux_013:src_endofpacket -> psw_s1_agent:cp_endofpacket
	wire   [31:0] dipsw_s1_agent_m0_readdata;                                               // dipsw_s1_translator:uav_readdata -> dipsw_s1_agent:m0_readdata
	wire          dipsw_s1_agent_m0_waitrequest;                                            // dipsw_s1_translator:uav_waitrequest -> dipsw_s1_agent:m0_waitrequest
	wire          dipsw_s1_agent_m0_debugaccess;                                            // dipsw_s1_agent:m0_debugaccess -> dipsw_s1_translator:uav_debugaccess
	wire   [23:0] dipsw_s1_agent_m0_address;                                                // dipsw_s1_agent:m0_address -> dipsw_s1_translator:uav_address
	wire    [3:0] dipsw_s1_agent_m0_byteenable;                                             // dipsw_s1_agent:m0_byteenable -> dipsw_s1_translator:uav_byteenable
	wire          dipsw_s1_agent_m0_read;                                                   // dipsw_s1_agent:m0_read -> dipsw_s1_translator:uav_read
	wire          dipsw_s1_agent_m0_readdatavalid;                                          // dipsw_s1_translator:uav_readdatavalid -> dipsw_s1_agent:m0_readdatavalid
	wire          dipsw_s1_agent_m0_lock;                                                   // dipsw_s1_agent:m0_lock -> dipsw_s1_translator:uav_lock
	wire   [31:0] dipsw_s1_agent_m0_writedata;                                              // dipsw_s1_agent:m0_writedata -> dipsw_s1_translator:uav_writedata
	wire          dipsw_s1_agent_m0_write;                                                  // dipsw_s1_agent:m0_write -> dipsw_s1_translator:uav_write
	wire    [2:0] dipsw_s1_agent_m0_burstcount;                                             // dipsw_s1_agent:m0_burstcount -> dipsw_s1_translator:uav_burstcount
	wire          dipsw_s1_agent_rf_source_valid;                                           // dipsw_s1_agent:rf_source_valid -> dipsw_s1_agent_rsp_fifo:in_valid
	wire  [116:0] dipsw_s1_agent_rf_source_data;                                            // dipsw_s1_agent:rf_source_data -> dipsw_s1_agent_rsp_fifo:in_data
	wire          dipsw_s1_agent_rf_source_ready;                                           // dipsw_s1_agent_rsp_fifo:in_ready -> dipsw_s1_agent:rf_source_ready
	wire          dipsw_s1_agent_rf_source_startofpacket;                                   // dipsw_s1_agent:rf_source_startofpacket -> dipsw_s1_agent_rsp_fifo:in_startofpacket
	wire          dipsw_s1_agent_rf_source_endofpacket;                                     // dipsw_s1_agent:rf_source_endofpacket -> dipsw_s1_agent_rsp_fifo:in_endofpacket
	wire          dipsw_s1_agent_rsp_fifo_out_valid;                                        // dipsw_s1_agent_rsp_fifo:out_valid -> dipsw_s1_agent:rf_sink_valid
	wire  [116:0] dipsw_s1_agent_rsp_fifo_out_data;                                         // dipsw_s1_agent_rsp_fifo:out_data -> dipsw_s1_agent:rf_sink_data
	wire          dipsw_s1_agent_rsp_fifo_out_ready;                                        // dipsw_s1_agent:rf_sink_ready -> dipsw_s1_agent_rsp_fifo:out_ready
	wire          dipsw_s1_agent_rsp_fifo_out_startofpacket;                                // dipsw_s1_agent_rsp_fifo:out_startofpacket -> dipsw_s1_agent:rf_sink_startofpacket
	wire          dipsw_s1_agent_rsp_fifo_out_endofpacket;                                  // dipsw_s1_agent_rsp_fifo:out_endofpacket -> dipsw_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_014_src_valid;                                                    // cmd_mux_014:src_valid -> dipsw_s1_agent:cp_valid
	wire  [115:0] cmd_mux_014_src_data;                                                     // cmd_mux_014:src_data -> dipsw_s1_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                    // dipsw_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [16:0] cmd_mux_014_src_channel;                                                  // cmd_mux_014:src_channel -> dipsw_s1_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                            // cmd_mux_014:src_startofpacket -> dipsw_s1_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                              // cmd_mux_014:src_endofpacket -> dipsw_s1_agent:cp_endofpacket
	wire   [31:0] gpio0_s1_agent_m0_readdata;                                               // gpio0_s1_translator:uav_readdata -> gpio0_s1_agent:m0_readdata
	wire          gpio0_s1_agent_m0_waitrequest;                                            // gpio0_s1_translator:uav_waitrequest -> gpio0_s1_agent:m0_waitrequest
	wire          gpio0_s1_agent_m0_debugaccess;                                            // gpio0_s1_agent:m0_debugaccess -> gpio0_s1_translator:uav_debugaccess
	wire   [23:0] gpio0_s1_agent_m0_address;                                                // gpio0_s1_agent:m0_address -> gpio0_s1_translator:uav_address
	wire    [3:0] gpio0_s1_agent_m0_byteenable;                                             // gpio0_s1_agent:m0_byteenable -> gpio0_s1_translator:uav_byteenable
	wire          gpio0_s1_agent_m0_read;                                                   // gpio0_s1_agent:m0_read -> gpio0_s1_translator:uav_read
	wire          gpio0_s1_agent_m0_readdatavalid;                                          // gpio0_s1_translator:uav_readdatavalid -> gpio0_s1_agent:m0_readdatavalid
	wire          gpio0_s1_agent_m0_lock;                                                   // gpio0_s1_agent:m0_lock -> gpio0_s1_translator:uav_lock
	wire   [31:0] gpio0_s1_agent_m0_writedata;                                              // gpio0_s1_agent:m0_writedata -> gpio0_s1_translator:uav_writedata
	wire          gpio0_s1_agent_m0_write;                                                  // gpio0_s1_agent:m0_write -> gpio0_s1_translator:uav_write
	wire    [2:0] gpio0_s1_agent_m0_burstcount;                                             // gpio0_s1_agent:m0_burstcount -> gpio0_s1_translator:uav_burstcount
	wire          gpio0_s1_agent_rf_source_valid;                                           // gpio0_s1_agent:rf_source_valid -> gpio0_s1_agent_rsp_fifo:in_valid
	wire  [116:0] gpio0_s1_agent_rf_source_data;                                            // gpio0_s1_agent:rf_source_data -> gpio0_s1_agent_rsp_fifo:in_data
	wire          gpio0_s1_agent_rf_source_ready;                                           // gpio0_s1_agent_rsp_fifo:in_ready -> gpio0_s1_agent:rf_source_ready
	wire          gpio0_s1_agent_rf_source_startofpacket;                                   // gpio0_s1_agent:rf_source_startofpacket -> gpio0_s1_agent_rsp_fifo:in_startofpacket
	wire          gpio0_s1_agent_rf_source_endofpacket;                                     // gpio0_s1_agent:rf_source_endofpacket -> gpio0_s1_agent_rsp_fifo:in_endofpacket
	wire          gpio0_s1_agent_rsp_fifo_out_valid;                                        // gpio0_s1_agent_rsp_fifo:out_valid -> gpio0_s1_agent:rf_sink_valid
	wire  [116:0] gpio0_s1_agent_rsp_fifo_out_data;                                         // gpio0_s1_agent_rsp_fifo:out_data -> gpio0_s1_agent:rf_sink_data
	wire          gpio0_s1_agent_rsp_fifo_out_ready;                                        // gpio0_s1_agent:rf_sink_ready -> gpio0_s1_agent_rsp_fifo:out_ready
	wire          gpio0_s1_agent_rsp_fifo_out_startofpacket;                                // gpio0_s1_agent_rsp_fifo:out_startofpacket -> gpio0_s1_agent:rf_sink_startofpacket
	wire          gpio0_s1_agent_rsp_fifo_out_endofpacket;                                  // gpio0_s1_agent_rsp_fifo:out_endofpacket -> gpio0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_015_src_valid;                                                    // cmd_mux_015:src_valid -> gpio0_s1_agent:cp_valid
	wire  [115:0] cmd_mux_015_src_data;                                                     // cmd_mux_015:src_data -> gpio0_s1_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                    // gpio0_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [16:0] cmd_mux_015_src_channel;                                                  // cmd_mux_015:src_channel -> gpio0_s1_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                            // cmd_mux_015:src_startofpacket -> gpio0_s1_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                              // cmd_mux_015:src_endofpacket -> gpio0_s1_agent:cp_endofpacket
	wire   [31:0] mmcdma_s1_agent_m0_readdata;                                              // mmcdma_s1_translator:uav_readdata -> mmcdma_s1_agent:m0_readdata
	wire          mmcdma_s1_agent_m0_waitrequest;                                           // mmcdma_s1_translator:uav_waitrequest -> mmcdma_s1_agent:m0_waitrequest
	wire          mmcdma_s1_agent_m0_debugaccess;                                           // mmcdma_s1_agent:m0_debugaccess -> mmcdma_s1_translator:uav_debugaccess
	wire   [23:0] mmcdma_s1_agent_m0_address;                                               // mmcdma_s1_agent:m0_address -> mmcdma_s1_translator:uav_address
	wire    [3:0] mmcdma_s1_agent_m0_byteenable;                                            // mmcdma_s1_agent:m0_byteenable -> mmcdma_s1_translator:uav_byteenable
	wire          mmcdma_s1_agent_m0_read;                                                  // mmcdma_s1_agent:m0_read -> mmcdma_s1_translator:uav_read
	wire          mmcdma_s1_agent_m0_readdatavalid;                                         // mmcdma_s1_translator:uav_readdatavalid -> mmcdma_s1_agent:m0_readdatavalid
	wire          mmcdma_s1_agent_m0_lock;                                                  // mmcdma_s1_agent:m0_lock -> mmcdma_s1_translator:uav_lock
	wire   [31:0] mmcdma_s1_agent_m0_writedata;                                             // mmcdma_s1_agent:m0_writedata -> mmcdma_s1_translator:uav_writedata
	wire          mmcdma_s1_agent_m0_write;                                                 // mmcdma_s1_agent:m0_write -> mmcdma_s1_translator:uav_write
	wire    [2:0] mmcdma_s1_agent_m0_burstcount;                                            // mmcdma_s1_agent:m0_burstcount -> mmcdma_s1_translator:uav_burstcount
	wire          mmcdma_s1_agent_rf_source_valid;                                          // mmcdma_s1_agent:rf_source_valid -> mmcdma_s1_agent_rsp_fifo:in_valid
	wire  [116:0] mmcdma_s1_agent_rf_source_data;                                           // mmcdma_s1_agent:rf_source_data -> mmcdma_s1_agent_rsp_fifo:in_data
	wire          mmcdma_s1_agent_rf_source_ready;                                          // mmcdma_s1_agent_rsp_fifo:in_ready -> mmcdma_s1_agent:rf_source_ready
	wire          mmcdma_s1_agent_rf_source_startofpacket;                                  // mmcdma_s1_agent:rf_source_startofpacket -> mmcdma_s1_agent_rsp_fifo:in_startofpacket
	wire          mmcdma_s1_agent_rf_source_endofpacket;                                    // mmcdma_s1_agent:rf_source_endofpacket -> mmcdma_s1_agent_rsp_fifo:in_endofpacket
	wire          mmcdma_s1_agent_rsp_fifo_out_valid;                                       // mmcdma_s1_agent_rsp_fifo:out_valid -> mmcdma_s1_agent:rf_sink_valid
	wire  [116:0] mmcdma_s1_agent_rsp_fifo_out_data;                                        // mmcdma_s1_agent_rsp_fifo:out_data -> mmcdma_s1_agent:rf_sink_data
	wire          mmcdma_s1_agent_rsp_fifo_out_ready;                                       // mmcdma_s1_agent:rf_sink_ready -> mmcdma_s1_agent_rsp_fifo:out_ready
	wire          mmcdma_s1_agent_rsp_fifo_out_startofpacket;                               // mmcdma_s1_agent_rsp_fifo:out_startofpacket -> mmcdma_s1_agent:rf_sink_startofpacket
	wire          mmcdma_s1_agent_rsp_fifo_out_endofpacket;                                 // mmcdma_s1_agent_rsp_fifo:out_endofpacket -> mmcdma_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_016_src_valid;                                                    // cmd_mux_016:src_valid -> mmcdma_s1_agent:cp_valid
	wire  [115:0] cmd_mux_016_src_data;                                                     // cmd_mux_016:src_data -> mmcdma_s1_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                    // mmcdma_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [16:0] cmd_mux_016_src_channel;                                                  // cmd_mux_016:src_channel -> mmcdma_s1_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                            // cmd_mux_016:src_startofpacket -> mmcdma_s1_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                              // cmd_mux_016:src_endofpacket -> mmcdma_s1_agent:cp_endofpacket
	wire          peripherals_bridge_m0_agent_cp_valid;                                     // peripherals_bridge_m0_agent:cp_valid -> router:sink_valid
	wire  [115:0] peripherals_bridge_m0_agent_cp_data;                                      // peripherals_bridge_m0_agent:cp_data -> router:sink_data
	wire          peripherals_bridge_m0_agent_cp_ready;                                     // router:sink_ready -> peripherals_bridge_m0_agent:cp_ready
	wire          peripherals_bridge_m0_agent_cp_startofpacket;                             // peripherals_bridge_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          peripherals_bridge_m0_agent_cp_endofpacket;                               // peripherals_bridge_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                               // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_001:sink_valid
	wire  [115:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_001:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                               // router_001:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                       // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                         // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                     // router_001:src_valid -> rsp_demux:sink_valid
	wire  [115:0] router_001_src_data;                                                      // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                                     // rsp_demux:sink_ready -> router_001:src_ready
	wire   [16:0] router_001_src_channel;                                                   // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                             // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                               // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          ps2_kb_avalon_ps2_slave_agent_rp_valid;                                   // ps2_kb_avalon_ps2_slave_agent:rp_valid -> router_002:sink_valid
	wire  [115:0] ps2_kb_avalon_ps2_slave_agent_rp_data;                                    // ps2_kb_avalon_ps2_slave_agent:rp_data -> router_002:sink_data
	wire          ps2_kb_avalon_ps2_slave_agent_rp_ready;                                   // router_002:sink_ready -> ps2_kb_avalon_ps2_slave_agent:rp_ready
	wire          ps2_kb_avalon_ps2_slave_agent_rp_startofpacket;                           // ps2_kb_avalon_ps2_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          ps2_kb_avalon_ps2_slave_agent_rp_endofpacket;                             // ps2_kb_avalon_ps2_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                     // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [115:0] router_002_src_data;                                                      // router_002:src_data -> rsp_demux_001:sink_data
	wire          router_002_src_ready;                                                     // rsp_demux_001:sink_ready -> router_002:src_ready
	wire   [16:0] router_002_src_channel;                                                   // router_002:src_channel -> rsp_demux_001:sink_channel
	wire          router_002_src_startofpacket;                                             // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_002_src_endofpacket;                                               // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          epcq_avl_csr_agent_rp_valid;                                              // epcq_avl_csr_agent:rp_valid -> router_003:sink_valid
	wire  [115:0] epcq_avl_csr_agent_rp_data;                                               // epcq_avl_csr_agent:rp_data -> router_003:sink_data
	wire          epcq_avl_csr_agent_rp_ready;                                              // router_003:sink_ready -> epcq_avl_csr_agent:rp_ready
	wire          epcq_avl_csr_agent_rp_startofpacket;                                      // epcq_avl_csr_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          epcq_avl_csr_agent_rp_endofpacket;                                        // epcq_avl_csr_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                     // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [115:0] router_003_src_data;                                                      // router_003:src_data -> rsp_demux_002:sink_data
	wire          router_003_src_ready;                                                     // rsp_demux_002:sink_ready -> router_003:src_ready
	wire   [16:0] router_003_src_channel;                                                   // router_003:src_channel -> rsp_demux_002:sink_channel
	wire          router_003_src_startofpacket;                                             // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_003_src_endofpacket;                                               // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          epcq_avl_mem_agent_rp_valid;                                              // epcq_avl_mem_agent:rp_valid -> router_004:sink_valid
	wire  [115:0] epcq_avl_mem_agent_rp_data;                                               // epcq_avl_mem_agent:rp_data -> router_004:sink_data
	wire          epcq_avl_mem_agent_rp_ready;                                              // router_004:sink_ready -> epcq_avl_mem_agent:rp_ready
	wire          epcq_avl_mem_agent_rp_startofpacket;                                      // epcq_avl_mem_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          epcq_avl_mem_agent_rp_endofpacket;                                        // epcq_avl_mem_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                     // router_004:src_valid -> rsp_demux_003:sink_valid
	wire  [115:0] router_004_src_data;                                                      // router_004:src_data -> rsp_demux_003:sink_data
	wire          router_004_src_ready;                                                     // rsp_demux_003:sink_ready -> router_004:src_ready
	wire   [16:0] router_004_src_channel;                                                   // router_004:src_channel -> rsp_demux_003:sink_channel
	wire          router_004_src_startofpacket;                                             // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_004_src_endofpacket;                                               // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          sysid_control_slave_agent_rp_valid;                                       // sysid_control_slave_agent:rp_valid -> router_005:sink_valid
	wire  [115:0] sysid_control_slave_agent_rp_data;                                        // sysid_control_slave_agent:rp_data -> router_005:sink_data
	wire          sysid_control_slave_agent_rp_ready;                                       // router_005:sink_ready -> sysid_control_slave_agent:rp_ready
	wire          sysid_control_slave_agent_rp_startofpacket;                               // sysid_control_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          sysid_control_slave_agent_rp_endofpacket;                                 // sysid_control_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                     // router_005:src_valid -> rsp_demux_004:sink_valid
	wire  [115:0] router_005_src_data;                                                      // router_005:src_data -> rsp_demux_004:sink_data
	wire          router_005_src_ready;                                                     // rsp_demux_004:sink_ready -> router_005:src_ready
	wire   [16:0] router_005_src_channel;                                                   // router_005:src_channel -> rsp_demux_004:sink_channel
	wire          router_005_src_startofpacket;                                             // router_005:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_005_src_endofpacket;                                               // router_005:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          pcm_s0_agent_rp_valid;                                                    // pcm_s0_agent:rp_valid -> router_006:sink_valid
	wire  [115:0] pcm_s0_agent_rp_data;                                                     // pcm_s0_agent:rp_data -> router_006:sink_data
	wire          pcm_s0_agent_rp_ready;                                                    // router_006:sink_ready -> pcm_s0_agent:rp_ready
	wire          pcm_s0_agent_rp_startofpacket;                                            // pcm_s0_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          pcm_s0_agent_rp_endofpacket;                                              // pcm_s0_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                     // router_006:src_valid -> rsp_demux_005:sink_valid
	wire  [115:0] router_006_src_data;                                                      // router_006:src_data -> rsp_demux_005:sink_data
	wire          router_006_src_ready;                                                     // rsp_demux_005:sink_ready -> router_006:src_ready
	wire   [16:0] router_006_src_channel;                                                   // router_006:src_channel -> rsp_demux_005:sink_channel
	wire          router_006_src_startofpacket;                                             // router_006:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_006_src_endofpacket;                                               // router_006:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          vga_s1_agent_rp_valid;                                                    // vga_s1_agent:rp_valid -> router_007:sink_valid
	wire  [115:0] vga_s1_agent_rp_data;                                                     // vga_s1_agent:rp_data -> router_007:sink_data
	wire          vga_s1_agent_rp_ready;                                                    // router_007:sink_ready -> vga_s1_agent:rp_ready
	wire          vga_s1_agent_rp_startofpacket;                                            // vga_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          vga_s1_agent_rp_endofpacket;                                              // vga_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                     // router_007:src_valid -> rsp_demux_006:sink_valid
	wire  [115:0] router_007_src_data;                                                      // router_007:src_data -> rsp_demux_006:sink_data
	wire          router_007_src_ready;                                                     // rsp_demux_006:sink_ready -> router_007:src_ready
	wire   [16:0] router_007_src_channel;                                                   // router_007:src_channel -> rsp_demux_006:sink_channel
	wire          router_007_src_startofpacket;                                             // router_007:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_007_src_endofpacket;                                               // router_007:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          usb_s1_agent_rp_valid;                                                    // usb_s1_agent:rp_valid -> router_008:sink_valid
	wire   [88:0] usb_s1_agent_rp_data;                                                     // usb_s1_agent:rp_data -> router_008:sink_data
	wire          usb_s1_agent_rp_ready;                                                    // router_008:sink_ready -> usb_s1_agent:rp_ready
	wire          usb_s1_agent_rp_startofpacket;                                            // usb_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          usb_s1_agent_rp_endofpacket;                                              // usb_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          systimer_s1_agent_rp_valid;                                               // systimer_s1_agent:rp_valid -> router_009:sink_valid
	wire  [115:0] systimer_s1_agent_rp_data;                                                // systimer_s1_agent:rp_data -> router_009:sink_data
	wire          systimer_s1_agent_rp_ready;                                               // router_009:sink_ready -> systimer_s1_agent:rp_ready
	wire          systimer_s1_agent_rp_startofpacket;                                       // systimer_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          systimer_s1_agent_rp_endofpacket;                                         // systimer_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                     // router_009:src_valid -> rsp_demux_008:sink_valid
	wire  [115:0] router_009_src_data;                                                      // router_009:src_data -> rsp_demux_008:sink_data
	wire          router_009_src_ready;                                                     // rsp_demux_008:sink_ready -> router_009:src_ready
	wire   [16:0] router_009_src_channel;                                                   // router_009:src_channel -> rsp_demux_008:sink_channel
	wire          router_009_src_startofpacket;                                             // router_009:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_009_src_endofpacket;                                               // router_009:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          led_s1_agent_rp_valid;                                                    // led_s1_agent:rp_valid -> router_010:sink_valid
	wire  [115:0] led_s1_agent_rp_data;                                                     // led_s1_agent:rp_data -> router_010:sink_data
	wire          led_s1_agent_rp_ready;                                                    // router_010:sink_ready -> led_s1_agent:rp_ready
	wire          led_s1_agent_rp_startofpacket;                                            // led_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          led_s1_agent_rp_endofpacket;                                              // led_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                     // router_010:src_valid -> rsp_demux_009:sink_valid
	wire  [115:0] router_010_src_data;                                                      // router_010:src_data -> rsp_demux_009:sink_data
	wire          router_010_src_ready;                                                     // rsp_demux_009:sink_ready -> router_010:src_ready
	wire   [16:0] router_010_src_channel;                                                   // router_010:src_channel -> rsp_demux_009:sink_channel
	wire          router_010_src_startofpacket;                                             // router_010:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_010_src_endofpacket;                                               // router_010:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          led_7seg_0_s1_agent_rp_valid;                                             // led_7seg_0_s1_agent:rp_valid -> router_011:sink_valid
	wire  [115:0] led_7seg_0_s1_agent_rp_data;                                              // led_7seg_0_s1_agent:rp_data -> router_011:sink_data
	wire          led_7seg_0_s1_agent_rp_ready;                                             // router_011:sink_ready -> led_7seg_0_s1_agent:rp_ready
	wire          led_7seg_0_s1_agent_rp_startofpacket;                                     // led_7seg_0_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          led_7seg_0_s1_agent_rp_endofpacket;                                       // led_7seg_0_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                     // router_011:src_valid -> rsp_demux_010:sink_valid
	wire  [115:0] router_011_src_data;                                                      // router_011:src_data -> rsp_demux_010:sink_data
	wire          router_011_src_ready;                                                     // rsp_demux_010:sink_ready -> router_011:src_ready
	wire   [16:0] router_011_src_channel;                                                   // router_011:src_channel -> rsp_demux_010:sink_channel
	wire          router_011_src_startofpacket;                                             // router_011:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_011_src_endofpacket;                                               // router_011:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          led_7seg_1_s1_agent_rp_valid;                                             // led_7seg_1_s1_agent:rp_valid -> router_012:sink_valid
	wire  [115:0] led_7seg_1_s1_agent_rp_data;                                              // led_7seg_1_s1_agent:rp_data -> router_012:sink_data
	wire          led_7seg_1_s1_agent_rp_ready;                                             // router_012:sink_ready -> led_7seg_1_s1_agent:rp_ready
	wire          led_7seg_1_s1_agent_rp_startofpacket;                                     // led_7seg_1_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          led_7seg_1_s1_agent_rp_endofpacket;                                       // led_7seg_1_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                     // router_012:src_valid -> rsp_demux_011:sink_valid
	wire  [115:0] router_012_src_data;                                                      // router_012:src_data -> rsp_demux_011:sink_data
	wire          router_012_src_ready;                                                     // rsp_demux_011:sink_ready -> router_012:src_ready
	wire   [16:0] router_012_src_channel;                                                   // router_012:src_channel -> rsp_demux_011:sink_channel
	wire          router_012_src_startofpacket;                                             // router_012:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_012_src_endofpacket;                                               // router_012:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          led_7seg_2_s1_agent_rp_valid;                                             // led_7seg_2_s1_agent:rp_valid -> router_013:sink_valid
	wire  [115:0] led_7seg_2_s1_agent_rp_data;                                              // led_7seg_2_s1_agent:rp_data -> router_013:sink_data
	wire          led_7seg_2_s1_agent_rp_ready;                                             // router_013:sink_ready -> led_7seg_2_s1_agent:rp_ready
	wire          led_7seg_2_s1_agent_rp_startofpacket;                                     // led_7seg_2_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          led_7seg_2_s1_agent_rp_endofpacket;                                       // led_7seg_2_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                     // router_013:src_valid -> rsp_demux_012:sink_valid
	wire  [115:0] router_013_src_data;                                                      // router_013:src_data -> rsp_demux_012:sink_data
	wire          router_013_src_ready;                                                     // rsp_demux_012:sink_ready -> router_013:src_ready
	wire   [16:0] router_013_src_channel;                                                   // router_013:src_channel -> rsp_demux_012:sink_channel
	wire          router_013_src_startofpacket;                                             // router_013:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_013_src_endofpacket;                                               // router_013:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          psw_s1_agent_rp_valid;                                                    // psw_s1_agent:rp_valid -> router_014:sink_valid
	wire  [115:0] psw_s1_agent_rp_data;                                                     // psw_s1_agent:rp_data -> router_014:sink_data
	wire          psw_s1_agent_rp_ready;                                                    // router_014:sink_ready -> psw_s1_agent:rp_ready
	wire          psw_s1_agent_rp_startofpacket;                                            // psw_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          psw_s1_agent_rp_endofpacket;                                              // psw_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                     // router_014:src_valid -> rsp_demux_013:sink_valid
	wire  [115:0] router_014_src_data;                                                      // router_014:src_data -> rsp_demux_013:sink_data
	wire          router_014_src_ready;                                                     // rsp_demux_013:sink_ready -> router_014:src_ready
	wire   [16:0] router_014_src_channel;                                                   // router_014:src_channel -> rsp_demux_013:sink_channel
	wire          router_014_src_startofpacket;                                             // router_014:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_014_src_endofpacket;                                               // router_014:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          dipsw_s1_agent_rp_valid;                                                  // dipsw_s1_agent:rp_valid -> router_015:sink_valid
	wire  [115:0] dipsw_s1_agent_rp_data;                                                   // dipsw_s1_agent:rp_data -> router_015:sink_data
	wire          dipsw_s1_agent_rp_ready;                                                  // router_015:sink_ready -> dipsw_s1_agent:rp_ready
	wire          dipsw_s1_agent_rp_startofpacket;                                          // dipsw_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          dipsw_s1_agent_rp_endofpacket;                                            // dipsw_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                     // router_015:src_valid -> rsp_demux_014:sink_valid
	wire  [115:0] router_015_src_data;                                                      // router_015:src_data -> rsp_demux_014:sink_data
	wire          router_015_src_ready;                                                     // rsp_demux_014:sink_ready -> router_015:src_ready
	wire   [16:0] router_015_src_channel;                                                   // router_015:src_channel -> rsp_demux_014:sink_channel
	wire          router_015_src_startofpacket;                                             // router_015:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_015_src_endofpacket;                                               // router_015:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          gpio0_s1_agent_rp_valid;                                                  // gpio0_s1_agent:rp_valid -> router_016:sink_valid
	wire  [115:0] gpio0_s1_agent_rp_data;                                                   // gpio0_s1_agent:rp_data -> router_016:sink_data
	wire          gpio0_s1_agent_rp_ready;                                                  // router_016:sink_ready -> gpio0_s1_agent:rp_ready
	wire          gpio0_s1_agent_rp_startofpacket;                                          // gpio0_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          gpio0_s1_agent_rp_endofpacket;                                            // gpio0_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                     // router_016:src_valid -> rsp_demux_015:sink_valid
	wire  [115:0] router_016_src_data;                                                      // router_016:src_data -> rsp_demux_015:sink_data
	wire          router_016_src_ready;                                                     // rsp_demux_015:sink_ready -> router_016:src_ready
	wire   [16:0] router_016_src_channel;                                                   // router_016:src_channel -> rsp_demux_015:sink_channel
	wire          router_016_src_startofpacket;                                             // router_016:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_016_src_endofpacket;                                               // router_016:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          mmcdma_s1_agent_rp_valid;                                                 // mmcdma_s1_agent:rp_valid -> router_017:sink_valid
	wire  [115:0] mmcdma_s1_agent_rp_data;                                                  // mmcdma_s1_agent:rp_data -> router_017:sink_data
	wire          mmcdma_s1_agent_rp_ready;                                                 // router_017:sink_ready -> mmcdma_s1_agent:rp_ready
	wire          mmcdma_s1_agent_rp_startofpacket;                                         // mmcdma_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          mmcdma_s1_agent_rp_endofpacket;                                           // mmcdma_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                     // router_017:src_valid -> rsp_demux_016:sink_valid
	wire  [115:0] router_017_src_data;                                                      // router_017:src_data -> rsp_demux_016:sink_data
	wire          router_017_src_ready;                                                     // rsp_demux_016:sink_ready -> router_017:src_ready
	wire   [16:0] router_017_src_channel;                                                   // router_017:src_channel -> rsp_demux_016:sink_channel
	wire          router_017_src_startofpacket;                                             // router_017:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_017_src_endofpacket;                                               // router_017:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          router_src_valid;                                                         // router:src_valid -> peripherals_bridge_m0_limiter:cmd_sink_valid
	wire  [115:0] router_src_data;                                                          // router:src_data -> peripherals_bridge_m0_limiter:cmd_sink_data
	wire          router_src_ready;                                                         // peripherals_bridge_m0_limiter:cmd_sink_ready -> router:src_ready
	wire   [16:0] router_src_channel;                                                       // router:src_channel -> peripherals_bridge_m0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                 // router:src_startofpacket -> peripherals_bridge_m0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                   // router:src_endofpacket -> peripherals_bridge_m0_limiter:cmd_sink_endofpacket
	wire  [115:0] peripherals_bridge_m0_limiter_cmd_src_data;                               // peripherals_bridge_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          peripherals_bridge_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> peripherals_bridge_m0_limiter:cmd_src_ready
	wire   [16:0] peripherals_bridge_m0_limiter_cmd_src_channel;                            // peripherals_bridge_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          peripherals_bridge_m0_limiter_cmd_src_startofpacket;                      // peripherals_bridge_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          peripherals_bridge_m0_limiter_cmd_src_endofpacket;                        // peripherals_bridge_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                        // rsp_mux:src_valid -> peripherals_bridge_m0_limiter:rsp_sink_valid
	wire  [115:0] rsp_mux_src_data;                                                         // rsp_mux:src_data -> peripherals_bridge_m0_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                        // peripherals_bridge_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [16:0] rsp_mux_src_channel;                                                      // rsp_mux:src_channel -> peripherals_bridge_m0_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                // rsp_mux:src_startofpacket -> peripherals_bridge_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                  // rsp_mux:src_endofpacket -> peripherals_bridge_m0_limiter:rsp_sink_endofpacket
	wire          peripherals_bridge_m0_limiter_rsp_src_valid;                              // peripherals_bridge_m0_limiter:rsp_src_valid -> peripherals_bridge_m0_agent:rp_valid
	wire  [115:0] peripherals_bridge_m0_limiter_rsp_src_data;                               // peripherals_bridge_m0_limiter:rsp_src_data -> peripherals_bridge_m0_agent:rp_data
	wire          peripherals_bridge_m0_limiter_rsp_src_ready;                              // peripherals_bridge_m0_agent:rp_ready -> peripherals_bridge_m0_limiter:rsp_src_ready
	wire   [16:0] peripherals_bridge_m0_limiter_rsp_src_channel;                            // peripherals_bridge_m0_limiter:rsp_src_channel -> peripherals_bridge_m0_agent:rp_channel
	wire          peripherals_bridge_m0_limiter_rsp_src_startofpacket;                      // peripherals_bridge_m0_limiter:rsp_src_startofpacket -> peripherals_bridge_m0_agent:rp_startofpacket
	wire          peripherals_bridge_m0_limiter_rsp_src_endofpacket;                        // peripherals_bridge_m0_limiter:rsp_src_endofpacket -> peripherals_bridge_m0_agent:rp_endofpacket
	wire          usb_s1_burst_adapter_source0_valid;                                       // usb_s1_burst_adapter:source0_valid -> usb_s1_agent:cp_valid
	wire   [88:0] usb_s1_burst_adapter_source0_data;                                        // usb_s1_burst_adapter:source0_data -> usb_s1_agent:cp_data
	wire          usb_s1_burst_adapter_source0_ready;                                       // usb_s1_agent:cp_ready -> usb_s1_burst_adapter:source0_ready
	wire   [16:0] usb_s1_burst_adapter_source0_channel;                                     // usb_s1_burst_adapter:source0_channel -> usb_s1_agent:cp_channel
	wire          usb_s1_burst_adapter_source0_startofpacket;                               // usb_s1_burst_adapter:source0_startofpacket -> usb_s1_agent:cp_startofpacket
	wire          usb_s1_burst_adapter_source0_endofpacket;                                 // usb_s1_burst_adapter:source0_endofpacket -> usb_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                     // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [115:0] cmd_demux_src0_data;                                                      // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                     // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [16:0] cmd_demux_src0_channel;                                                   // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                             // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                               // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                     // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [115:0] cmd_demux_src1_data;                                                      // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                     // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [16:0] cmd_demux_src1_channel;                                                   // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                             // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                               // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                     // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [115:0] cmd_demux_src2_data;                                                      // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                     // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [16:0] cmd_demux_src2_channel;                                                   // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                             // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                               // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                     // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [115:0] cmd_demux_src3_data;                                                      // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                     // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [16:0] cmd_demux_src3_channel;                                                   // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                             // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                               // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                     // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [115:0] cmd_demux_src4_data;                                                      // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                     // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [16:0] cmd_demux_src4_channel;                                                   // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                             // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                               // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                     // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [115:0] cmd_demux_src5_data;                                                      // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                     // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [16:0] cmd_demux_src5_channel;                                                   // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                             // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                               // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                     // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [115:0] cmd_demux_src6_data;                                                      // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                     // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [16:0] cmd_demux_src6_channel;                                                   // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                             // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                               // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                     // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [115:0] cmd_demux_src7_data;                                                      // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                     // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [16:0] cmd_demux_src7_channel;                                                   // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                             // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                               // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                     // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [115:0] cmd_demux_src8_data;                                                      // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                     // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [16:0] cmd_demux_src8_channel;                                                   // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                             // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                               // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                     // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [115:0] cmd_demux_src9_data;                                                      // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                     // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [16:0] cmd_demux_src9_channel;                                                   // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                             // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                               // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                    // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [115:0] cmd_demux_src10_data;                                                     // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                    // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [16:0] cmd_demux_src10_channel;                                                  // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                            // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                              // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                    // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [115:0] cmd_demux_src11_data;                                                     // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                    // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [16:0] cmd_demux_src11_channel;                                                  // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                            // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                              // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                    // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [115:0] cmd_demux_src12_data;                                                     // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                                    // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [16:0] cmd_demux_src12_channel;                                                  // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                            // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                              // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                    // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [115:0] cmd_demux_src13_data;                                                     // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_src13_ready;                                                    // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire   [16:0] cmd_demux_src13_channel;                                                  // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_startofpacket;                                            // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_src13_endofpacket;                                              // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                    // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [115:0] cmd_demux_src14_data;                                                     // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_src14_ready;                                                    // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire   [16:0] cmd_demux_src14_channel;                                                  // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_startofpacket;                                            // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_src14_endofpacket;                                              // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                    // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [115:0] cmd_demux_src15_data;                                                     // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_src15_ready;                                                    // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire   [16:0] cmd_demux_src15_channel;                                                  // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_src15_startofpacket;                                            // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_src15_endofpacket;                                              // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                    // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [115:0] cmd_demux_src16_data;                                                     // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_src16_ready;                                                    // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire   [16:0] cmd_demux_src16_channel;                                                  // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_src16_startofpacket;                                            // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_src16_endofpacket;                                              // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                     // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [115:0] rsp_demux_src0_data;                                                      // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                     // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [16:0] rsp_demux_src0_channel;                                                   // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                             // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                               // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                 // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [115:0] rsp_demux_001_src0_data;                                                  // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                 // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [16:0] rsp_demux_001_src0_channel;                                               // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                         // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                           // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                 // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [115:0] rsp_demux_002_src0_data;                                                  // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                 // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [16:0] rsp_demux_002_src0_channel;                                               // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                         // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                           // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                 // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [115:0] rsp_demux_003_src0_data;                                                  // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                 // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [16:0] rsp_demux_003_src0_channel;                                               // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                         // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                           // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                 // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [115:0] rsp_demux_004_src0_data;                                                  // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                 // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [16:0] rsp_demux_004_src0_channel;                                               // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                         // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                           // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                 // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [115:0] rsp_demux_005_src0_data;                                                  // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                 // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [16:0] rsp_demux_005_src0_channel;                                               // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                         // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                           // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                 // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [115:0] rsp_demux_006_src0_data;                                                  // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                 // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [16:0] rsp_demux_006_src0_channel;                                               // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                         // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                           // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                 // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [115:0] rsp_demux_007_src0_data;                                                  // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                 // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [16:0] rsp_demux_007_src0_channel;                                               // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                         // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                           // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                 // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [115:0] rsp_demux_008_src0_data;                                                  // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                 // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [16:0] rsp_demux_008_src0_channel;                                               // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                         // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                           // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                 // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [115:0] rsp_demux_009_src0_data;                                                  // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                 // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [16:0] rsp_demux_009_src0_channel;                                               // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                         // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                           // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                 // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [115:0] rsp_demux_010_src0_data;                                                  // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                 // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [16:0] rsp_demux_010_src0_channel;                                               // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                         // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                           // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                 // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [115:0] rsp_demux_011_src0_data;                                                  // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                 // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [16:0] rsp_demux_011_src0_channel;                                               // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                         // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                           // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                 // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [115:0] rsp_demux_012_src0_data;                                                  // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                                 // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [16:0] rsp_demux_012_src0_channel;                                               // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                         // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                           // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                 // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [115:0] rsp_demux_013_src0_data;                                                  // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire          rsp_demux_013_src0_ready;                                                 // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire   [16:0] rsp_demux_013_src0_channel;                                               // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                         // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                           // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                 // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [115:0] rsp_demux_014_src0_data;                                                  // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire          rsp_demux_014_src0_ready;                                                 // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire   [16:0] rsp_demux_014_src0_channel;                                               // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                         // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                           // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                 // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [115:0] rsp_demux_015_src0_data;                                                  // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire          rsp_demux_015_src0_ready;                                                 // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire   [16:0] rsp_demux_015_src0_channel;                                               // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                                         // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                           // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                 // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [115:0] rsp_demux_016_src0_data;                                                  // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire          rsp_demux_016_src0_ready;                                                 // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire   [16:0] rsp_demux_016_src0_channel;                                               // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire          rsp_demux_016_src0_startofpacket;                                         // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                           // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire          router_008_src_valid;                                                     // router_008:src_valid -> usb_s1_rsp_width_adapter:in_valid
	wire   [88:0] router_008_src_data;                                                      // router_008:src_data -> usb_s1_rsp_width_adapter:in_data
	wire          router_008_src_ready;                                                     // usb_s1_rsp_width_adapter:in_ready -> router_008:src_ready
	wire   [16:0] router_008_src_channel;                                                   // router_008:src_channel -> usb_s1_rsp_width_adapter:in_channel
	wire          router_008_src_startofpacket;                                             // router_008:src_startofpacket -> usb_s1_rsp_width_adapter:in_startofpacket
	wire          router_008_src_endofpacket;                                               // router_008:src_endofpacket -> usb_s1_rsp_width_adapter:in_endofpacket
	wire          usb_s1_rsp_width_adapter_src_valid;                                       // usb_s1_rsp_width_adapter:out_valid -> rsp_demux_007:sink_valid
	wire  [115:0] usb_s1_rsp_width_adapter_src_data;                                        // usb_s1_rsp_width_adapter:out_data -> rsp_demux_007:sink_data
	wire          usb_s1_rsp_width_adapter_src_ready;                                       // rsp_demux_007:sink_ready -> usb_s1_rsp_width_adapter:out_ready
	wire   [16:0] usb_s1_rsp_width_adapter_src_channel;                                     // usb_s1_rsp_width_adapter:out_channel -> rsp_demux_007:sink_channel
	wire          usb_s1_rsp_width_adapter_src_startofpacket;                               // usb_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          usb_s1_rsp_width_adapter_src_endofpacket;                                 // usb_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                    // cmd_mux_007:src_valid -> usb_s1_cmd_width_adapter:in_valid
	wire  [115:0] cmd_mux_007_src_data;                                                     // cmd_mux_007:src_data -> usb_s1_cmd_width_adapter:in_data
	wire          cmd_mux_007_src_ready;                                                    // usb_s1_cmd_width_adapter:in_ready -> cmd_mux_007:src_ready
	wire   [16:0] cmd_mux_007_src_channel;                                                  // cmd_mux_007:src_channel -> usb_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_007_src_startofpacket;                                            // cmd_mux_007:src_startofpacket -> usb_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                              // cmd_mux_007:src_endofpacket -> usb_s1_cmd_width_adapter:in_endofpacket
	wire          usb_s1_cmd_width_adapter_src_valid;                                       // usb_s1_cmd_width_adapter:out_valid -> usb_s1_burst_adapter:sink0_valid
	wire   [88:0] usb_s1_cmd_width_adapter_src_data;                                        // usb_s1_cmd_width_adapter:out_data -> usb_s1_burst_adapter:sink0_data
	wire          usb_s1_cmd_width_adapter_src_ready;                                       // usb_s1_burst_adapter:sink0_ready -> usb_s1_cmd_width_adapter:out_ready
	wire   [16:0] usb_s1_cmd_width_adapter_src_channel;                                     // usb_s1_cmd_width_adapter:out_channel -> usb_s1_burst_adapter:sink0_channel
	wire          usb_s1_cmd_width_adapter_src_startofpacket;                               // usb_s1_cmd_width_adapter:out_startofpacket -> usb_s1_burst_adapter:sink0_startofpacket
	wire          usb_s1_cmd_width_adapter_src_endofpacket;                                 // usb_s1_cmd_width_adapter:out_endofpacket -> usb_s1_burst_adapter:sink0_endofpacket
	wire   [16:0] peripherals_bridge_m0_limiter_cmd_valid_data;                             // peripherals_bridge_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                   // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                    // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                   // avalon_st_adapter:in_0_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                            // avalon_st_adapter:out_0_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                             // avalon_st_adapter:out_0_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                            // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                            // avalon_st_adapter:out_0_error -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          ps2_kb_avalon_ps2_slave_agent_rdata_fifo_src_valid;                       // ps2_kb_avalon_ps2_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] ps2_kb_avalon_ps2_slave_agent_rdata_fifo_src_data;                        // ps2_kb_avalon_ps2_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          ps2_kb_avalon_ps2_slave_agent_rdata_fifo_src_ready;                       // avalon_st_adapter_001:in_0_ready -> ps2_kb_avalon_ps2_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                        // avalon_st_adapter_001:out_0_valid -> ps2_kb_avalon_ps2_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                         // avalon_st_adapter_001:out_0_data -> ps2_kb_avalon_ps2_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                        // ps2_kb_avalon_ps2_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                        // avalon_st_adapter_001:out_0_error -> ps2_kb_avalon_ps2_slave_agent:rdata_fifo_sink_error
	wire          epcq_avl_csr_agent_rdata_fifo_src_valid;                                  // epcq_avl_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] epcq_avl_csr_agent_rdata_fifo_src_data;                                   // epcq_avl_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          epcq_avl_csr_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter_002:in_0_ready -> epcq_avl_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                        // avalon_st_adapter_002:out_0_valid -> epcq_avl_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                         // avalon_st_adapter_002:out_0_data -> epcq_avl_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                        // epcq_avl_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                        // avalon_st_adapter_002:out_0_error -> epcq_avl_csr_agent:rdata_fifo_sink_error
	wire          epcq_avl_mem_agent_rdata_fifo_src_valid;                                  // epcq_avl_mem_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] epcq_avl_mem_agent_rdata_fifo_src_data;                                   // epcq_avl_mem_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          epcq_avl_mem_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter_003:in_0_ready -> epcq_avl_mem_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                        // avalon_st_adapter_003:out_0_valid -> epcq_avl_mem_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                         // avalon_st_adapter_003:out_0_data -> epcq_avl_mem_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                        // epcq_avl_mem_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                        // avalon_st_adapter_003:out_0_error -> epcq_avl_mem_agent:rdata_fifo_sink_error
	wire          sysid_control_slave_agent_rdata_fifo_src_valid;                           // sysid_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_src_data;                            // sysid_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          sysid_control_slave_agent_rdata_fifo_src_ready;                           // avalon_st_adapter_004:in_0_ready -> sysid_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                        // avalon_st_adapter_004:out_0_valid -> sysid_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                         // avalon_st_adapter_004:out_0_data -> sysid_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                        // sysid_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                        // avalon_st_adapter_004:out_0_error -> sysid_control_slave_agent:rdata_fifo_sink_error
	wire          pcm_s0_agent_rdata_fifo_src_valid;                                        // pcm_s0_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] pcm_s0_agent_rdata_fifo_src_data;                                         // pcm_s0_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          pcm_s0_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_005:in_0_ready -> pcm_s0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                        // avalon_st_adapter_005:out_0_valid -> pcm_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                         // avalon_st_adapter_005:out_0_data -> pcm_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                        // pcm_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                        // avalon_st_adapter_005:out_0_error -> pcm_s0_agent:rdata_fifo_sink_error
	wire          vga_s1_agent_rdata_fifo_src_valid;                                        // vga_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] vga_s1_agent_rdata_fifo_src_data;                                         // vga_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          vga_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_006:in_0_ready -> vga_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                        // avalon_st_adapter_006:out_0_valid -> vga_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                         // avalon_st_adapter_006:out_0_data -> vga_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                        // vga_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                        // avalon_st_adapter_006:out_0_error -> vga_s1_agent:rdata_fifo_sink_error
	wire          usb_s1_agent_rdata_fifo_src_valid;                                        // usb_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire    [9:0] usb_s1_agent_rdata_fifo_src_data;                                         // usb_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          usb_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_007:in_0_ready -> usb_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                        // avalon_st_adapter_007:out_0_valid -> usb_s1_agent:rdata_fifo_sink_valid
	wire    [9:0] avalon_st_adapter_007_out_0_data;                                         // avalon_st_adapter_007:out_0_data -> usb_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                        // usb_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                        // avalon_st_adapter_007:out_0_error -> usb_s1_agent:rdata_fifo_sink_error
	wire          systimer_s1_agent_rdata_fifo_src_valid;                                   // systimer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] systimer_s1_agent_rdata_fifo_src_data;                                    // systimer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          systimer_s1_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_008:in_0_ready -> systimer_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                        // avalon_st_adapter_008:out_0_valid -> systimer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                         // avalon_st_adapter_008:out_0_data -> systimer_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                        // systimer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                        // avalon_st_adapter_008:out_0_error -> systimer_s1_agent:rdata_fifo_sink_error
	wire          led_s1_agent_rdata_fifo_src_valid;                                        // led_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] led_s1_agent_rdata_fifo_src_data;                                         // led_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          led_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_009:in_0_ready -> led_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                        // avalon_st_adapter_009:out_0_valid -> led_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                         // avalon_st_adapter_009:out_0_data -> led_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                        // led_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                        // avalon_st_adapter_009:out_0_error -> led_s1_agent:rdata_fifo_sink_error
	wire          led_7seg_0_s1_agent_rdata_fifo_src_valid;                                 // led_7seg_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] led_7seg_0_s1_agent_rdata_fifo_src_data;                                  // led_7seg_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          led_7seg_0_s1_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_010:in_0_ready -> led_7seg_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                        // avalon_st_adapter_010:out_0_valid -> led_7seg_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                         // avalon_st_adapter_010:out_0_data -> led_7seg_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                        // led_7seg_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                        // avalon_st_adapter_010:out_0_error -> led_7seg_0_s1_agent:rdata_fifo_sink_error
	wire          led_7seg_1_s1_agent_rdata_fifo_src_valid;                                 // led_7seg_1_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] led_7seg_1_s1_agent_rdata_fifo_src_data;                                  // led_7seg_1_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          led_7seg_1_s1_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_011:in_0_ready -> led_7seg_1_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                        // avalon_st_adapter_011:out_0_valid -> led_7seg_1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                         // avalon_st_adapter_011:out_0_data -> led_7seg_1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                        // led_7seg_1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                        // avalon_st_adapter_011:out_0_error -> led_7seg_1_s1_agent:rdata_fifo_sink_error
	wire          led_7seg_2_s1_agent_rdata_fifo_src_valid;                                 // led_7seg_2_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] led_7seg_2_s1_agent_rdata_fifo_src_data;                                  // led_7seg_2_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire          led_7seg_2_s1_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_012:in_0_ready -> led_7seg_2_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_012_out_0_valid;                                        // avalon_st_adapter_012:out_0_valid -> led_7seg_2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                         // avalon_st_adapter_012:out_0_data -> led_7seg_2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                        // led_7seg_2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                        // avalon_st_adapter_012:out_0_error -> led_7seg_2_s1_agent:rdata_fifo_sink_error
	wire          psw_s1_agent_rdata_fifo_src_valid;                                        // psw_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] psw_s1_agent_rdata_fifo_src_data;                                         // psw_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire          psw_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_013:in_0_ready -> psw_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_013_out_0_valid;                                        // avalon_st_adapter_013:out_0_valid -> psw_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                         // avalon_st_adapter_013:out_0_data -> psw_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                        // psw_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                        // avalon_st_adapter_013:out_0_error -> psw_s1_agent:rdata_fifo_sink_error
	wire          dipsw_s1_agent_rdata_fifo_src_valid;                                      // dipsw_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] dipsw_s1_agent_rdata_fifo_src_data;                                       // dipsw_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire          dipsw_s1_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_014:in_0_ready -> dipsw_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_014_out_0_valid;                                        // avalon_st_adapter_014:out_0_valid -> dipsw_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                         // avalon_st_adapter_014:out_0_data -> dipsw_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                        // dipsw_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                        // avalon_st_adapter_014:out_0_error -> dipsw_s1_agent:rdata_fifo_sink_error
	wire          gpio0_s1_agent_rdata_fifo_src_valid;                                      // gpio0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] gpio0_s1_agent_rdata_fifo_src_data;                                       // gpio0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire          gpio0_s1_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_015:in_0_ready -> gpio0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_015_out_0_valid;                                        // avalon_st_adapter_015:out_0_valid -> gpio0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                         // avalon_st_adapter_015:out_0_data -> gpio0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                        // gpio0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                        // avalon_st_adapter_015:out_0_error -> gpio0_s1_agent:rdata_fifo_sink_error
	wire          mmcdma_s1_agent_rdata_fifo_src_valid;                                     // mmcdma_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] mmcdma_s1_agent_rdata_fifo_src_data;                                      // mmcdma_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire          mmcdma_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_016:in_0_ready -> mmcdma_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_016_out_0_valid;                                        // avalon_st_adapter_016:out_0_valid -> mmcdma_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                         // avalon_st_adapter_016:out_0_data -> mmcdma_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                        // mmcdma_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                        // avalon_st_adapter_016:out_0_error -> mmcdma_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (24),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (24),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) peripherals_bridge_m0_translator (
		.clk                    (clk_peri_clk_clk),                                                         //                       clk.clk
		.reset                  (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset),                  //                     reset.reset
		.uav_address            (peripherals_bridge_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (peripherals_bridge_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (peripherals_bridge_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (peripherals_bridge_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (peripherals_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (peripherals_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (peripherals_bridge_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (peripherals_bridge_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (peripherals_bridge_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (peripherals_bridge_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (peripherals_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (peripherals_bridge_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (peripherals_bridge_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (peripherals_bridge_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (peripherals_bridge_m0_byteenable),                                         //                          .byteenable
		.av_read                (peripherals_bridge_m0_read),                                               //                          .read
		.av_readdata            (peripherals_bridge_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (peripherals_bridge_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (peripherals_bridge_m0_write),                                              //                          .write
		.av_writedata           (peripherals_bridge_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (peripherals_bridge_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                     //               (terminated)
		.av_begintransfer       (1'b0),                                                                     //               (terminated)
		.av_chipselect          (1'b0),                                                                     //               (terminated)
		.av_lock                (1'b0),                                                                     //               (terminated)
		.uav_clken              (),                                                                         //               (terminated)
		.av_clken               (1'b1),                                                                     //               (terminated)
		.uav_response           (2'b00),                                                                    //               (terminated)
		.av_response            (),                                                                         //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                     //               (terminated)
		.av_writeresponsevalid  ()                                                                          //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (24),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (clk_peri_clk_clk),                                        //                      clk.clk
		.reset                  (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),               //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),              //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),          //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                     //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                       //                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                        //                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),                    //                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),                   //                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),                 //                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),                  //                         .chipselect
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (24),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ps2_kb_avalon_ps2_slave_translator (
		.clk                    (clk_peri_clk_clk),                                        //                      clk.clk
		.reset                  (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ps2_kb_avalon_ps2_slave_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (ps2_kb_avalon_ps2_slave_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (ps2_kb_avalon_ps2_slave_agent_m0_read),                   //                         .read
		.uav_write              (ps2_kb_avalon_ps2_slave_agent_m0_write),                  //                         .write
		.uav_waitrequest        (ps2_kb_avalon_ps2_slave_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (ps2_kb_avalon_ps2_slave_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (ps2_kb_avalon_ps2_slave_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (ps2_kb_avalon_ps2_slave_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (ps2_kb_avalon_ps2_slave_agent_m0_writedata),              //                         .writedata
		.uav_lock               (ps2_kb_avalon_ps2_slave_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (ps2_kb_avalon_ps2_slave_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (ps2_kb_avalon_ps2_slave_address),                         //      avalon_anti_slave_0.address
		.av_write               (ps2_kb_avalon_ps2_slave_write),                           //                         .write
		.av_read                (ps2_kb_avalon_ps2_slave_read),                            //                         .read
		.av_readdata            (ps2_kb_avalon_ps2_slave_readdata),                        //                         .readdata
		.av_writedata           (ps2_kb_avalon_ps2_slave_writedata),                       //                         .writedata
		.av_byteenable          (ps2_kb_avalon_ps2_slave_byteenable),                      //                         .byteenable
		.av_waitrequest         (ps2_kb_avalon_ps2_slave_waitrequest),                     //                         .waitrequest
		.av_chipselect          (ps2_kb_avalon_ps2_slave_chipselect),                      //                         .chipselect
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (24),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) epcq_avl_csr_translator (
		.clk                    (clk_peri_clk_clk),                                        //                      clk.clk
		.reset                  (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (epcq_avl_csr_agent_m0_address),                           // avalon_universal_slave_0.address
		.uav_burstcount         (epcq_avl_csr_agent_m0_burstcount),                        //                         .burstcount
		.uav_read               (epcq_avl_csr_agent_m0_read),                              //                         .read
		.uav_write              (epcq_avl_csr_agent_m0_write),                             //                         .write
		.uav_waitrequest        (epcq_avl_csr_agent_m0_waitrequest),                       //                         .waitrequest
		.uav_readdatavalid      (epcq_avl_csr_agent_m0_readdatavalid),                     //                         .readdatavalid
		.uav_byteenable         (epcq_avl_csr_agent_m0_byteenable),                        //                         .byteenable
		.uav_readdata           (epcq_avl_csr_agent_m0_readdata),                          //                         .readdata
		.uav_writedata          (epcq_avl_csr_agent_m0_writedata),                         //                         .writedata
		.uav_lock               (epcq_avl_csr_agent_m0_lock),                              //                         .lock
		.uav_debugaccess        (epcq_avl_csr_agent_m0_debugaccess),                       //                         .debugaccess
		.av_address             (epcq_avl_csr_address),                                    //      avalon_anti_slave_0.address
		.av_write               (epcq_avl_csr_write),                                      //                         .write
		.av_read                (epcq_avl_csr_read),                                       //                         .read
		.av_readdata            (epcq_avl_csr_readdata),                                   //                         .readdata
		.av_writedata           (epcq_avl_csr_writedata),                                  //                         .writedata
		.av_readdatavalid       (epcq_avl_csr_readdatavalid),                              //                         .readdatavalid
		.av_waitrequest         (epcq_avl_csr_waitrequest),                                //                         .waitrequest
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (21),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (7),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (24),
		.UAV_BURSTCOUNT_W               (9),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) epcq_avl_mem_translator (
		.clk                    (clk_peri_clk_clk),                                        //                      clk.clk
		.reset                  (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (epcq_avl_mem_agent_m0_address),                           // avalon_universal_slave_0.address
		.uav_burstcount         (epcq_avl_mem_agent_m0_burstcount),                        //                         .burstcount
		.uav_read               (epcq_avl_mem_agent_m0_read),                              //                         .read
		.uav_write              (epcq_avl_mem_agent_m0_write),                             //                         .write
		.uav_waitrequest        (epcq_avl_mem_agent_m0_waitrequest),                       //                         .waitrequest
		.uav_readdatavalid      (epcq_avl_mem_agent_m0_readdatavalid),                     //                         .readdatavalid
		.uav_byteenable         (epcq_avl_mem_agent_m0_byteenable),                        //                         .byteenable
		.uav_readdata           (epcq_avl_mem_agent_m0_readdata),                          //                         .readdata
		.uav_writedata          (epcq_avl_mem_agent_m0_writedata),                         //                         .writedata
		.uav_lock               (epcq_avl_mem_agent_m0_lock),                              //                         .lock
		.uav_debugaccess        (epcq_avl_mem_agent_m0_debugaccess),                       //                         .debugaccess
		.av_address             (epcq_avl_mem_address),                                    //      avalon_anti_slave_0.address
		.av_write               (epcq_avl_mem_write),                                      //                         .write
		.av_read                (epcq_avl_mem_read),                                       //                         .read
		.av_readdata            (epcq_avl_mem_readdata),                                   //                         .readdata
		.av_writedata           (epcq_avl_mem_writedata),                                  //                         .writedata
		.av_burstcount          (epcq_avl_mem_burstcount),                                 //                         .burstcount
		.av_byteenable          (epcq_avl_mem_byteenable),                                 //                         .byteenable
		.av_readdatavalid       (epcq_avl_mem_readdatavalid),                              //                         .readdatavalid
		.av_waitrequest         (epcq_avl_mem_waitrequest),                                //                         .waitrequest
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (24),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_control_slave_translator (
		.clk                    (clk_peri_clk_clk),                                        //                      clk.clk
		.reset                  (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sysid_control_slave_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_control_slave_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (sysid_control_slave_agent_m0_read),                       //                         .read
		.uav_write              (sysid_control_slave_agent_m0_write),                      //                         .write
		.uav_waitrequest        (sysid_control_slave_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (sysid_control_slave_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (sysid_control_slave_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (sysid_control_slave_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (sysid_control_slave_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (sysid_control_slave_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (sysid_control_slave_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (sysid_control_slave_address),                             //      avalon_anti_slave_0.address
		.av_readdata            (sysid_control_slave_readdata),                            //                         .readdata
		.av_write               (),                                                        //              (terminated)
		.av_read                (),                                                        //              (terminated)
		.av_writedata           (),                                                        //              (terminated)
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (24),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pcm_s0_translator (
		.clk                    (clk_peri_clk_clk),                                        //                      clk.clk
		.reset                  (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pcm_s0_agent_m0_address),                                 // avalon_universal_slave_0.address
		.uav_burstcount         (pcm_s0_agent_m0_burstcount),                              //                         .burstcount
		.uav_read               (pcm_s0_agent_m0_read),                                    //                         .read
		.uav_write              (pcm_s0_agent_m0_write),                                   //                         .write
		.uav_waitrequest        (pcm_s0_agent_m0_waitrequest),                             //                         .waitrequest
		.uav_readdatavalid      (pcm_s0_agent_m0_readdatavalid),                           //                         .readdatavalid
		.uav_byteenable         (pcm_s0_agent_m0_byteenable),                              //                         .byteenable
		.uav_readdata           (pcm_s0_agent_m0_readdata),                                //                         .readdata
		.uav_writedata          (pcm_s0_agent_m0_writedata),                               //                         .writedata
		.uav_lock               (pcm_s0_agent_m0_lock),                                    //                         .lock
		.uav_debugaccess        (pcm_s0_agent_m0_debugaccess),                             //                         .debugaccess
		.av_address             (pcm_s0_address),                                          //      avalon_anti_slave_0.address
		.av_write               (pcm_s0_write),                                            //                         .write
		.av_read                (pcm_s0_read),                                             //                         .read
		.av_readdata            (pcm_s0_readdata),                                         //                         .readdata
		.av_writedata           (pcm_s0_writedata),                                        //                         .writedata
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (24),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_s1_translator (
		.clk                    (clk_peri_clk_clk),                                        //                      clk.clk
		.reset                  (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (vga_s1_agent_m0_address),                                 // avalon_universal_slave_0.address
		.uav_burstcount         (vga_s1_agent_m0_burstcount),                              //                         .burstcount
		.uav_read               (vga_s1_agent_m0_read),                                    //                         .read
		.uav_write              (vga_s1_agent_m0_write),                                   //                         .write
		.uav_waitrequest        (vga_s1_agent_m0_waitrequest),                             //                         .waitrequest
		.uav_readdatavalid      (vga_s1_agent_m0_readdatavalid),                           //                         .readdatavalid
		.uav_byteenable         (vga_s1_agent_m0_byteenable),                              //                         .byteenable
		.uav_readdata           (vga_s1_agent_m0_readdata),                                //                         .readdata
		.uav_writedata          (vga_s1_agent_m0_writedata),                               //                         .writedata
		.uav_lock               (vga_s1_agent_m0_lock),                                    //                         .lock
		.uav_debugaccess        (vga_s1_agent_m0_debugaccess),                             //                         .debugaccess
		.av_address             (vga_s1_address),                                          //      avalon_anti_slave_0.address
		.av_write               (vga_s1_write),                                            //                         .write
		.av_read                (vga_s1_read),                                             //                         .read
		.av_readdata            (vga_s1_readdata),                                         //                         .readdata
		.av_writedata           (vga_s1_writedata),                                        //                         .writedata
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (24),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) usb_s1_translator (
		.clk                    (clk_peri_clk_clk),                                        //                      clk.clk
		.reset                  (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (usb_s1_agent_m0_address),                                 // avalon_universal_slave_0.address
		.uav_burstcount         (usb_s1_agent_m0_burstcount),                              //                         .burstcount
		.uav_read               (usb_s1_agent_m0_read),                                    //                         .read
		.uav_write              (usb_s1_agent_m0_write),                                   //                         .write
		.uav_waitrequest        (usb_s1_agent_m0_waitrequest),                             //                         .waitrequest
		.uav_readdatavalid      (usb_s1_agent_m0_readdatavalid),                           //                         .readdatavalid
		.uav_byteenable         (usb_s1_agent_m0_byteenable),                              //                         .byteenable
		.uav_readdata           (usb_s1_agent_m0_readdata),                                //                         .readdata
		.uav_writedata          (usb_s1_agent_m0_writedata),                               //                         .writedata
		.uav_lock               (usb_s1_agent_m0_lock),                                    //                         .lock
		.uav_debugaccess        (usb_s1_agent_m0_debugaccess),                             //                         .debugaccess
		.av_address             (usb_s1_address),                                          //      avalon_anti_slave_0.address
		.av_write               (usb_s1_write),                                            //                         .write
		.av_read                (usb_s1_read),                                             //                         .read
		.av_readdata            (usb_s1_readdata),                                         //                         .readdata
		.av_writedata           (usb_s1_writedata),                                        //                         .writedata
		.av_waitrequest         (usb_s1_waitrequest),                                      //                         .waitrequest
		.av_chipselect          (usb_s1_chipselect),                                       //                         .chipselect
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (24),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) systimer_s1_translator (
		.clk                    (clk_peri_clk_clk),                                        //                      clk.clk
		.reset                  (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (systimer_s1_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount         (systimer_s1_agent_m0_burstcount),                         //                         .burstcount
		.uav_read               (systimer_s1_agent_m0_read),                               //                         .read
		.uav_write              (systimer_s1_agent_m0_write),                              //                         .write
		.uav_waitrequest        (systimer_s1_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid      (systimer_s1_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable         (systimer_s1_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata           (systimer_s1_agent_m0_readdata),                           //                         .readdata
		.uav_writedata          (systimer_s1_agent_m0_writedata),                          //                         .writedata
		.uav_lock               (systimer_s1_agent_m0_lock),                               //                         .lock
		.uav_debugaccess        (systimer_s1_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address             (systimer_s1_address),                                     //      avalon_anti_slave_0.address
		.av_write               (systimer_s1_write),                                       //                         .write
		.av_readdata            (systimer_s1_readdata),                                    //                         .readdata
		.av_writedata           (systimer_s1_writedata),                                   //                         .writedata
		.av_chipselect          (systimer_s1_chipselect),                                  //                         .chipselect
		.av_read                (),                                                        //              (terminated)
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (24),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_s1_translator (
		.clk                    (clk_peri_clk_clk),                                        //                      clk.clk
		.reset                  (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_s1_agent_m0_address),                                 // avalon_universal_slave_0.address
		.uav_burstcount         (led_s1_agent_m0_burstcount),                              //                         .burstcount
		.uav_read               (led_s1_agent_m0_read),                                    //                         .read
		.uav_write              (led_s1_agent_m0_write),                                   //                         .write
		.uav_waitrequest        (led_s1_agent_m0_waitrequest),                             //                         .waitrequest
		.uav_readdatavalid      (led_s1_agent_m0_readdatavalid),                           //                         .readdatavalid
		.uav_byteenable         (led_s1_agent_m0_byteenable),                              //                         .byteenable
		.uav_readdata           (led_s1_agent_m0_readdata),                                //                         .readdata
		.uav_writedata          (led_s1_agent_m0_writedata),                               //                         .writedata
		.uav_lock               (led_s1_agent_m0_lock),                                    //                         .lock
		.uav_debugaccess        (led_s1_agent_m0_debugaccess),                             //                         .debugaccess
		.av_address             (led_s1_address),                                          //      avalon_anti_slave_0.address
		.av_write               (led_s1_write),                                            //                         .write
		.av_readdata            (led_s1_readdata),                                         //                         .readdata
		.av_writedata           (led_s1_writedata),                                        //                         .writedata
		.av_chipselect          (led_s1_chipselect),                                       //                         .chipselect
		.av_read                (),                                                        //              (terminated)
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (24),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_7seg_0_s1_translator (
		.clk                    (clk_peri_clk_clk),                                        //                      clk.clk
		.reset                  (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_7seg_0_s1_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount         (led_7seg_0_s1_agent_m0_burstcount),                       //                         .burstcount
		.uav_read               (led_7seg_0_s1_agent_m0_read),                             //                         .read
		.uav_write              (led_7seg_0_s1_agent_m0_write),                            //                         .write
		.uav_waitrequest        (led_7seg_0_s1_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid      (led_7seg_0_s1_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable         (led_7seg_0_s1_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata           (led_7seg_0_s1_agent_m0_readdata),                         //                         .readdata
		.uav_writedata          (led_7seg_0_s1_agent_m0_writedata),                        //                         .writedata
		.uav_lock               (led_7seg_0_s1_agent_m0_lock),                             //                         .lock
		.uav_debugaccess        (led_7seg_0_s1_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address             (led_7seg_0_s1_address),                                   //      avalon_anti_slave_0.address
		.av_write               (led_7seg_0_s1_write),                                     //                         .write
		.av_readdata            (led_7seg_0_s1_readdata),                                  //                         .readdata
		.av_writedata           (led_7seg_0_s1_writedata),                                 //                         .writedata
		.av_chipselect          (led_7seg_0_s1_chipselect),                                //                         .chipselect
		.av_read                (),                                                        //              (terminated)
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (24),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_7seg_1_s1_translator (
		.clk                    (clk_peri_clk_clk),                                        //                      clk.clk
		.reset                  (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_7seg_1_s1_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount         (led_7seg_1_s1_agent_m0_burstcount),                       //                         .burstcount
		.uav_read               (led_7seg_1_s1_agent_m0_read),                             //                         .read
		.uav_write              (led_7seg_1_s1_agent_m0_write),                            //                         .write
		.uav_waitrequest        (led_7seg_1_s1_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid      (led_7seg_1_s1_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable         (led_7seg_1_s1_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata           (led_7seg_1_s1_agent_m0_readdata),                         //                         .readdata
		.uav_writedata          (led_7seg_1_s1_agent_m0_writedata),                        //                         .writedata
		.uav_lock               (led_7seg_1_s1_agent_m0_lock),                             //                         .lock
		.uav_debugaccess        (led_7seg_1_s1_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address             (led_7seg_1_s1_address),                                   //      avalon_anti_slave_0.address
		.av_write               (led_7seg_1_s1_write),                                     //                         .write
		.av_readdata            (led_7seg_1_s1_readdata),                                  //                         .readdata
		.av_writedata           (led_7seg_1_s1_writedata),                                 //                         .writedata
		.av_chipselect          (led_7seg_1_s1_chipselect),                                //                         .chipselect
		.av_read                (),                                                        //              (terminated)
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (24),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_7seg_2_s1_translator (
		.clk                    (clk_peri_clk_clk),                                        //                      clk.clk
		.reset                  (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_7seg_2_s1_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount         (led_7seg_2_s1_agent_m0_burstcount),                       //                         .burstcount
		.uav_read               (led_7seg_2_s1_agent_m0_read),                             //                         .read
		.uav_write              (led_7seg_2_s1_agent_m0_write),                            //                         .write
		.uav_waitrequest        (led_7seg_2_s1_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid      (led_7seg_2_s1_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable         (led_7seg_2_s1_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata           (led_7seg_2_s1_agent_m0_readdata),                         //                         .readdata
		.uav_writedata          (led_7seg_2_s1_agent_m0_writedata),                        //                         .writedata
		.uav_lock               (led_7seg_2_s1_agent_m0_lock),                             //                         .lock
		.uav_debugaccess        (led_7seg_2_s1_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address             (led_7seg_2_s1_address),                                   //      avalon_anti_slave_0.address
		.av_write               (led_7seg_2_s1_write),                                     //                         .write
		.av_readdata            (led_7seg_2_s1_readdata),                                  //                         .readdata
		.av_writedata           (led_7seg_2_s1_writedata),                                 //                         .writedata
		.av_chipselect          (led_7seg_2_s1_chipselect),                                //                         .chipselect
		.av_read                (),                                                        //              (terminated)
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (24),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) psw_s1_translator (
		.clk                    (clk_peri_clk_clk),                                        //                      clk.clk
		.reset                  (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (psw_s1_agent_m0_address),                                 // avalon_universal_slave_0.address
		.uav_burstcount         (psw_s1_agent_m0_burstcount),                              //                         .burstcount
		.uav_read               (psw_s1_agent_m0_read),                                    //                         .read
		.uav_write              (psw_s1_agent_m0_write),                                   //                         .write
		.uav_waitrequest        (psw_s1_agent_m0_waitrequest),                             //                         .waitrequest
		.uav_readdatavalid      (psw_s1_agent_m0_readdatavalid),                           //                         .readdatavalid
		.uav_byteenable         (psw_s1_agent_m0_byteenable),                              //                         .byteenable
		.uav_readdata           (psw_s1_agent_m0_readdata),                                //                         .readdata
		.uav_writedata          (psw_s1_agent_m0_writedata),                               //                         .writedata
		.uav_lock               (psw_s1_agent_m0_lock),                                    //                         .lock
		.uav_debugaccess        (psw_s1_agent_m0_debugaccess),                             //                         .debugaccess
		.av_address             (psw_s1_address),                                          //      avalon_anti_slave_0.address
		.av_write               (psw_s1_write),                                            //                         .write
		.av_readdata            (psw_s1_readdata),                                         //                         .readdata
		.av_writedata           (psw_s1_writedata),                                        //                         .writedata
		.av_chipselect          (psw_s1_chipselect),                                       //                         .chipselect
		.av_read                (),                                                        //              (terminated)
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (24),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dipsw_s1_translator (
		.clk                    (clk_peri_clk_clk),                                        //                      clk.clk
		.reset                  (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dipsw_s1_agent_m0_address),                               // avalon_universal_slave_0.address
		.uav_burstcount         (dipsw_s1_agent_m0_burstcount),                            //                         .burstcount
		.uav_read               (dipsw_s1_agent_m0_read),                                  //                         .read
		.uav_write              (dipsw_s1_agent_m0_write),                                 //                         .write
		.uav_waitrequest        (dipsw_s1_agent_m0_waitrequest),                           //                         .waitrequest
		.uav_readdatavalid      (dipsw_s1_agent_m0_readdatavalid),                         //                         .readdatavalid
		.uav_byteenable         (dipsw_s1_agent_m0_byteenable),                            //                         .byteenable
		.uav_readdata           (dipsw_s1_agent_m0_readdata),                              //                         .readdata
		.uav_writedata          (dipsw_s1_agent_m0_writedata),                             //                         .writedata
		.uav_lock               (dipsw_s1_agent_m0_lock),                                  //                         .lock
		.uav_debugaccess        (dipsw_s1_agent_m0_debugaccess),                           //                         .debugaccess
		.av_address             (dipsw_s1_address),                                        //      avalon_anti_slave_0.address
		.av_readdata            (dipsw_s1_readdata),                                       //                         .readdata
		.av_write               (),                                                        //              (terminated)
		.av_read                (),                                                        //              (terminated)
		.av_writedata           (),                                                        //              (terminated)
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (24),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) gpio0_s1_translator (
		.clk                    (clk_peri_clk_clk),                                        //                      clk.clk
		.reset                  (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (gpio0_s1_agent_m0_address),                               // avalon_universal_slave_0.address
		.uav_burstcount         (gpio0_s1_agent_m0_burstcount),                            //                         .burstcount
		.uav_read               (gpio0_s1_agent_m0_read),                                  //                         .read
		.uav_write              (gpio0_s1_agent_m0_write),                                 //                         .write
		.uav_waitrequest        (gpio0_s1_agent_m0_waitrequest),                           //                         .waitrequest
		.uav_readdatavalid      (gpio0_s1_agent_m0_readdatavalid),                         //                         .readdatavalid
		.uav_byteenable         (gpio0_s1_agent_m0_byteenable),                            //                         .byteenable
		.uav_readdata           (gpio0_s1_agent_m0_readdata),                              //                         .readdata
		.uav_writedata          (gpio0_s1_agent_m0_writedata),                             //                         .writedata
		.uav_lock               (gpio0_s1_agent_m0_lock),                                  //                         .lock
		.uav_debugaccess        (gpio0_s1_agent_m0_debugaccess),                           //                         .debugaccess
		.av_address             (gpio0_s1_address),                                        //      avalon_anti_slave_0.address
		.av_write               (gpio0_s1_write),                                          //                         .write
		.av_readdata            (gpio0_s1_readdata),                                       //                         .readdata
		.av_writedata           (gpio0_s1_writedata),                                      //                         .writedata
		.av_chipselect          (gpio0_s1_chipselect),                                     //                         .chipselect
		.av_read                (),                                                        //              (terminated)
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (24),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (2),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mmcdma_s1_translator (
		.clk                    (clk_peri_clk_clk),                                        //                      clk.clk
		.reset                  (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mmcdma_s1_agent_m0_address),                              // avalon_universal_slave_0.address
		.uav_burstcount         (mmcdma_s1_agent_m0_burstcount),                           //                         .burstcount
		.uav_read               (mmcdma_s1_agent_m0_read),                                 //                         .read
		.uav_write              (mmcdma_s1_agent_m0_write),                                //                         .write
		.uav_waitrequest        (mmcdma_s1_agent_m0_waitrequest),                          //                         .waitrequest
		.uav_readdatavalid      (mmcdma_s1_agent_m0_readdatavalid),                        //                         .readdatavalid
		.uav_byteenable         (mmcdma_s1_agent_m0_byteenable),                           //                         .byteenable
		.uav_readdata           (mmcdma_s1_agent_m0_readdata),                             //                         .readdata
		.uav_writedata          (mmcdma_s1_agent_m0_writedata),                            //                         .writedata
		.uav_lock               (mmcdma_s1_agent_m0_lock),                                 //                         .lock
		.uav_debugaccess        (mmcdma_s1_agent_m0_debugaccess),                          //                         .debugaccess
		.av_address             (mmcdma_s1_address),                                       //      avalon_anti_slave_0.address
		.av_write               (mmcdma_s1_write),                                         //                         .write
		.av_read                (mmcdma_s1_read),                                          //                         .read
		.av_readdata            (mmcdma_s1_readdata),                                      //                         .readdata
		.av_writedata           (mmcdma_s1_writedata),                                     //                         .writedata
		.av_chipselect          (mmcdma_s1_chipselect),                                    //                         .chipselect
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_QOS_H                 (92),
		.PKT_QOS_L                 (92),
		.PKT_DATA_SIDEBAND_H       (90),
		.PKT_DATA_SIDEBAND_L       (90),
		.PKT_ADDR_SIDEBAND_H       (89),
		.PKT_ADDR_SIDEBAND_L       (89),
		.PKT_BURST_TYPE_H          (88),
		.PKT_BURST_TYPE_L          (87),
		.PKT_CACHE_H               (110),
		.PKT_CACHE_L               (107),
		.PKT_THREAD_ID_H           (103),
		.PKT_THREAD_ID_L           (103),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_TRANS_EXCLUSIVE       (65),
		.PKT_TRANS_LOCK            (64),
		.PKT_BEGIN_BURST           (91),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (66),
		.PKT_ADDR_H                (59),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (60),
		.PKT_TRANS_POSTED          (61),
		.PKT_TRANS_WRITE           (62),
		.PKT_TRANS_READ            (63),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (98),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (17),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) peripherals_bridge_m0_agent (
		.clk                   (clk_peri_clk_clk),                                                         //       clk.clk
		.reset                 (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.av_address            (peripherals_bridge_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (peripherals_bridge_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (peripherals_bridge_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (peripherals_bridge_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (peripherals_bridge_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (peripherals_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (peripherals_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (peripherals_bridge_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (peripherals_bridge_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (peripherals_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (peripherals_bridge_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (peripherals_bridge_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (peripherals_bridge_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (peripherals_bridge_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (peripherals_bridge_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (peripherals_bridge_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (peripherals_bridge_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (peripherals_bridge_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (peripherals_bridge_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (peripherals_bridge_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (peripherals_bridge_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (peripherals_bridge_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                         // (terminated)
		.av_writeresponsevalid ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_TRANS_LOCK            (64),
		.PKT_BEGIN_BURST           (91),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (66),
		.PKT_ADDR_H                (59),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (60),
		.PKT_TRANS_POSTED          (61),
		.PKT_TRANS_WRITE           (62),
		.PKT_TRANS_READ            (63),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (98),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (clk_peri_clk_clk),                                             //             clk.clk
		.reset                   (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                          //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_peri_clk_clk),                                             //       clk.clk
		.reset             (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_TRANS_LOCK            (64),
		.PKT_BEGIN_BURST           (91),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (66),
		.PKT_ADDR_H                (59),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (60),
		.PKT_TRANS_POSTED          (61),
		.PKT_TRANS_WRITE           (62),
		.PKT_TRANS_READ            (63),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (98),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ps2_kb_avalon_ps2_slave_agent (
		.clk                     (clk_peri_clk_clk),                                         //             clk.clk
		.reset                   (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (ps2_kb_avalon_ps2_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ps2_kb_avalon_ps2_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ps2_kb_avalon_ps2_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ps2_kb_avalon_ps2_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ps2_kb_avalon_ps2_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (ps2_kb_avalon_ps2_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ps2_kb_avalon_ps2_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ps2_kb_avalon_ps2_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (ps2_kb_avalon_ps2_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ps2_kb_avalon_ps2_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (ps2_kb_avalon_ps2_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (ps2_kb_avalon_ps2_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ps2_kb_avalon_ps2_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (ps2_kb_avalon_ps2_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (ps2_kb_avalon_ps2_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (ps2_kb_avalon_ps2_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                    //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                    //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                     //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                              //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                  //                .channel
		.rf_sink_ready           (ps2_kb_avalon_ps2_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ps2_kb_avalon_ps2_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ps2_kb_avalon_ps2_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ps2_kb_avalon_ps2_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ps2_kb_avalon_ps2_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ps2_kb_avalon_ps2_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ps2_kb_avalon_ps2_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ps2_kb_avalon_ps2_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ps2_kb_avalon_ps2_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ps2_kb_avalon_ps2_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (ps2_kb_avalon_ps2_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ps2_kb_avalon_ps2_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ps2_kb_avalon_ps2_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ps2_kb_avalon_ps2_slave_agent_rsp_fifo (
		.clk               (clk_peri_clk_clk),                                         //       clk.clk
		.reset             (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (ps2_kb_avalon_ps2_slave_agent_rf_source_data),             //        in.data
		.in_valid          (ps2_kb_avalon_ps2_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (ps2_kb_avalon_ps2_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ps2_kb_avalon_ps2_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ps2_kb_avalon_ps2_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ps2_kb_avalon_ps2_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ps2_kb_avalon_ps2_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ps2_kb_avalon_ps2_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ps2_kb_avalon_ps2_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ps2_kb_avalon_ps2_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_TRANS_LOCK            (64),
		.PKT_BEGIN_BURST           (91),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (66),
		.PKT_ADDR_H                (59),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (60),
		.PKT_TRANS_POSTED          (61),
		.PKT_TRANS_WRITE           (62),
		.PKT_TRANS_READ            (63),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (98),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) epcq_avl_csr_agent (
		.clk                     (clk_peri_clk_clk),                                        //             clk.clk
		.reset                   (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (epcq_avl_csr_agent_m0_address),                           //              m0.address
		.m0_burstcount           (epcq_avl_csr_agent_m0_burstcount),                        //                .burstcount
		.m0_byteenable           (epcq_avl_csr_agent_m0_byteenable),                        //                .byteenable
		.m0_debugaccess          (epcq_avl_csr_agent_m0_debugaccess),                       //                .debugaccess
		.m0_lock                 (epcq_avl_csr_agent_m0_lock),                              //                .lock
		.m0_readdata             (epcq_avl_csr_agent_m0_readdata),                          //                .readdata
		.m0_readdatavalid        (epcq_avl_csr_agent_m0_readdatavalid),                     //                .readdatavalid
		.m0_read                 (epcq_avl_csr_agent_m0_read),                              //                .read
		.m0_waitrequest          (epcq_avl_csr_agent_m0_waitrequest),                       //                .waitrequest
		.m0_writedata            (epcq_avl_csr_agent_m0_writedata),                         //                .writedata
		.m0_write                (epcq_avl_csr_agent_m0_write),                             //                .write
		.rp_endofpacket          (epcq_avl_csr_agent_rp_endofpacket),                       //              rp.endofpacket
		.rp_ready                (epcq_avl_csr_agent_rp_ready),                             //                .ready
		.rp_valid                (epcq_avl_csr_agent_rp_valid),                             //                .valid
		.rp_data                 (epcq_avl_csr_agent_rp_data),                              //                .data
		.rp_startofpacket        (epcq_avl_csr_agent_rp_startofpacket),                     //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                 //                .channel
		.rf_sink_ready           (epcq_avl_csr_agent_rsp_fifo_out_ready),                   //         rf_sink.ready
		.rf_sink_valid           (epcq_avl_csr_agent_rsp_fifo_out_valid),                   //                .valid
		.rf_sink_startofpacket   (epcq_avl_csr_agent_rsp_fifo_out_startofpacket),           //                .startofpacket
		.rf_sink_endofpacket     (epcq_avl_csr_agent_rsp_fifo_out_endofpacket),             //                .endofpacket
		.rf_sink_data            (epcq_avl_csr_agent_rsp_fifo_out_data),                    //                .data
		.rf_source_ready         (epcq_avl_csr_agent_rf_source_ready),                      //       rf_source.ready
		.rf_source_valid         (epcq_avl_csr_agent_rf_source_valid),                      //                .valid
		.rf_source_startofpacket (epcq_avl_csr_agent_rf_source_startofpacket),              //                .startofpacket
		.rf_source_endofpacket   (epcq_avl_csr_agent_rf_source_endofpacket),                //                .endofpacket
		.rf_source_data          (epcq_avl_csr_agent_rf_source_data),                       //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (epcq_avl_csr_agent_rdata_fifo_src_ready),                 //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (epcq_avl_csr_agent_rdata_fifo_src_valid),                 //                .valid
		.rdata_fifo_src_data     (epcq_avl_csr_agent_rdata_fifo_src_data),                  //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) epcq_avl_csr_agent_rsp_fifo (
		.clk               (clk_peri_clk_clk),                                        //       clk.clk
		.reset             (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (epcq_avl_csr_agent_rf_source_data),                       //        in.data
		.in_valid          (epcq_avl_csr_agent_rf_source_valid),                      //          .valid
		.in_ready          (epcq_avl_csr_agent_rf_source_ready),                      //          .ready
		.in_startofpacket  (epcq_avl_csr_agent_rf_source_startofpacket),              //          .startofpacket
		.in_endofpacket    (epcq_avl_csr_agent_rf_source_endofpacket),                //          .endofpacket
		.out_data          (epcq_avl_csr_agent_rsp_fifo_out_data),                    //       out.data
		.out_valid         (epcq_avl_csr_agent_rsp_fifo_out_valid),                   //          .valid
		.out_ready         (epcq_avl_csr_agent_rsp_fifo_out_ready),                   //          .ready
		.out_startofpacket (epcq_avl_csr_agent_rsp_fifo_out_startofpacket),           //          .startofpacket
		.out_endofpacket   (epcq_avl_csr_agent_rsp_fifo_out_endofpacket),             //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_TRANS_LOCK            (64),
		.PKT_BEGIN_BURST           (91),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (66),
		.PKT_ADDR_H                (59),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (60),
		.PKT_TRANS_POSTED          (61),
		.PKT_TRANS_WRITE           (62),
		.PKT_TRANS_READ            (63),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (98),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (9),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) epcq_avl_mem_agent (
		.clk                     (clk_peri_clk_clk),                                        //             clk.clk
		.reset                   (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (epcq_avl_mem_agent_m0_address),                           //              m0.address
		.m0_burstcount           (epcq_avl_mem_agent_m0_burstcount),                        //                .burstcount
		.m0_byteenable           (epcq_avl_mem_agent_m0_byteenable),                        //                .byteenable
		.m0_debugaccess          (epcq_avl_mem_agent_m0_debugaccess),                       //                .debugaccess
		.m0_lock                 (epcq_avl_mem_agent_m0_lock),                              //                .lock
		.m0_readdata             (epcq_avl_mem_agent_m0_readdata),                          //                .readdata
		.m0_readdatavalid        (epcq_avl_mem_agent_m0_readdatavalid),                     //                .readdatavalid
		.m0_read                 (epcq_avl_mem_agent_m0_read),                              //                .read
		.m0_waitrequest          (epcq_avl_mem_agent_m0_waitrequest),                       //                .waitrequest
		.m0_writedata            (epcq_avl_mem_agent_m0_writedata),                         //                .writedata
		.m0_write                (epcq_avl_mem_agent_m0_write),                             //                .write
		.rp_endofpacket          (epcq_avl_mem_agent_rp_endofpacket),                       //              rp.endofpacket
		.rp_ready                (epcq_avl_mem_agent_rp_ready),                             //                .ready
		.rp_valid                (epcq_avl_mem_agent_rp_valid),                             //                .valid
		.rp_data                 (epcq_avl_mem_agent_rp_data),                              //                .data
		.rp_startofpacket        (epcq_avl_mem_agent_rp_startofpacket),                     //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                 //                .channel
		.rf_sink_ready           (epcq_avl_mem_agent_rsp_fifo_out_ready),                   //         rf_sink.ready
		.rf_sink_valid           (epcq_avl_mem_agent_rsp_fifo_out_valid),                   //                .valid
		.rf_sink_startofpacket   (epcq_avl_mem_agent_rsp_fifo_out_startofpacket),           //                .startofpacket
		.rf_sink_endofpacket     (epcq_avl_mem_agent_rsp_fifo_out_endofpacket),             //                .endofpacket
		.rf_sink_data            (epcq_avl_mem_agent_rsp_fifo_out_data),                    //                .data
		.rf_source_ready         (epcq_avl_mem_agent_rf_source_ready),                      //       rf_source.ready
		.rf_source_valid         (epcq_avl_mem_agent_rf_source_valid),                      //                .valid
		.rf_source_startofpacket (epcq_avl_mem_agent_rf_source_startofpacket),              //                .startofpacket
		.rf_source_endofpacket   (epcq_avl_mem_agent_rf_source_endofpacket),                //                .endofpacket
		.rf_source_data          (epcq_avl_mem_agent_rf_source_data),                       //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (epcq_avl_mem_agent_rdata_fifo_src_ready),                 //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (epcq_avl_mem_agent_rdata_fifo_src_valid),                 //                .valid
		.rdata_fifo_src_data     (epcq_avl_mem_agent_rdata_fifo_src_data),                  //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) epcq_avl_mem_agent_rsp_fifo (
		.clk               (clk_peri_clk_clk),                                        //       clk.clk
		.reset             (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (epcq_avl_mem_agent_rf_source_data),                       //        in.data
		.in_valid          (epcq_avl_mem_agent_rf_source_valid),                      //          .valid
		.in_ready          (epcq_avl_mem_agent_rf_source_ready),                      //          .ready
		.in_startofpacket  (epcq_avl_mem_agent_rf_source_startofpacket),              //          .startofpacket
		.in_endofpacket    (epcq_avl_mem_agent_rf_source_endofpacket),                //          .endofpacket
		.out_data          (epcq_avl_mem_agent_rsp_fifo_out_data),                    //       out.data
		.out_valid         (epcq_avl_mem_agent_rsp_fifo_out_valid),                   //          .valid
		.out_ready         (epcq_avl_mem_agent_rsp_fifo_out_ready),                   //          .ready
		.out_startofpacket (epcq_avl_mem_agent_rsp_fifo_out_startofpacket),           //          .startofpacket
		.out_endofpacket   (epcq_avl_mem_agent_rsp_fifo_out_endofpacket),             //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_TRANS_LOCK            (64),
		.PKT_BEGIN_BURST           (91),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (66),
		.PKT_ADDR_H                (59),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (60),
		.PKT_TRANS_POSTED          (61),
		.PKT_TRANS_WRITE           (62),
		.PKT_TRANS_READ            (63),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (98),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_control_slave_agent (
		.clk                     (clk_peri_clk_clk),                                        //             clk.clk
		.reset                   (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sysid_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sysid_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sysid_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sysid_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sysid_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (sysid_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sysid_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (sysid_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sysid_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (sysid_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (sysid_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sysid_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (sysid_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (sysid_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (sysid_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                 //                .channel
		.rf_sink_ready           (sysid_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sysid_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sysid_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sysid_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sysid_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sysid_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sysid_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sysid_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sysid_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sysid_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (sysid_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sysid_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rsp_fifo (
		.clk               (clk_peri_clk_clk),                                        //       clk.clk
		.reset             (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rf_source_data),                //        in.data
		.in_valid          (sysid_control_slave_agent_rf_source_valid),               //          .valid
		.in_ready          (sysid_control_slave_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (sysid_control_slave_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (sysid_control_slave_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (sysid_control_slave_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (sysid_control_slave_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (sysid_control_slave_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (sysid_control_slave_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_TRANS_LOCK            (64),
		.PKT_BEGIN_BURST           (91),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (66),
		.PKT_ADDR_H                (59),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (60),
		.PKT_TRANS_POSTED          (61),
		.PKT_TRANS_WRITE           (62),
		.PKT_TRANS_READ            (63),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (98),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pcm_s0_agent (
		.clk                     (clk_peri_clk_clk),                                        //             clk.clk
		.reset                   (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pcm_s0_agent_m0_address),                                 //              m0.address
		.m0_burstcount           (pcm_s0_agent_m0_burstcount),                              //                .burstcount
		.m0_byteenable           (pcm_s0_agent_m0_byteenable),                              //                .byteenable
		.m0_debugaccess          (pcm_s0_agent_m0_debugaccess),                             //                .debugaccess
		.m0_lock                 (pcm_s0_agent_m0_lock),                                    //                .lock
		.m0_readdata             (pcm_s0_agent_m0_readdata),                                //                .readdata
		.m0_readdatavalid        (pcm_s0_agent_m0_readdatavalid),                           //                .readdatavalid
		.m0_read                 (pcm_s0_agent_m0_read),                                    //                .read
		.m0_waitrequest          (pcm_s0_agent_m0_waitrequest),                             //                .waitrequest
		.m0_writedata            (pcm_s0_agent_m0_writedata),                               //                .writedata
		.m0_write                (pcm_s0_agent_m0_write),                                   //                .write
		.rp_endofpacket          (pcm_s0_agent_rp_endofpacket),                             //              rp.endofpacket
		.rp_ready                (pcm_s0_agent_rp_ready),                                   //                .ready
		.rp_valid                (pcm_s0_agent_rp_valid),                                   //                .valid
		.rp_data                 (pcm_s0_agent_rp_data),                                    //                .data
		.rp_startofpacket        (pcm_s0_agent_rp_startofpacket),                           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                 //                .channel
		.rf_sink_ready           (pcm_s0_agent_rsp_fifo_out_ready),                         //         rf_sink.ready
		.rf_sink_valid           (pcm_s0_agent_rsp_fifo_out_valid),                         //                .valid
		.rf_sink_startofpacket   (pcm_s0_agent_rsp_fifo_out_startofpacket),                 //                .startofpacket
		.rf_sink_endofpacket     (pcm_s0_agent_rsp_fifo_out_endofpacket),                   //                .endofpacket
		.rf_sink_data            (pcm_s0_agent_rsp_fifo_out_data),                          //                .data
		.rf_source_ready         (pcm_s0_agent_rf_source_ready),                            //       rf_source.ready
		.rf_source_valid         (pcm_s0_agent_rf_source_valid),                            //                .valid
		.rf_source_startofpacket (pcm_s0_agent_rf_source_startofpacket),                    //                .startofpacket
		.rf_source_endofpacket   (pcm_s0_agent_rf_source_endofpacket),                      //                .endofpacket
		.rf_source_data          (pcm_s0_agent_rf_source_data),                             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (pcm_s0_agent_rdata_fifo_src_ready),                       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pcm_s0_agent_rdata_fifo_src_valid),                       //                .valid
		.rdata_fifo_src_data     (pcm_s0_agent_rdata_fifo_src_data),                        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pcm_s0_agent_rsp_fifo (
		.clk               (clk_peri_clk_clk),                                        //       clk.clk
		.reset             (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pcm_s0_agent_rf_source_data),                             //        in.data
		.in_valid          (pcm_s0_agent_rf_source_valid),                            //          .valid
		.in_ready          (pcm_s0_agent_rf_source_ready),                            //          .ready
		.in_startofpacket  (pcm_s0_agent_rf_source_startofpacket),                    //          .startofpacket
		.in_endofpacket    (pcm_s0_agent_rf_source_endofpacket),                      //          .endofpacket
		.out_data          (pcm_s0_agent_rsp_fifo_out_data),                          //       out.data
		.out_valid         (pcm_s0_agent_rsp_fifo_out_valid),                         //          .valid
		.out_ready         (pcm_s0_agent_rsp_fifo_out_ready),                         //          .ready
		.out_startofpacket (pcm_s0_agent_rsp_fifo_out_startofpacket),                 //          .startofpacket
		.out_endofpacket   (pcm_s0_agent_rsp_fifo_out_endofpacket),                   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_TRANS_LOCK            (64),
		.PKT_BEGIN_BURST           (91),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (66),
		.PKT_ADDR_H                (59),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (60),
		.PKT_TRANS_POSTED          (61),
		.PKT_TRANS_WRITE           (62),
		.PKT_TRANS_READ            (63),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (98),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vga_s1_agent (
		.clk                     (clk_peri_clk_clk),                                        //             clk.clk
		.reset                   (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (vga_s1_agent_m0_address),                                 //              m0.address
		.m0_burstcount           (vga_s1_agent_m0_burstcount),                              //                .burstcount
		.m0_byteenable           (vga_s1_agent_m0_byteenable),                              //                .byteenable
		.m0_debugaccess          (vga_s1_agent_m0_debugaccess),                             //                .debugaccess
		.m0_lock                 (vga_s1_agent_m0_lock),                                    //                .lock
		.m0_readdata             (vga_s1_agent_m0_readdata),                                //                .readdata
		.m0_readdatavalid        (vga_s1_agent_m0_readdatavalid),                           //                .readdatavalid
		.m0_read                 (vga_s1_agent_m0_read),                                    //                .read
		.m0_waitrequest          (vga_s1_agent_m0_waitrequest),                             //                .waitrequest
		.m0_writedata            (vga_s1_agent_m0_writedata),                               //                .writedata
		.m0_write                (vga_s1_agent_m0_write),                                   //                .write
		.rp_endofpacket          (vga_s1_agent_rp_endofpacket),                             //              rp.endofpacket
		.rp_ready                (vga_s1_agent_rp_ready),                                   //                .ready
		.rp_valid                (vga_s1_agent_rp_valid),                                   //                .valid
		.rp_data                 (vga_s1_agent_rp_data),                                    //                .data
		.rp_startofpacket        (vga_s1_agent_rp_startofpacket),                           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                 //                .channel
		.rf_sink_ready           (vga_s1_agent_rsp_fifo_out_ready),                         //         rf_sink.ready
		.rf_sink_valid           (vga_s1_agent_rsp_fifo_out_valid),                         //                .valid
		.rf_sink_startofpacket   (vga_s1_agent_rsp_fifo_out_startofpacket),                 //                .startofpacket
		.rf_sink_endofpacket     (vga_s1_agent_rsp_fifo_out_endofpacket),                   //                .endofpacket
		.rf_sink_data            (vga_s1_agent_rsp_fifo_out_data),                          //                .data
		.rf_source_ready         (vga_s1_agent_rf_source_ready),                            //       rf_source.ready
		.rf_source_valid         (vga_s1_agent_rf_source_valid),                            //                .valid
		.rf_source_startofpacket (vga_s1_agent_rf_source_startofpacket),                    //                .startofpacket
		.rf_source_endofpacket   (vga_s1_agent_rf_source_endofpacket),                      //                .endofpacket
		.rf_source_data          (vga_s1_agent_rf_source_data),                             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (vga_s1_agent_rdata_fifo_src_ready),                       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_s1_agent_rdata_fifo_src_valid),                       //                .valid
		.rdata_fifo_src_data     (vga_s1_agent_rdata_fifo_src_data),                        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_s1_agent_rsp_fifo (
		.clk               (clk_peri_clk_clk),                                        //       clk.clk
		.reset             (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (vga_s1_agent_rf_source_data),                             //        in.data
		.in_valid          (vga_s1_agent_rf_source_valid),                            //          .valid
		.in_ready          (vga_s1_agent_rf_source_ready),                            //          .ready
		.in_startofpacket  (vga_s1_agent_rf_source_startofpacket),                    //          .startofpacket
		.in_endofpacket    (vga_s1_agent_rf_source_endofpacket),                      //          .endofpacket
		.out_data          (vga_s1_agent_rsp_fifo_out_data),                          //       out.data
		.out_valid         (vga_s1_agent_rsp_fifo_out_valid),                         //          .valid
		.out_ready         (vga_s1_agent_rsp_fifo_out_ready),                         //          .ready
		.out_startofpacket (vga_s1_agent_rsp_fifo_out_startofpacket),                 //          .startofpacket
		.out_endofpacket   (vga_s1_agent_rsp_fifo_out_endofpacket),                   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_TRANS_LOCK            (37),
		.PKT_BEGIN_BURST           (64),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (48),
		.PKT_BYTE_CNT_H            (47),
		.PKT_BYTE_CNT_L            (39),
		.PKT_ADDR_H                (32),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (33),
		.PKT_TRANS_POSTED          (34),
		.PKT_TRANS_WRITE           (35),
		.PKT_TRANS_READ            (36),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (70),
		.PKT_SRC_ID_L              (66),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (71),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (89),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) usb_s1_agent (
		.clk                     (clk_peri_clk_clk),                                        //             clk.clk
		.reset                   (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (usb_s1_agent_m0_address),                                 //              m0.address
		.m0_burstcount           (usb_s1_agent_m0_burstcount),                              //                .burstcount
		.m0_byteenable           (usb_s1_agent_m0_byteenable),                              //                .byteenable
		.m0_debugaccess          (usb_s1_agent_m0_debugaccess),                             //                .debugaccess
		.m0_lock                 (usb_s1_agent_m0_lock),                                    //                .lock
		.m0_readdata             (usb_s1_agent_m0_readdata),                                //                .readdata
		.m0_readdatavalid        (usb_s1_agent_m0_readdatavalid),                           //                .readdatavalid
		.m0_read                 (usb_s1_agent_m0_read),                                    //                .read
		.m0_waitrequest          (usb_s1_agent_m0_waitrequest),                             //                .waitrequest
		.m0_writedata            (usb_s1_agent_m0_writedata),                               //                .writedata
		.m0_write                (usb_s1_agent_m0_write),                                   //                .write
		.rp_endofpacket          (usb_s1_agent_rp_endofpacket),                             //              rp.endofpacket
		.rp_ready                (usb_s1_agent_rp_ready),                                   //                .ready
		.rp_valid                (usb_s1_agent_rp_valid),                                   //                .valid
		.rp_data                 (usb_s1_agent_rp_data),                                    //                .data
		.rp_startofpacket        (usb_s1_agent_rp_startofpacket),                           //                .startofpacket
		.cp_ready                (usb_s1_burst_adapter_source0_ready),                      //              cp.ready
		.cp_valid                (usb_s1_burst_adapter_source0_valid),                      //                .valid
		.cp_data                 (usb_s1_burst_adapter_source0_data),                       //                .data
		.cp_startofpacket        (usb_s1_burst_adapter_source0_startofpacket),              //                .startofpacket
		.cp_endofpacket          (usb_s1_burst_adapter_source0_endofpacket),                //                .endofpacket
		.cp_channel              (usb_s1_burst_adapter_source0_channel),                    //                .channel
		.rf_sink_ready           (usb_s1_agent_rsp_fifo_out_ready),                         //         rf_sink.ready
		.rf_sink_valid           (usb_s1_agent_rsp_fifo_out_valid),                         //                .valid
		.rf_sink_startofpacket   (usb_s1_agent_rsp_fifo_out_startofpacket),                 //                .startofpacket
		.rf_sink_endofpacket     (usb_s1_agent_rsp_fifo_out_endofpacket),                   //                .endofpacket
		.rf_sink_data            (usb_s1_agent_rsp_fifo_out_data),                          //                .data
		.rf_source_ready         (usb_s1_agent_rf_source_ready),                            //       rf_source.ready
		.rf_source_valid         (usb_s1_agent_rf_source_valid),                            //                .valid
		.rf_source_startofpacket (usb_s1_agent_rf_source_startofpacket),                    //                .startofpacket
		.rf_source_endofpacket   (usb_s1_agent_rf_source_endofpacket),                      //                .endofpacket
		.rf_source_data          (usb_s1_agent_rf_source_data),                             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (usb_s1_agent_rdata_fifo_src_ready),                       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (usb_s1_agent_rdata_fifo_src_valid),                       //                .valid
		.rdata_fifo_src_data     (usb_s1_agent_rdata_fifo_src_data),                        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (90),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) usb_s1_agent_rsp_fifo (
		.clk               (clk_peri_clk_clk),                                        //       clk.clk
		.reset             (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (usb_s1_agent_rf_source_data),                             //        in.data
		.in_valid          (usb_s1_agent_rf_source_valid),                            //          .valid
		.in_ready          (usb_s1_agent_rf_source_ready),                            //          .ready
		.in_startofpacket  (usb_s1_agent_rf_source_startofpacket),                    //          .startofpacket
		.in_endofpacket    (usb_s1_agent_rf_source_endofpacket),                      //          .endofpacket
		.out_data          (usb_s1_agent_rsp_fifo_out_data),                          //       out.data
		.out_valid         (usb_s1_agent_rsp_fifo_out_valid),                         //          .valid
		.out_ready         (usb_s1_agent_rsp_fifo_out_ready),                         //          .ready
		.out_startofpacket (usb_s1_agent_rsp_fifo_out_startofpacket),                 //          .startofpacket
		.out_endofpacket   (usb_s1_agent_rsp_fifo_out_endofpacket),                   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_TRANS_LOCK            (64),
		.PKT_BEGIN_BURST           (91),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (66),
		.PKT_ADDR_H                (59),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (60),
		.PKT_TRANS_POSTED          (61),
		.PKT_TRANS_WRITE           (62),
		.PKT_TRANS_READ            (63),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (98),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) systimer_s1_agent (
		.clk                     (clk_peri_clk_clk),                                        //             clk.clk
		.reset                   (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (systimer_s1_agent_m0_address),                            //              m0.address
		.m0_burstcount           (systimer_s1_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (systimer_s1_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (systimer_s1_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (systimer_s1_agent_m0_lock),                               //                .lock
		.m0_readdata             (systimer_s1_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (systimer_s1_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (systimer_s1_agent_m0_read),                               //                .read
		.m0_waitrequest          (systimer_s1_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (systimer_s1_agent_m0_writedata),                          //                .writedata
		.m0_write                (systimer_s1_agent_m0_write),                              //                .write
		.rp_endofpacket          (systimer_s1_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (systimer_s1_agent_rp_ready),                              //                .ready
		.rp_valid                (systimer_s1_agent_rp_valid),                              //                .valid
		.rp_data                 (systimer_s1_agent_rp_data),                               //                .data
		.rp_startofpacket        (systimer_s1_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                                 //                .channel
		.rf_sink_ready           (systimer_s1_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (systimer_s1_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (systimer_s1_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (systimer_s1_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (systimer_s1_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (systimer_s1_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (systimer_s1_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (systimer_s1_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (systimer_s1_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (systimer_s1_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (systimer_s1_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (systimer_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (systimer_s1_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) systimer_s1_agent_rsp_fifo (
		.clk               (clk_peri_clk_clk),                                        //       clk.clk
		.reset             (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (systimer_s1_agent_rf_source_data),                        //        in.data
		.in_valid          (systimer_s1_agent_rf_source_valid),                       //          .valid
		.in_ready          (systimer_s1_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (systimer_s1_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (systimer_s1_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (systimer_s1_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (systimer_s1_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (systimer_s1_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (systimer_s1_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (systimer_s1_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_TRANS_LOCK            (64),
		.PKT_BEGIN_BURST           (91),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (66),
		.PKT_ADDR_H                (59),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (60),
		.PKT_TRANS_POSTED          (61),
		.PKT_TRANS_WRITE           (62),
		.PKT_TRANS_READ            (63),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (98),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_s1_agent (
		.clk                     (clk_peri_clk_clk),                                        //             clk.clk
		.reset                   (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (led_s1_agent_m0_address),                                 //              m0.address
		.m0_burstcount           (led_s1_agent_m0_burstcount),                              //                .burstcount
		.m0_byteenable           (led_s1_agent_m0_byteenable),                              //                .byteenable
		.m0_debugaccess          (led_s1_agent_m0_debugaccess),                             //                .debugaccess
		.m0_lock                 (led_s1_agent_m0_lock),                                    //                .lock
		.m0_readdata             (led_s1_agent_m0_readdata),                                //                .readdata
		.m0_readdatavalid        (led_s1_agent_m0_readdatavalid),                           //                .readdatavalid
		.m0_read                 (led_s1_agent_m0_read),                                    //                .read
		.m0_waitrequest          (led_s1_agent_m0_waitrequest),                             //                .waitrequest
		.m0_writedata            (led_s1_agent_m0_writedata),                               //                .writedata
		.m0_write                (led_s1_agent_m0_write),                                   //                .write
		.rp_endofpacket          (led_s1_agent_rp_endofpacket),                             //              rp.endofpacket
		.rp_ready                (led_s1_agent_rp_ready),                                   //                .ready
		.rp_valid                (led_s1_agent_rp_valid),                                   //                .valid
		.rp_data                 (led_s1_agent_rp_data),                                    //                .data
		.rp_startofpacket        (led_s1_agent_rp_startofpacket),                           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                                 //                .channel
		.rf_sink_ready           (led_s1_agent_rsp_fifo_out_ready),                         //         rf_sink.ready
		.rf_sink_valid           (led_s1_agent_rsp_fifo_out_valid),                         //                .valid
		.rf_sink_startofpacket   (led_s1_agent_rsp_fifo_out_startofpacket),                 //                .startofpacket
		.rf_sink_endofpacket     (led_s1_agent_rsp_fifo_out_endofpacket),                   //                .endofpacket
		.rf_sink_data            (led_s1_agent_rsp_fifo_out_data),                          //                .data
		.rf_source_ready         (led_s1_agent_rf_source_ready),                            //       rf_source.ready
		.rf_source_valid         (led_s1_agent_rf_source_valid),                            //                .valid
		.rf_source_startofpacket (led_s1_agent_rf_source_startofpacket),                    //                .startofpacket
		.rf_source_endofpacket   (led_s1_agent_rf_source_endofpacket),                      //                .endofpacket
		.rf_source_data          (led_s1_agent_rf_source_data),                             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (led_s1_agent_rdata_fifo_src_ready),                       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_s1_agent_rdata_fifo_src_valid),                       //                .valid
		.rdata_fifo_src_data     (led_s1_agent_rdata_fifo_src_data),                        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_s1_agent_rsp_fifo (
		.clk               (clk_peri_clk_clk),                                        //       clk.clk
		.reset             (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_s1_agent_rf_source_data),                             //        in.data
		.in_valid          (led_s1_agent_rf_source_valid),                            //          .valid
		.in_ready          (led_s1_agent_rf_source_ready),                            //          .ready
		.in_startofpacket  (led_s1_agent_rf_source_startofpacket),                    //          .startofpacket
		.in_endofpacket    (led_s1_agent_rf_source_endofpacket),                      //          .endofpacket
		.out_data          (led_s1_agent_rsp_fifo_out_data),                          //       out.data
		.out_valid         (led_s1_agent_rsp_fifo_out_valid),                         //          .valid
		.out_ready         (led_s1_agent_rsp_fifo_out_ready),                         //          .ready
		.out_startofpacket (led_s1_agent_rsp_fifo_out_startofpacket),                 //          .startofpacket
		.out_endofpacket   (led_s1_agent_rsp_fifo_out_endofpacket),                   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_TRANS_LOCK            (64),
		.PKT_BEGIN_BURST           (91),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (66),
		.PKT_ADDR_H                (59),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (60),
		.PKT_TRANS_POSTED          (61),
		.PKT_TRANS_WRITE           (62),
		.PKT_TRANS_READ            (63),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (98),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_7seg_0_s1_agent (
		.clk                     (clk_peri_clk_clk),                                        //             clk.clk
		.reset                   (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (led_7seg_0_s1_agent_m0_address),                          //              m0.address
		.m0_burstcount           (led_7seg_0_s1_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (led_7seg_0_s1_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (led_7seg_0_s1_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (led_7seg_0_s1_agent_m0_lock),                             //                .lock
		.m0_readdata             (led_7seg_0_s1_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (led_7seg_0_s1_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (led_7seg_0_s1_agent_m0_read),                             //                .read
		.m0_waitrequest          (led_7seg_0_s1_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (led_7seg_0_s1_agent_m0_writedata),                        //                .writedata
		.m0_write                (led_7seg_0_s1_agent_m0_write),                            //                .write
		.rp_endofpacket          (led_7seg_0_s1_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (led_7seg_0_s1_agent_rp_ready),                            //                .ready
		.rp_valid                (led_7seg_0_s1_agent_rp_valid),                            //                .valid
		.rp_data                 (led_7seg_0_s1_agent_rp_data),                             //                .data
		.rp_startofpacket        (led_7seg_0_s1_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                                 //                .channel
		.rf_sink_ready           (led_7seg_0_s1_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (led_7seg_0_s1_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (led_7seg_0_s1_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (led_7seg_0_s1_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (led_7seg_0_s1_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (led_7seg_0_s1_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (led_7seg_0_s1_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (led_7seg_0_s1_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (led_7seg_0_s1_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (led_7seg_0_s1_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (led_7seg_0_s1_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_7seg_0_s1_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (led_7seg_0_s1_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_7seg_0_s1_agent_rsp_fifo (
		.clk               (clk_peri_clk_clk),                                        //       clk.clk
		.reset             (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_7seg_0_s1_agent_rf_source_data),                      //        in.data
		.in_valid          (led_7seg_0_s1_agent_rf_source_valid),                     //          .valid
		.in_ready          (led_7seg_0_s1_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (led_7seg_0_s1_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (led_7seg_0_s1_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (led_7seg_0_s1_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (led_7seg_0_s1_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (led_7seg_0_s1_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (led_7seg_0_s1_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (led_7seg_0_s1_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_TRANS_LOCK            (64),
		.PKT_BEGIN_BURST           (91),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (66),
		.PKT_ADDR_H                (59),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (60),
		.PKT_TRANS_POSTED          (61),
		.PKT_TRANS_WRITE           (62),
		.PKT_TRANS_READ            (63),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (98),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_7seg_1_s1_agent (
		.clk                     (clk_peri_clk_clk),                                        //             clk.clk
		.reset                   (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (led_7seg_1_s1_agent_m0_address),                          //              m0.address
		.m0_burstcount           (led_7seg_1_s1_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (led_7seg_1_s1_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (led_7seg_1_s1_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (led_7seg_1_s1_agent_m0_lock),                             //                .lock
		.m0_readdata             (led_7seg_1_s1_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (led_7seg_1_s1_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (led_7seg_1_s1_agent_m0_read),                             //                .read
		.m0_waitrequest          (led_7seg_1_s1_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (led_7seg_1_s1_agent_m0_writedata),                        //                .writedata
		.m0_write                (led_7seg_1_s1_agent_m0_write),                            //                .write
		.rp_endofpacket          (led_7seg_1_s1_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (led_7seg_1_s1_agent_rp_ready),                            //                .ready
		.rp_valid                (led_7seg_1_s1_agent_rp_valid),                            //                .valid
		.rp_data                 (led_7seg_1_s1_agent_rp_data),                             //                .data
		.rp_startofpacket        (led_7seg_1_s1_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_011_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                                 //                .channel
		.rf_sink_ready           (led_7seg_1_s1_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (led_7seg_1_s1_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (led_7seg_1_s1_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (led_7seg_1_s1_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (led_7seg_1_s1_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (led_7seg_1_s1_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (led_7seg_1_s1_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (led_7seg_1_s1_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (led_7seg_1_s1_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (led_7seg_1_s1_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (led_7seg_1_s1_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_7seg_1_s1_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (led_7seg_1_s1_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_7seg_1_s1_agent_rsp_fifo (
		.clk               (clk_peri_clk_clk),                                        //       clk.clk
		.reset             (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_7seg_1_s1_agent_rf_source_data),                      //        in.data
		.in_valid          (led_7seg_1_s1_agent_rf_source_valid),                     //          .valid
		.in_ready          (led_7seg_1_s1_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (led_7seg_1_s1_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (led_7seg_1_s1_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (led_7seg_1_s1_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (led_7seg_1_s1_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (led_7seg_1_s1_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (led_7seg_1_s1_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (led_7seg_1_s1_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_TRANS_LOCK            (64),
		.PKT_BEGIN_BURST           (91),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (66),
		.PKT_ADDR_H                (59),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (60),
		.PKT_TRANS_POSTED          (61),
		.PKT_TRANS_WRITE           (62),
		.PKT_TRANS_READ            (63),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (98),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_7seg_2_s1_agent (
		.clk                     (clk_peri_clk_clk),                                        //             clk.clk
		.reset                   (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (led_7seg_2_s1_agent_m0_address),                          //              m0.address
		.m0_burstcount           (led_7seg_2_s1_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (led_7seg_2_s1_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (led_7seg_2_s1_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (led_7seg_2_s1_agent_m0_lock),                             //                .lock
		.m0_readdata             (led_7seg_2_s1_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (led_7seg_2_s1_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (led_7seg_2_s1_agent_m0_read),                             //                .read
		.m0_waitrequest          (led_7seg_2_s1_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (led_7seg_2_s1_agent_m0_writedata),                        //                .writedata
		.m0_write                (led_7seg_2_s1_agent_m0_write),                            //                .write
		.rp_endofpacket          (led_7seg_2_s1_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (led_7seg_2_s1_agent_rp_ready),                            //                .ready
		.rp_valid                (led_7seg_2_s1_agent_rp_valid),                            //                .valid
		.rp_data                 (led_7seg_2_s1_agent_rp_data),                             //                .data
		.rp_startofpacket        (led_7seg_2_s1_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_012_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                                 //                .channel
		.rf_sink_ready           (led_7seg_2_s1_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (led_7seg_2_s1_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (led_7seg_2_s1_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (led_7seg_2_s1_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (led_7seg_2_s1_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (led_7seg_2_s1_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (led_7seg_2_s1_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (led_7seg_2_s1_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (led_7seg_2_s1_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (led_7seg_2_s1_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (led_7seg_2_s1_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_7seg_2_s1_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (led_7seg_2_s1_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_7seg_2_s1_agent_rsp_fifo (
		.clk               (clk_peri_clk_clk),                                        //       clk.clk
		.reset             (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_7seg_2_s1_agent_rf_source_data),                      //        in.data
		.in_valid          (led_7seg_2_s1_agent_rf_source_valid),                     //          .valid
		.in_ready          (led_7seg_2_s1_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (led_7seg_2_s1_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (led_7seg_2_s1_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (led_7seg_2_s1_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (led_7seg_2_s1_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (led_7seg_2_s1_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (led_7seg_2_s1_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (led_7seg_2_s1_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_TRANS_LOCK            (64),
		.PKT_BEGIN_BURST           (91),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (66),
		.PKT_ADDR_H                (59),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (60),
		.PKT_TRANS_POSTED          (61),
		.PKT_TRANS_WRITE           (62),
		.PKT_TRANS_READ            (63),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (98),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) psw_s1_agent (
		.clk                     (clk_peri_clk_clk),                                        //             clk.clk
		.reset                   (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (psw_s1_agent_m0_address),                                 //              m0.address
		.m0_burstcount           (psw_s1_agent_m0_burstcount),                              //                .burstcount
		.m0_byteenable           (psw_s1_agent_m0_byteenable),                              //                .byteenable
		.m0_debugaccess          (psw_s1_agent_m0_debugaccess),                             //                .debugaccess
		.m0_lock                 (psw_s1_agent_m0_lock),                                    //                .lock
		.m0_readdata             (psw_s1_agent_m0_readdata),                                //                .readdata
		.m0_readdatavalid        (psw_s1_agent_m0_readdatavalid),                           //                .readdatavalid
		.m0_read                 (psw_s1_agent_m0_read),                                    //                .read
		.m0_waitrequest          (psw_s1_agent_m0_waitrequest),                             //                .waitrequest
		.m0_writedata            (psw_s1_agent_m0_writedata),                               //                .writedata
		.m0_write                (psw_s1_agent_m0_write),                                   //                .write
		.rp_endofpacket          (psw_s1_agent_rp_endofpacket),                             //              rp.endofpacket
		.rp_ready                (psw_s1_agent_rp_ready),                                   //                .ready
		.rp_valid                (psw_s1_agent_rp_valid),                                   //                .valid
		.rp_data                 (psw_s1_agent_rp_data),                                    //                .data
		.rp_startofpacket        (psw_s1_agent_rp_startofpacket),                           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_013_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                                 //                .channel
		.rf_sink_ready           (psw_s1_agent_rsp_fifo_out_ready),                         //         rf_sink.ready
		.rf_sink_valid           (psw_s1_agent_rsp_fifo_out_valid),                         //                .valid
		.rf_sink_startofpacket   (psw_s1_agent_rsp_fifo_out_startofpacket),                 //                .startofpacket
		.rf_sink_endofpacket     (psw_s1_agent_rsp_fifo_out_endofpacket),                   //                .endofpacket
		.rf_sink_data            (psw_s1_agent_rsp_fifo_out_data),                          //                .data
		.rf_source_ready         (psw_s1_agent_rf_source_ready),                            //       rf_source.ready
		.rf_source_valid         (psw_s1_agent_rf_source_valid),                            //                .valid
		.rf_source_startofpacket (psw_s1_agent_rf_source_startofpacket),                    //                .startofpacket
		.rf_source_endofpacket   (psw_s1_agent_rf_source_endofpacket),                      //                .endofpacket
		.rf_source_data          (psw_s1_agent_rf_source_data),                             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (psw_s1_agent_rdata_fifo_src_ready),                       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (psw_s1_agent_rdata_fifo_src_valid),                       //                .valid
		.rdata_fifo_src_data     (psw_s1_agent_rdata_fifo_src_data),                        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) psw_s1_agent_rsp_fifo (
		.clk               (clk_peri_clk_clk),                                        //       clk.clk
		.reset             (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (psw_s1_agent_rf_source_data),                             //        in.data
		.in_valid          (psw_s1_agent_rf_source_valid),                            //          .valid
		.in_ready          (psw_s1_agent_rf_source_ready),                            //          .ready
		.in_startofpacket  (psw_s1_agent_rf_source_startofpacket),                    //          .startofpacket
		.in_endofpacket    (psw_s1_agent_rf_source_endofpacket),                      //          .endofpacket
		.out_data          (psw_s1_agent_rsp_fifo_out_data),                          //       out.data
		.out_valid         (psw_s1_agent_rsp_fifo_out_valid),                         //          .valid
		.out_ready         (psw_s1_agent_rsp_fifo_out_ready),                         //          .ready
		.out_startofpacket (psw_s1_agent_rsp_fifo_out_startofpacket),                 //          .startofpacket
		.out_endofpacket   (psw_s1_agent_rsp_fifo_out_endofpacket),                   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_TRANS_LOCK            (64),
		.PKT_BEGIN_BURST           (91),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (66),
		.PKT_ADDR_H                (59),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (60),
		.PKT_TRANS_POSTED          (61),
		.PKT_TRANS_WRITE           (62),
		.PKT_TRANS_READ            (63),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (98),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dipsw_s1_agent (
		.clk                     (clk_peri_clk_clk),                                        //             clk.clk
		.reset                   (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (dipsw_s1_agent_m0_address),                               //              m0.address
		.m0_burstcount           (dipsw_s1_agent_m0_burstcount),                            //                .burstcount
		.m0_byteenable           (dipsw_s1_agent_m0_byteenable),                            //                .byteenable
		.m0_debugaccess          (dipsw_s1_agent_m0_debugaccess),                           //                .debugaccess
		.m0_lock                 (dipsw_s1_agent_m0_lock),                                  //                .lock
		.m0_readdata             (dipsw_s1_agent_m0_readdata),                              //                .readdata
		.m0_readdatavalid        (dipsw_s1_agent_m0_readdatavalid),                         //                .readdatavalid
		.m0_read                 (dipsw_s1_agent_m0_read),                                  //                .read
		.m0_waitrequest          (dipsw_s1_agent_m0_waitrequest),                           //                .waitrequest
		.m0_writedata            (dipsw_s1_agent_m0_writedata),                             //                .writedata
		.m0_write                (dipsw_s1_agent_m0_write),                                 //                .write
		.rp_endofpacket          (dipsw_s1_agent_rp_endofpacket),                           //              rp.endofpacket
		.rp_ready                (dipsw_s1_agent_rp_ready),                                 //                .ready
		.rp_valid                (dipsw_s1_agent_rp_valid),                                 //                .valid
		.rp_data                 (dipsw_s1_agent_rp_data),                                  //                .data
		.rp_startofpacket        (dipsw_s1_agent_rp_startofpacket),                         //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_014_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                                 //                .channel
		.rf_sink_ready           (dipsw_s1_agent_rsp_fifo_out_ready),                       //         rf_sink.ready
		.rf_sink_valid           (dipsw_s1_agent_rsp_fifo_out_valid),                       //                .valid
		.rf_sink_startofpacket   (dipsw_s1_agent_rsp_fifo_out_startofpacket),               //                .startofpacket
		.rf_sink_endofpacket     (dipsw_s1_agent_rsp_fifo_out_endofpacket),                 //                .endofpacket
		.rf_sink_data            (dipsw_s1_agent_rsp_fifo_out_data),                        //                .data
		.rf_source_ready         (dipsw_s1_agent_rf_source_ready),                          //       rf_source.ready
		.rf_source_valid         (dipsw_s1_agent_rf_source_valid),                          //                .valid
		.rf_source_startofpacket (dipsw_s1_agent_rf_source_startofpacket),                  //                .startofpacket
		.rf_source_endofpacket   (dipsw_s1_agent_rf_source_endofpacket),                    //                .endofpacket
		.rf_source_data          (dipsw_s1_agent_rf_source_data),                           //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (dipsw_s1_agent_rdata_fifo_src_ready),                     //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dipsw_s1_agent_rdata_fifo_src_valid),                     //                .valid
		.rdata_fifo_src_data     (dipsw_s1_agent_rdata_fifo_src_data),                      //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dipsw_s1_agent_rsp_fifo (
		.clk               (clk_peri_clk_clk),                                        //       clk.clk
		.reset             (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (dipsw_s1_agent_rf_source_data),                           //        in.data
		.in_valid          (dipsw_s1_agent_rf_source_valid),                          //          .valid
		.in_ready          (dipsw_s1_agent_rf_source_ready),                          //          .ready
		.in_startofpacket  (dipsw_s1_agent_rf_source_startofpacket),                  //          .startofpacket
		.in_endofpacket    (dipsw_s1_agent_rf_source_endofpacket),                    //          .endofpacket
		.out_data          (dipsw_s1_agent_rsp_fifo_out_data),                        //       out.data
		.out_valid         (dipsw_s1_agent_rsp_fifo_out_valid),                       //          .valid
		.out_ready         (dipsw_s1_agent_rsp_fifo_out_ready),                       //          .ready
		.out_startofpacket (dipsw_s1_agent_rsp_fifo_out_startofpacket),               //          .startofpacket
		.out_endofpacket   (dipsw_s1_agent_rsp_fifo_out_endofpacket),                 //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_TRANS_LOCK            (64),
		.PKT_BEGIN_BURST           (91),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (66),
		.PKT_ADDR_H                (59),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (60),
		.PKT_TRANS_POSTED          (61),
		.PKT_TRANS_WRITE           (62),
		.PKT_TRANS_READ            (63),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (98),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) gpio0_s1_agent (
		.clk                     (clk_peri_clk_clk),                                        //             clk.clk
		.reset                   (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (gpio0_s1_agent_m0_address),                               //              m0.address
		.m0_burstcount           (gpio0_s1_agent_m0_burstcount),                            //                .burstcount
		.m0_byteenable           (gpio0_s1_agent_m0_byteenable),                            //                .byteenable
		.m0_debugaccess          (gpio0_s1_agent_m0_debugaccess),                           //                .debugaccess
		.m0_lock                 (gpio0_s1_agent_m0_lock),                                  //                .lock
		.m0_readdata             (gpio0_s1_agent_m0_readdata),                              //                .readdata
		.m0_readdatavalid        (gpio0_s1_agent_m0_readdatavalid),                         //                .readdatavalid
		.m0_read                 (gpio0_s1_agent_m0_read),                                  //                .read
		.m0_waitrequest          (gpio0_s1_agent_m0_waitrequest),                           //                .waitrequest
		.m0_writedata            (gpio0_s1_agent_m0_writedata),                             //                .writedata
		.m0_write                (gpio0_s1_agent_m0_write),                                 //                .write
		.rp_endofpacket          (gpio0_s1_agent_rp_endofpacket),                           //              rp.endofpacket
		.rp_ready                (gpio0_s1_agent_rp_ready),                                 //                .ready
		.rp_valid                (gpio0_s1_agent_rp_valid),                                 //                .valid
		.rp_data                 (gpio0_s1_agent_rp_data),                                  //                .data
		.rp_startofpacket        (gpio0_s1_agent_rp_startofpacket),                         //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_015_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                                 //                .channel
		.rf_sink_ready           (gpio0_s1_agent_rsp_fifo_out_ready),                       //         rf_sink.ready
		.rf_sink_valid           (gpio0_s1_agent_rsp_fifo_out_valid),                       //                .valid
		.rf_sink_startofpacket   (gpio0_s1_agent_rsp_fifo_out_startofpacket),               //                .startofpacket
		.rf_sink_endofpacket     (gpio0_s1_agent_rsp_fifo_out_endofpacket),                 //                .endofpacket
		.rf_sink_data            (gpio0_s1_agent_rsp_fifo_out_data),                        //                .data
		.rf_source_ready         (gpio0_s1_agent_rf_source_ready),                          //       rf_source.ready
		.rf_source_valid         (gpio0_s1_agent_rf_source_valid),                          //                .valid
		.rf_source_startofpacket (gpio0_s1_agent_rf_source_startofpacket),                  //                .startofpacket
		.rf_source_endofpacket   (gpio0_s1_agent_rf_source_endofpacket),                    //                .endofpacket
		.rf_source_data          (gpio0_s1_agent_rf_source_data),                           //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (gpio0_s1_agent_rdata_fifo_src_ready),                     //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (gpio0_s1_agent_rdata_fifo_src_valid),                     //                .valid
		.rdata_fifo_src_data     (gpio0_s1_agent_rdata_fifo_src_data),                      //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) gpio0_s1_agent_rsp_fifo (
		.clk               (clk_peri_clk_clk),                                        //       clk.clk
		.reset             (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (gpio0_s1_agent_rf_source_data),                           //        in.data
		.in_valid          (gpio0_s1_agent_rf_source_valid),                          //          .valid
		.in_ready          (gpio0_s1_agent_rf_source_ready),                          //          .ready
		.in_startofpacket  (gpio0_s1_agent_rf_source_startofpacket),                  //          .startofpacket
		.in_endofpacket    (gpio0_s1_agent_rf_source_endofpacket),                    //          .endofpacket
		.out_data          (gpio0_s1_agent_rsp_fifo_out_data),                        //       out.data
		.out_valid         (gpio0_s1_agent_rsp_fifo_out_valid),                       //          .valid
		.out_ready         (gpio0_s1_agent_rsp_fifo_out_ready),                       //          .ready
		.out_startofpacket (gpio0_s1_agent_rsp_fifo_out_startofpacket),               //          .startofpacket
		.out_endofpacket   (gpio0_s1_agent_rsp_fifo_out_endofpacket),                 //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_TRANS_LOCK            (64),
		.PKT_BEGIN_BURST           (91),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (66),
		.PKT_ADDR_H                (59),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (60),
		.PKT_TRANS_POSTED          (61),
		.PKT_TRANS_WRITE           (62),
		.PKT_TRANS_READ            (63),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (98),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mmcdma_s1_agent (
		.clk                     (clk_peri_clk_clk),                                        //             clk.clk
		.reset                   (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (mmcdma_s1_agent_m0_address),                              //              m0.address
		.m0_burstcount           (mmcdma_s1_agent_m0_burstcount),                           //                .burstcount
		.m0_byteenable           (mmcdma_s1_agent_m0_byteenable),                           //                .byteenable
		.m0_debugaccess          (mmcdma_s1_agent_m0_debugaccess),                          //                .debugaccess
		.m0_lock                 (mmcdma_s1_agent_m0_lock),                                 //                .lock
		.m0_readdata             (mmcdma_s1_agent_m0_readdata),                             //                .readdata
		.m0_readdatavalid        (mmcdma_s1_agent_m0_readdatavalid),                        //                .readdatavalid
		.m0_read                 (mmcdma_s1_agent_m0_read),                                 //                .read
		.m0_waitrequest          (mmcdma_s1_agent_m0_waitrequest),                          //                .waitrequest
		.m0_writedata            (mmcdma_s1_agent_m0_writedata),                            //                .writedata
		.m0_write                (mmcdma_s1_agent_m0_write),                                //                .write
		.rp_endofpacket          (mmcdma_s1_agent_rp_endofpacket),                          //              rp.endofpacket
		.rp_ready                (mmcdma_s1_agent_rp_ready),                                //                .ready
		.rp_valid                (mmcdma_s1_agent_rp_valid),                                //                .valid
		.rp_data                 (mmcdma_s1_agent_rp_data),                                 //                .data
		.rp_startofpacket        (mmcdma_s1_agent_rp_startofpacket),                        //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_016_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                                 //                .channel
		.rf_sink_ready           (mmcdma_s1_agent_rsp_fifo_out_ready),                      //         rf_sink.ready
		.rf_sink_valid           (mmcdma_s1_agent_rsp_fifo_out_valid),                      //                .valid
		.rf_sink_startofpacket   (mmcdma_s1_agent_rsp_fifo_out_startofpacket),              //                .startofpacket
		.rf_sink_endofpacket     (mmcdma_s1_agent_rsp_fifo_out_endofpacket),                //                .endofpacket
		.rf_sink_data            (mmcdma_s1_agent_rsp_fifo_out_data),                       //                .data
		.rf_source_ready         (mmcdma_s1_agent_rf_source_ready),                         //       rf_source.ready
		.rf_source_valid         (mmcdma_s1_agent_rf_source_valid),                         //                .valid
		.rf_source_startofpacket (mmcdma_s1_agent_rf_source_startofpacket),                 //                .startofpacket
		.rf_source_endofpacket   (mmcdma_s1_agent_rf_source_endofpacket),                   //                .endofpacket
		.rf_source_data          (mmcdma_s1_agent_rf_source_data),                          //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (mmcdma_s1_agent_rdata_fifo_src_ready),                    //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mmcdma_s1_agent_rdata_fifo_src_valid),                    //                .valid
		.rdata_fifo_src_data     (mmcdma_s1_agent_rdata_fifo_src_data),                     //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mmcdma_s1_agent_rsp_fifo (
		.clk               (clk_peri_clk_clk),                                        //       clk.clk
		.reset             (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mmcdma_s1_agent_rf_source_data),                          //        in.data
		.in_valid          (mmcdma_s1_agent_rf_source_valid),                         //          .valid
		.in_ready          (mmcdma_s1_agent_rf_source_ready),                         //          .ready
		.in_startofpacket  (mmcdma_s1_agent_rf_source_startofpacket),                 //          .startofpacket
		.in_endofpacket    (mmcdma_s1_agent_rf_source_endofpacket),                   //          .endofpacket
		.out_data          (mmcdma_s1_agent_rsp_fifo_out_data),                       //       out.data
		.out_valid         (mmcdma_s1_agent_rsp_fifo_out_valid),                      //          .valid
		.out_ready         (mmcdma_s1_agent_rsp_fifo_out_ready),                      //          .ready
		.out_startofpacket (mmcdma_s1_agent_rsp_fifo_out_startofpacket),              //          .startofpacket
		.out_endofpacket   (mmcdma_s1_agent_rsp_fifo_out_endofpacket),                //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	cineraria_core_mm_interconnect_1_router router (
		.sink_ready         (peripherals_bridge_m0_agent_cp_ready),                    //      sink.ready
		.sink_valid         (peripherals_bridge_m0_agent_cp_valid),                    //          .valid
		.sink_data          (peripherals_bridge_m0_agent_cp_data),                     //          .data
		.sink_startofpacket (peripherals_bridge_m0_agent_cp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (peripherals_bridge_m0_agent_cp_endofpacket),              //          .endofpacket
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                        //       src.ready
		.src_valid          (router_src_valid),                                        //          .valid
		.src_data           (router_src_data),                                         //          .data
		.src_channel        (router_src_channel),                                      //          .channel
		.src_startofpacket  (router_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                   //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_router_001 router_001 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),              //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),              //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),               //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                    //       src.ready
		.src_valid          (router_001_src_valid),                                    //          .valid
		.src_data           (router_001_src_data),                                     //          .data
		.src_channel        (router_001_src_channel),                                  //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_router_001 router_002 (
		.sink_ready         (ps2_kb_avalon_ps2_slave_agent_rp_ready),                  //      sink.ready
		.sink_valid         (ps2_kb_avalon_ps2_slave_agent_rp_valid),                  //          .valid
		.sink_data          (ps2_kb_avalon_ps2_slave_agent_rp_data),                   //          .data
		.sink_startofpacket (ps2_kb_avalon_ps2_slave_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (ps2_kb_avalon_ps2_slave_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                    //       src.ready
		.src_valid          (router_002_src_valid),                                    //          .valid
		.src_data           (router_002_src_data),                                     //          .data
		.src_channel        (router_002_src_channel),                                  //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_router_001 router_003 (
		.sink_ready         (epcq_avl_csr_agent_rp_ready),                             //      sink.ready
		.sink_valid         (epcq_avl_csr_agent_rp_valid),                             //          .valid
		.sink_data          (epcq_avl_csr_agent_rp_data),                              //          .data
		.sink_startofpacket (epcq_avl_csr_agent_rp_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (epcq_avl_csr_agent_rp_endofpacket),                       //          .endofpacket
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                    //       src.ready
		.src_valid          (router_003_src_valid),                                    //          .valid
		.src_data           (router_003_src_data),                                     //          .data
		.src_channel        (router_003_src_channel),                                  //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_router_001 router_004 (
		.sink_ready         (epcq_avl_mem_agent_rp_ready),                             //      sink.ready
		.sink_valid         (epcq_avl_mem_agent_rp_valid),                             //          .valid
		.sink_data          (epcq_avl_mem_agent_rp_data),                              //          .data
		.sink_startofpacket (epcq_avl_mem_agent_rp_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (epcq_avl_mem_agent_rp_endofpacket),                       //          .endofpacket
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                    //       src.ready
		.src_valid          (router_004_src_valid),                                    //          .valid
		.src_data           (router_004_src_data),                                     //          .data
		.src_channel        (router_004_src_channel),                                  //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_router_001 router_005 (
		.sink_ready         (sysid_control_slave_agent_rp_ready),                      //      sink.ready
		.sink_valid         (sysid_control_slave_agent_rp_valid),                      //          .valid
		.sink_data          (sysid_control_slave_agent_rp_data),                       //          .data
		.sink_startofpacket (sysid_control_slave_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (sysid_control_slave_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                    //       src.ready
		.src_valid          (router_005_src_valid),                                    //          .valid
		.src_data           (router_005_src_data),                                     //          .data
		.src_channel        (router_005_src_channel),                                  //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_router_001 router_006 (
		.sink_ready         (pcm_s0_agent_rp_ready),                                   //      sink.ready
		.sink_valid         (pcm_s0_agent_rp_valid),                                   //          .valid
		.sink_data          (pcm_s0_agent_rp_data),                                    //          .data
		.sink_startofpacket (pcm_s0_agent_rp_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (pcm_s0_agent_rp_endofpacket),                             //          .endofpacket
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                    //       src.ready
		.src_valid          (router_006_src_valid),                                    //          .valid
		.src_data           (router_006_src_data),                                     //          .data
		.src_channel        (router_006_src_channel),                                  //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_router_001 router_007 (
		.sink_ready         (vga_s1_agent_rp_ready),                                   //      sink.ready
		.sink_valid         (vga_s1_agent_rp_valid),                                   //          .valid
		.sink_data          (vga_s1_agent_rp_data),                                    //          .data
		.sink_startofpacket (vga_s1_agent_rp_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (vga_s1_agent_rp_endofpacket),                             //          .endofpacket
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                    //       src.ready
		.src_valid          (router_007_src_valid),                                    //          .valid
		.src_data           (router_007_src_data),                                     //          .data
		.src_channel        (router_007_src_channel),                                  //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_router_008 router_008 (
		.sink_ready         (usb_s1_agent_rp_ready),                                   //      sink.ready
		.sink_valid         (usb_s1_agent_rp_valid),                                   //          .valid
		.sink_data          (usb_s1_agent_rp_data),                                    //          .data
		.sink_startofpacket (usb_s1_agent_rp_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (usb_s1_agent_rp_endofpacket),                             //          .endofpacket
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                    //       src.ready
		.src_valid          (router_008_src_valid),                                    //          .valid
		.src_data           (router_008_src_data),                                     //          .data
		.src_channel        (router_008_src_channel),                                  //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_router_001 router_009 (
		.sink_ready         (systimer_s1_agent_rp_ready),                              //      sink.ready
		.sink_valid         (systimer_s1_agent_rp_valid),                              //          .valid
		.sink_data          (systimer_s1_agent_rp_data),                               //          .data
		.sink_startofpacket (systimer_s1_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (systimer_s1_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                    //       src.ready
		.src_valid          (router_009_src_valid),                                    //          .valid
		.src_data           (router_009_src_data),                                     //          .data
		.src_channel        (router_009_src_channel),                                  //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_router_001 router_010 (
		.sink_ready         (led_s1_agent_rp_ready),                                   //      sink.ready
		.sink_valid         (led_s1_agent_rp_valid),                                   //          .valid
		.sink_data          (led_s1_agent_rp_data),                                    //          .data
		.sink_startofpacket (led_s1_agent_rp_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (led_s1_agent_rp_endofpacket),                             //          .endofpacket
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                                    //       src.ready
		.src_valid          (router_010_src_valid),                                    //          .valid
		.src_data           (router_010_src_data),                                     //          .data
		.src_channel        (router_010_src_channel),                                  //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_router_001 router_011 (
		.sink_ready         (led_7seg_0_s1_agent_rp_ready),                            //      sink.ready
		.sink_valid         (led_7seg_0_s1_agent_rp_valid),                            //          .valid
		.sink_data          (led_7seg_0_s1_agent_rp_data),                             //          .data
		.sink_startofpacket (led_7seg_0_s1_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (led_7seg_0_s1_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                                    //       src.ready
		.src_valid          (router_011_src_valid),                                    //          .valid
		.src_data           (router_011_src_data),                                     //          .data
		.src_channel        (router_011_src_channel),                                  //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_router_001 router_012 (
		.sink_ready         (led_7seg_1_s1_agent_rp_ready),                            //      sink.ready
		.sink_valid         (led_7seg_1_s1_agent_rp_valid),                            //          .valid
		.sink_data          (led_7seg_1_s1_agent_rp_data),                             //          .data
		.sink_startofpacket (led_7seg_1_s1_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (led_7seg_1_s1_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                                    //       src.ready
		.src_valid          (router_012_src_valid),                                    //          .valid
		.src_data           (router_012_src_data),                                     //          .data
		.src_channel        (router_012_src_channel),                                  //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_router_001 router_013 (
		.sink_ready         (led_7seg_2_s1_agent_rp_ready),                            //      sink.ready
		.sink_valid         (led_7seg_2_s1_agent_rp_valid),                            //          .valid
		.sink_data          (led_7seg_2_s1_agent_rp_data),                             //          .data
		.sink_startofpacket (led_7seg_2_s1_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (led_7seg_2_s1_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                                    //       src.ready
		.src_valid          (router_013_src_valid),                                    //          .valid
		.src_data           (router_013_src_data),                                     //          .data
		.src_channel        (router_013_src_channel),                                  //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_router_001 router_014 (
		.sink_ready         (psw_s1_agent_rp_ready),                                   //      sink.ready
		.sink_valid         (psw_s1_agent_rp_valid),                                   //          .valid
		.sink_data          (psw_s1_agent_rp_data),                                    //          .data
		.sink_startofpacket (psw_s1_agent_rp_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (psw_s1_agent_rp_endofpacket),                             //          .endofpacket
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                                    //       src.ready
		.src_valid          (router_014_src_valid),                                    //          .valid
		.src_data           (router_014_src_data),                                     //          .data
		.src_channel        (router_014_src_channel),                                  //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_router_001 router_015 (
		.sink_ready         (dipsw_s1_agent_rp_ready),                                 //      sink.ready
		.sink_valid         (dipsw_s1_agent_rp_valid),                                 //          .valid
		.sink_data          (dipsw_s1_agent_rp_data),                                  //          .data
		.sink_startofpacket (dipsw_s1_agent_rp_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (dipsw_s1_agent_rp_endofpacket),                           //          .endofpacket
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                                    //       src.ready
		.src_valid          (router_015_src_valid),                                    //          .valid
		.src_data           (router_015_src_data),                                     //          .data
		.src_channel        (router_015_src_channel),                                  //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_router_001 router_016 (
		.sink_ready         (gpio0_s1_agent_rp_ready),                                 //      sink.ready
		.sink_valid         (gpio0_s1_agent_rp_valid),                                 //          .valid
		.sink_data          (gpio0_s1_agent_rp_data),                                  //          .data
		.sink_startofpacket (gpio0_s1_agent_rp_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (gpio0_s1_agent_rp_endofpacket),                           //          .endofpacket
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                                    //       src.ready
		.src_valid          (router_016_src_valid),                                    //          .valid
		.src_data           (router_016_src_data),                                     //          .data
		.src_channel        (router_016_src_channel),                                  //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_router_001 router_017 (
		.sink_ready         (mmcdma_s1_agent_rp_ready),                                //      sink.ready
		.sink_valid         (mmcdma_s1_agent_rp_valid),                                //          .valid
		.sink_data          (mmcdma_s1_agent_rp_data),                                 //          .data
		.sink_startofpacket (mmcdma_s1_agent_rp_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (mmcdma_s1_agent_rp_endofpacket),                          //          .endofpacket
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                                    //       src.ready
		.src_valid          (router_017_src_valid),                                    //          .valid
		.src_data           (router_017_src_data),                                     //          .data
		.src_channel        (router_017_src_channel),                                  //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                               //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (98),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (93),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (66),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (61),
		.PKT_TRANS_WRITE           (62),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (17),
		.VALID_WIDTH               (17),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) peripherals_bridge_m0_limiter (
		.clk                    (clk_peri_clk_clk),                                        //       clk.clk
		.reset                  (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                        //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                        //          .valid
		.cmd_sink_data          (router_src_data),                                         //          .data
		.cmd_sink_channel       (router_src_channel),                                      //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                  //          .endofpacket
		.cmd_src_ready          (peripherals_bridge_m0_limiter_cmd_src_ready),             //   cmd_src.ready
		.cmd_src_data           (peripherals_bridge_m0_limiter_cmd_src_data),              //          .data
		.cmd_src_channel        (peripherals_bridge_m0_limiter_cmd_src_channel),           //          .channel
		.cmd_src_startofpacket  (peripherals_bridge_m0_limiter_cmd_src_startofpacket),     //          .startofpacket
		.cmd_src_endofpacket    (peripherals_bridge_m0_limiter_cmd_src_endofpacket),       //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                       //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                       //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                     //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                        //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                               //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                 //          .endofpacket
		.rsp_src_ready          (peripherals_bridge_m0_limiter_rsp_src_ready),             //   rsp_src.ready
		.rsp_src_valid          (peripherals_bridge_m0_limiter_rsp_src_valid),             //          .valid
		.rsp_src_data           (peripherals_bridge_m0_limiter_rsp_src_data),              //          .data
		.rsp_src_channel        (peripherals_bridge_m0_limiter_rsp_src_channel),           //          .channel
		.rsp_src_startofpacket  (peripherals_bridge_m0_limiter_rsp_src_startofpacket),     //          .startofpacket
		.rsp_src_endofpacket    (peripherals_bridge_m0_limiter_rsp_src_endofpacket),       //          .endofpacket
		.cmd_src_valid          (peripherals_bridge_m0_limiter_cmd_valid_data)             // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (32),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (64),
		.PKT_BYTE_CNT_H            (47),
		.PKT_BYTE_CNT_L            (39),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_BURST_TYPE_H          (61),
		.PKT_BURST_TYPE_L          (60),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (48),
		.PKT_TRANS_COMPRESSED_READ (33),
		.PKT_TRANS_WRITE           (35),
		.PKT_TRANS_READ            (36),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (89),
		.ST_CHANNEL_W              (17),
		.OUT_BYTE_CNT_H            (39),
		.OUT_BURSTWRAP_H           (56),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (511),
		.BURSTWRAP_CONST_VALUE     (511),
		.ADAPTER_VERSION           ("13.1")
	) usb_s1_burst_adapter (
		.clk                   (clk_peri_clk_clk),                                        //       cr0.clk
		.reset                 (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (usb_s1_cmd_width_adapter_src_valid),                      //     sink0.valid
		.sink0_data            (usb_s1_cmd_width_adapter_src_data),                       //          .data
		.sink0_channel         (usb_s1_cmd_width_adapter_src_channel),                    //          .channel
		.sink0_startofpacket   (usb_s1_cmd_width_adapter_src_startofpacket),              //          .startofpacket
		.sink0_endofpacket     (usb_s1_cmd_width_adapter_src_endofpacket),                //          .endofpacket
		.sink0_ready           (usb_s1_cmd_width_adapter_src_ready),                      //          .ready
		.source0_valid         (usb_s1_burst_adapter_source0_valid),                      //   source0.valid
		.source0_data          (usb_s1_burst_adapter_source0_data),                       //          .data
		.source0_channel       (usb_s1_burst_adapter_source0_channel),                    //          .channel
		.source0_startofpacket (usb_s1_burst_adapter_source0_startofpacket),              //          .startofpacket
		.source0_endofpacket   (usb_s1_burst_adapter_source0_endofpacket),                //          .endofpacket
		.source0_ready         (usb_s1_burst_adapter_source0_ready)                       //          .ready
	);

	cineraria_core_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                 (clk_peri_clk_clk),                                        //        clk.clk
		.reset               (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (peripherals_bridge_m0_limiter_cmd_src_ready),             //       sink.ready
		.sink_channel        (peripherals_bridge_m0_limiter_cmd_src_channel),           //           .channel
		.sink_data           (peripherals_bridge_m0_limiter_cmd_src_data),              //           .data
		.sink_startofpacket  (peripherals_bridge_m0_limiter_cmd_src_startofpacket),     //           .startofpacket
		.sink_endofpacket    (peripherals_bridge_m0_limiter_cmd_src_endofpacket),       //           .endofpacket
		.sink_valid          (peripherals_bridge_m0_limiter_cmd_valid_data),            // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                    //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                    //           .valid
		.src0_data           (cmd_demux_src0_data),                                     //           .data
		.src0_channel        (cmd_demux_src0_channel),                                  //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                            //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                              //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                    //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                    //           .valid
		.src1_data           (cmd_demux_src1_data),                                     //           .data
		.src1_channel        (cmd_demux_src1_channel),                                  //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                            //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                              //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                    //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                    //           .valid
		.src2_data           (cmd_demux_src2_data),                                     //           .data
		.src2_channel        (cmd_demux_src2_channel),                                  //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                            //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                              //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                    //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                    //           .valid
		.src3_data           (cmd_demux_src3_data),                                     //           .data
		.src3_channel        (cmd_demux_src3_channel),                                  //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                            //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                              //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                    //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                    //           .valid
		.src4_data           (cmd_demux_src4_data),                                     //           .data
		.src4_channel        (cmd_demux_src4_channel),                                  //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                            //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                              //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                    //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                    //           .valid
		.src5_data           (cmd_demux_src5_data),                                     //           .data
		.src5_channel        (cmd_demux_src5_channel),                                  //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                            //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                              //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                    //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                    //           .valid
		.src6_data           (cmd_demux_src6_data),                                     //           .data
		.src6_channel        (cmd_demux_src6_channel),                                  //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                            //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                              //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                    //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                    //           .valid
		.src7_data           (cmd_demux_src7_data),                                     //           .data
		.src7_channel        (cmd_demux_src7_channel),                                  //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                            //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                              //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                    //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                    //           .valid
		.src8_data           (cmd_demux_src8_data),                                     //           .data
		.src8_channel        (cmd_demux_src8_channel),                                  //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                            //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                              //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                    //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                    //           .valid
		.src9_data           (cmd_demux_src9_data),                                     //           .data
		.src9_channel        (cmd_demux_src9_channel),                                  //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                            //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                              //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                   //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                   //           .valid
		.src10_data          (cmd_demux_src10_data),                                    //           .data
		.src10_channel       (cmd_demux_src10_channel),                                 //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                           //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                             //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                                   //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                                   //           .valid
		.src11_data          (cmd_demux_src11_data),                                    //           .data
		.src11_channel       (cmd_demux_src11_channel),                                 //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                           //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                             //           .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                                   //      src12.ready
		.src12_valid         (cmd_demux_src12_valid),                                   //           .valid
		.src12_data          (cmd_demux_src12_data),                                    //           .data
		.src12_channel       (cmd_demux_src12_channel),                                 //           .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                           //           .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                             //           .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                                   //      src13.ready
		.src13_valid         (cmd_demux_src13_valid),                                   //           .valid
		.src13_data          (cmd_demux_src13_data),                                    //           .data
		.src13_channel       (cmd_demux_src13_channel),                                 //           .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                           //           .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                             //           .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                                   //      src14.ready
		.src14_valid         (cmd_demux_src14_valid),                                   //           .valid
		.src14_data          (cmd_demux_src14_data),                                    //           .data
		.src14_channel       (cmd_demux_src14_channel),                                 //           .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                           //           .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                             //           .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                                   //      src15.ready
		.src15_valid         (cmd_demux_src15_valid),                                   //           .valid
		.src15_data          (cmd_demux_src15_data),                                    //           .data
		.src15_channel       (cmd_demux_src15_channel),                                 //           .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                           //           .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                             //           .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                                   //      src16.ready
		.src16_valid         (cmd_demux_src16_valid),                                   //           .valid
		.src16_data          (cmd_demux_src16_data),                                    //           .data
		.src16_channel       (cmd_demux_src16_channel),                                 //           .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                           //           .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket)                              //           .endofpacket
	);

	cineraria_core_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (clk_peri_clk_clk),                                        //       clk.clk
		.reset               (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_src_valid),                                       //          .valid
		.src_data            (cmd_mux_src_data),                                        //          .data
		.src_channel         (cmd_mux_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                    //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                  //          .channel
		.sink0_data          (cmd_demux_src0_data),                                     //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_cmd_mux cmd_mux_001 (
		.clk                 (clk_peri_clk_clk),                                        //       clk.clk
		.reset               (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                   //          .valid
		.src_data            (cmd_mux_001_src_data),                                    //          .data
		.src_channel         (cmd_mux_001_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                    //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                  //          .channel
		.sink0_data          (cmd_demux_src1_data),                                     //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_cmd_mux cmd_mux_002 (
		.clk                 (clk_peri_clk_clk),                                        //       clk.clk
		.reset               (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                   //          .valid
		.src_data            (cmd_mux_002_src_data),                                    //          .data
		.src_channel         (cmd_mux_002_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                    //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                  //          .channel
		.sink0_data          (cmd_demux_src2_data),                                     //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_cmd_mux cmd_mux_003 (
		.clk                 (clk_peri_clk_clk),                                        //       clk.clk
		.reset               (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                   //          .valid
		.src_data            (cmd_mux_003_src_data),                                    //          .data
		.src_channel         (cmd_mux_003_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                    //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                                  //          .channel
		.sink0_data          (cmd_demux_src3_data),                                     //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_cmd_mux cmd_mux_004 (
		.clk                 (clk_peri_clk_clk),                                        //       clk.clk
		.reset               (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                   //          .valid
		.src_data            (cmd_mux_004_src_data),                                    //          .data
		.src_channel         (cmd_mux_004_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                    //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                                  //          .channel
		.sink0_data          (cmd_demux_src4_data),                                     //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_cmd_mux cmd_mux_005 (
		.clk                 (clk_peri_clk_clk),                                        //       clk.clk
		.reset               (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                   //          .valid
		.src_data            (cmd_mux_005_src_data),                                    //          .data
		.src_channel         (cmd_mux_005_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                                    //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                                  //          .channel
		.sink0_data          (cmd_demux_src5_data),                                     //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_cmd_mux cmd_mux_006 (
		.clk                 (clk_peri_clk_clk),                                        //       clk.clk
		.reset               (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                   //          .valid
		.src_data            (cmd_mux_006_src_data),                                    //          .data
		.src_channel         (cmd_mux_006_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                                    //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                                  //          .channel
		.sink0_data          (cmd_demux_src6_data),                                     //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_cmd_mux cmd_mux_007 (
		.clk                 (clk_peri_clk_clk),                                        //       clk.clk
		.reset               (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                   //          .valid
		.src_data            (cmd_mux_007_src_data),                                    //          .data
		.src_channel         (cmd_mux_007_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                                    //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                                  //          .channel
		.sink0_data          (cmd_demux_src7_data),                                     //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_cmd_mux cmd_mux_008 (
		.clk                 (clk_peri_clk_clk),                                        //       clk.clk
		.reset               (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                   //          .valid
		.src_data            (cmd_mux_008_src_data),                                    //          .data
		.src_channel         (cmd_mux_008_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                                    //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                                  //          .channel
		.sink0_data          (cmd_demux_src8_data),                                     //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_cmd_mux cmd_mux_009 (
		.clk                 (clk_peri_clk_clk),                                        //       clk.clk
		.reset               (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                   //          .valid
		.src_data            (cmd_mux_009_src_data),                                    //          .data
		.src_channel         (cmd_mux_009_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                                    //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                                  //          .channel
		.sink0_data          (cmd_demux_src9_data),                                     //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_cmd_mux cmd_mux_010 (
		.clk                 (clk_peri_clk_clk),                                        //       clk.clk
		.reset               (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                                   //          .valid
		.src_data            (cmd_mux_010_src_data),                                    //          .data
		.src_channel         (cmd_mux_010_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src10_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)                              //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_cmd_mux cmd_mux_011 (
		.clk                 (clk_peri_clk_clk),                                        //       clk.clk
		.reset               (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                                   //          .valid
		.src_data            (cmd_mux_011_src_data),                                    //          .data
		.src_channel         (cmd_mux_011_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src11_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)                              //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_cmd_mux cmd_mux_012 (
		.clk                 (clk_peri_clk_clk),                                        //       clk.clk
		.reset               (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                                   //          .valid
		.src_data            (cmd_mux_012_src_data),                                    //          .data
		.src_channel         (cmd_mux_012_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src12_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket)                              //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_cmd_mux cmd_mux_013 (
		.clk                 (clk_peri_clk_clk),                                        //       clk.clk
		.reset               (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                                   //          .valid
		.src_data            (cmd_mux_013_src_data),                                    //          .data
		.src_channel         (cmd_mux_013_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src13_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket)                              //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_cmd_mux cmd_mux_014 (
		.clk                 (clk_peri_clk_clk),                                        //       clk.clk
		.reset               (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                                   //          .valid
		.src_data            (cmd_mux_014_src_data),                                    //          .data
		.src_channel         (cmd_mux_014_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src14_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket)                              //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_cmd_mux cmd_mux_015 (
		.clk                 (clk_peri_clk_clk),                                        //       clk.clk
		.reset               (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                                   //          .valid
		.src_data            (cmd_mux_015_src_data),                                    //          .data
		.src_channel         (cmd_mux_015_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src15_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src15_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket)                              //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_cmd_mux cmd_mux_016 (
		.clk                 (clk_peri_clk_clk),                                        //       clk.clk
		.reset               (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                                   //          .valid
		.src_data            (cmd_mux_016_src_data),                                    //          .data
		.src_channel         (cmd_mux_016_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src16_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src16_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket)                              //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                    //      sink.ready
		.sink_channel       (router_001_src_channel),                                  //          .channel
		.sink_data          (router_001_src_data),                                     //          .data
		.sink_startofpacket (router_001_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_001_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                               //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_rsp_demux rsp_demux_001 (
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                    //      sink.ready
		.sink_channel       (router_002_src_channel),                                  //          .channel
		.sink_data          (router_002_src_data),                                     //          .data
		.sink_startofpacket (router_002_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_002_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                           //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_rsp_demux rsp_demux_002 (
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                    //      sink.ready
		.sink_channel       (router_003_src_channel),                                  //          .channel
		.sink_data          (router_003_src_data),                                     //          .data
		.sink_startofpacket (router_003_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_003_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                           //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_rsp_demux rsp_demux_003 (
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                    //      sink.ready
		.sink_channel       (router_004_src_channel),                                  //          .channel
		.sink_data          (router_004_src_data),                                     //          .data
		.sink_startofpacket (router_004_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_004_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                           //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_rsp_demux rsp_demux_004 (
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                    //      sink.ready
		.sink_channel       (router_005_src_channel),                                  //          .channel
		.sink_data          (router_005_src_data),                                     //          .data
		.sink_startofpacket (router_005_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_005_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                           //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_rsp_demux rsp_demux_005 (
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                    //      sink.ready
		.sink_channel       (router_006_src_channel),                                  //          .channel
		.sink_data          (router_006_src_data),                                     //          .data
		.sink_startofpacket (router_006_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_006_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                           //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_rsp_demux rsp_demux_006 (
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                    //      sink.ready
		.sink_channel       (router_007_src_channel),                                  //          .channel
		.sink_data          (router_007_src_data),                                     //          .data
		.sink_startofpacket (router_007_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_007_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_006_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                           //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_rsp_demux rsp_demux_007 (
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (usb_s1_rsp_width_adapter_src_ready),                      //      sink.ready
		.sink_channel       (usb_s1_rsp_width_adapter_src_channel),                    //          .channel
		.sink_data          (usb_s1_rsp_width_adapter_src_data),                       //          .data
		.sink_startofpacket (usb_s1_rsp_width_adapter_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (usb_s1_rsp_width_adapter_src_endofpacket),                //          .endofpacket
		.sink_valid         (usb_s1_rsp_width_adapter_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_007_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                           //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_rsp_demux rsp_demux_008 (
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                    //      sink.ready
		.sink_channel       (router_009_src_channel),                                  //          .channel
		.sink_data          (router_009_src_data),                                     //          .data
		.sink_startofpacket (router_009_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_009_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_008_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                           //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_rsp_demux rsp_demux_009 (
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                    //      sink.ready
		.sink_channel       (router_010_src_channel),                                  //          .channel
		.sink_data          (router_010_src_data),                                     //          .data
		.sink_startofpacket (router_010_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_010_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_009_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                           //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_rsp_demux rsp_demux_010 (
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                                    //      sink.ready
		.sink_channel       (router_011_src_channel),                                  //          .channel
		.sink_data          (router_011_src_data),                                     //          .data
		.sink_startofpacket (router_011_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_011_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_010_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                           //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_rsp_demux rsp_demux_011 (
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                                    //      sink.ready
		.sink_channel       (router_012_src_channel),                                  //          .channel
		.sink_data          (router_012_src_data),                                     //          .data
		.sink_startofpacket (router_012_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_012_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_011_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                           //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_rsp_demux rsp_demux_012 (
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                                    //      sink.ready
		.sink_channel       (router_013_src_channel),                                  //          .channel
		.sink_data          (router_013_src_data),                                     //          .data
		.sink_startofpacket (router_013_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_013_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_012_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                           //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_rsp_demux rsp_demux_013 (
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                                    //      sink.ready
		.sink_channel       (router_014_src_channel),                                  //          .channel
		.sink_data          (router_014_src_data),                                     //          .data
		.sink_startofpacket (router_014_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_014_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_013_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                           //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_rsp_demux rsp_demux_014 (
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                                    //      sink.ready
		.sink_channel       (router_015_src_channel),                                  //          .channel
		.sink_data          (router_015_src_data),                                     //          .data
		.sink_startofpacket (router_015_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_015_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_014_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                           //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_rsp_demux rsp_demux_015 (
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                                    //      sink.ready
		.sink_channel       (router_016_src_channel),                                  //          .channel
		.sink_data          (router_016_src_data),                                     //          .data
		.sink_startofpacket (router_016_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_016_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_015_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                           //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_rsp_demux rsp_demux_016 (
		.clk                (clk_peri_clk_clk),                                        //       clk.clk
		.reset              (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                                    //      sink.ready
		.sink_channel       (router_017_src_channel),                                  //          .channel
		.sink_data          (router_017_src_data),                                     //          .data
		.sink_startofpacket (router_017_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_017_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_016_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)                           //          .endofpacket
	);

	cineraria_core_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                  (clk_peri_clk_clk),                                        //       clk.clk
		.reset                (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                       //       src.ready
		.src_valid            (rsp_mux_src_valid),                                       //          .valid
		.src_data             (rsp_mux_src_data),                                        //          .data
		.src_channel          (rsp_mux_src_channel),                                     //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                               //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                                 //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                                    //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                                    //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                                  //          .channel
		.sink0_data           (rsp_demux_src0_data),                                     //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                            //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                              //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                                //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                                //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                              //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                                 //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                        //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                          //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                                //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                                //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                              //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                 //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                        //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                          //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                                //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                                //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                              //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                                 //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                        //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                          //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                                //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                                //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                              //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                 //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                        //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                          //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                              //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                 //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                        //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                          //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                              //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                 //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                        //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                          //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                                //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                                //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                              //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                 //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                        //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                          //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                                //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                                //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                              //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                                 //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                        //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                          //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                                //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                                //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                              //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                                 //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                        //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                          //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                                //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                                //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                              //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                 //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                        //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                          //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                                //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                                //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                              //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                                 //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                        //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                          //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                                //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                                //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                              //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                                 //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),                        //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),                          //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                                //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                                //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                              //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                                 //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),                        //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),                          //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                                //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                                //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                              //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                                 //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),                        //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),                          //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                                //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                                //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                              //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                                 //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),                        //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),                          //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                                //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                                //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),                              //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                                 //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),                        //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket)                           //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (32),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (47),
		.IN_PKT_BYTE_CNT_L             (39),
		.IN_PKT_TRANS_COMPRESSED_READ  (33),
		.IN_PKT_TRANS_WRITE            (35),
		.IN_PKT_BURSTWRAP_H            (56),
		.IN_PKT_BURSTWRAP_L            (48),
		.IN_PKT_BURST_SIZE_H           (59),
		.IN_PKT_BURST_SIZE_L           (57),
		.IN_PKT_RESPONSE_STATUS_H      (85),
		.IN_PKT_RESPONSE_STATUS_L      (84),
		.IN_PKT_TRANS_EXCLUSIVE        (38),
		.IN_PKT_BURST_TYPE_H           (61),
		.IN_PKT_BURST_TYPE_L           (60),
		.IN_PKT_ORI_BURST_SIZE_L       (86),
		.IN_PKT_ORI_BURST_SIZE_H       (88),
		.IN_ST_DATA_W                  (89),
		.OUT_PKT_ADDR_H                (59),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (74),
		.OUT_PKT_BYTE_CNT_L            (66),
		.OUT_PKT_TRANS_COMPRESSED_READ (60),
		.OUT_PKT_BURST_SIZE_H          (86),
		.OUT_PKT_BURST_SIZE_L          (84),
		.OUT_PKT_RESPONSE_STATUS_H     (112),
		.OUT_PKT_RESPONSE_STATUS_L     (111),
		.OUT_PKT_TRANS_EXCLUSIVE       (65),
		.OUT_PKT_BURST_TYPE_H          (88),
		.OUT_PKT_BURST_TYPE_L          (87),
		.OUT_PKT_ORI_BURST_SIZE_L      (113),
		.OUT_PKT_ORI_BURST_SIZE_H      (115),
		.OUT_ST_DATA_W                 (116),
		.ST_CHANNEL_W                  (17),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) usb_s1_rsp_width_adapter (
		.clk                  (clk_peri_clk_clk),                                        //       clk.clk
		.reset                (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_008_src_valid),                                    //      sink.valid
		.in_channel           (router_008_src_channel),                                  //          .channel
		.in_startofpacket     (router_008_src_startofpacket),                            //          .startofpacket
		.in_endofpacket       (router_008_src_endofpacket),                              //          .endofpacket
		.in_ready             (router_008_src_ready),                                    //          .ready
		.in_data              (router_008_src_data),                                     //          .data
		.out_endofpacket      (usb_s1_rsp_width_adapter_src_endofpacket),                //       src.endofpacket
		.out_data             (usb_s1_rsp_width_adapter_src_data),                       //          .data
		.out_channel          (usb_s1_rsp_width_adapter_src_channel),                    //          .channel
		.out_valid            (usb_s1_rsp_width_adapter_src_valid),                      //          .valid
		.out_ready            (usb_s1_rsp_width_adapter_src_ready),                      //          .ready
		.out_startofpacket    (usb_s1_rsp_width_adapter_src_startofpacket),              //          .startofpacket
		.in_command_size_data (3'b000)                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (59),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (74),
		.IN_PKT_BYTE_CNT_L             (66),
		.IN_PKT_TRANS_COMPRESSED_READ  (60),
		.IN_PKT_TRANS_WRITE            (62),
		.IN_PKT_BURSTWRAP_H            (83),
		.IN_PKT_BURSTWRAP_L            (75),
		.IN_PKT_BURST_SIZE_H           (86),
		.IN_PKT_BURST_SIZE_L           (84),
		.IN_PKT_RESPONSE_STATUS_H      (112),
		.IN_PKT_RESPONSE_STATUS_L      (111),
		.IN_PKT_TRANS_EXCLUSIVE        (65),
		.IN_PKT_BURST_TYPE_H           (88),
		.IN_PKT_BURST_TYPE_L           (87),
		.IN_PKT_ORI_BURST_SIZE_L       (113),
		.IN_PKT_ORI_BURST_SIZE_H       (115),
		.IN_ST_DATA_W                  (116),
		.OUT_PKT_ADDR_H                (32),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (47),
		.OUT_PKT_BYTE_CNT_L            (39),
		.OUT_PKT_TRANS_COMPRESSED_READ (33),
		.OUT_PKT_BURST_SIZE_H          (59),
		.OUT_PKT_BURST_SIZE_L          (57),
		.OUT_PKT_RESPONSE_STATUS_H     (85),
		.OUT_PKT_RESPONSE_STATUS_L     (84),
		.OUT_PKT_TRANS_EXCLUSIVE       (38),
		.OUT_PKT_BURST_TYPE_H          (61),
		.OUT_PKT_BURST_TYPE_L          (60),
		.OUT_PKT_ORI_BURST_SIZE_L      (86),
		.OUT_PKT_ORI_BURST_SIZE_H      (88),
		.OUT_ST_DATA_W                 (89),
		.ST_CHANNEL_W                  (17),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) usb_s1_cmd_width_adapter (
		.clk                  (clk_peri_clk_clk),                                        //       clk.clk
		.reset                (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_007_src_valid),                                   //      sink.valid
		.in_channel           (cmd_mux_007_src_channel),                                 //          .channel
		.in_startofpacket     (cmd_mux_007_src_startofpacket),                           //          .startofpacket
		.in_endofpacket       (cmd_mux_007_src_endofpacket),                             //          .endofpacket
		.in_ready             (cmd_mux_007_src_ready),                                   //          .ready
		.in_data              (cmd_mux_007_src_data),                                    //          .data
		.out_endofpacket      (usb_s1_cmd_width_adapter_src_endofpacket),                //       src.endofpacket
		.out_data             (usb_s1_cmd_width_adapter_src_data),                       //          .data
		.out_channel          (usb_s1_cmd_width_adapter_src_channel),                    //          .channel
		.out_valid            (usb_s1_cmd_width_adapter_src_valid),                      //          .valid
		.out_ready            (usb_s1_cmd_width_adapter_src_ready),                      //          .ready
		.out_startofpacket    (usb_s1_cmd_width_adapter_src_startofpacket),              //          .startofpacket
		.in_command_size_data (3'b000)                                                   // (terminated)
	);

	cineraria_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_peri_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),   //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),  //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                            //         .error
	);

	cineraria_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_peri_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ps2_kb_avalon_ps2_slave_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (ps2_kb_avalon_ps2_slave_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (ps2_kb_avalon_ps2_slave_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                        //         .error
	);

	cineraria_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_peri_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (epcq_avl_csr_agent_rdata_fifo_src_data),                  //     in_0.data
		.in_0_valid     (epcq_avl_csr_agent_rdata_fifo_src_valid),                 //         .valid
		.in_0_ready     (epcq_avl_csr_agent_rdata_fifo_src_ready),                 //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                        //         .error
	);

	cineraria_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_peri_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (epcq_avl_mem_agent_rdata_fifo_src_data),                  //     in_0.data
		.in_0_valid     (epcq_avl_mem_agent_rdata_fifo_src_valid),                 //         .valid
		.in_0_ready     (epcq_avl_mem_agent_rdata_fifo_src_ready),                 //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                        //         .error
	);

	cineraria_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_peri_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sysid_control_slave_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (sysid_control_slave_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (sysid_control_slave_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                        //         .error
	);

	cineraria_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_peri_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pcm_s0_agent_rdata_fifo_src_data),                        //     in_0.data
		.in_0_valid     (pcm_s0_agent_rdata_fifo_src_valid),                       //         .valid
		.in_0_ready     (pcm_s0_agent_rdata_fifo_src_ready),                       //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                        //         .error
	);

	cineraria_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_peri_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (vga_s1_agent_rdata_fifo_src_data),                        //     in_0.data
		.in_0_valid     (vga_s1_agent_rdata_fifo_src_valid),                       //         .valid
		.in_0_ready     (vga_s1_agent_rdata_fifo_src_ready),                       //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                        //         .error
	);

	cineraria_core_mm_interconnect_1_avalon_st_adapter_007 #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_peri_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (usb_s1_agent_rdata_fifo_src_data),                        //     in_0.data
		.in_0_valid     (usb_s1_agent_rdata_fifo_src_valid),                       //         .valid
		.in_0_ready     (usb_s1_agent_rdata_fifo_src_ready),                       //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                        //         .error
	);

	cineraria_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_peri_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (systimer_s1_agent_rdata_fifo_src_data),                   //     in_0.data
		.in_0_valid     (systimer_s1_agent_rdata_fifo_src_valid),                  //         .valid
		.in_0_ready     (systimer_s1_agent_rdata_fifo_src_ready),                  //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                        //         .error
	);

	cineraria_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_peri_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_s1_agent_rdata_fifo_src_data),                        //     in_0.data
		.in_0_valid     (led_s1_agent_rdata_fifo_src_valid),                       //         .valid
		.in_0_ready     (led_s1_agent_rdata_fifo_src_ready),                       //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                        //         .error
	);

	cineraria_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_peri_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_7seg_0_s1_agent_rdata_fifo_src_data),                 //     in_0.data
		.in_0_valid     (led_7seg_0_s1_agent_rdata_fifo_src_valid),                //         .valid
		.in_0_ready     (led_7seg_0_s1_agent_rdata_fifo_src_ready),                //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                        //         .error
	);

	cineraria_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_peri_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_7seg_1_s1_agent_rdata_fifo_src_data),                 //     in_0.data
		.in_0_valid     (led_7seg_1_s1_agent_rdata_fifo_src_valid),                //         .valid
		.in_0_ready     (led_7seg_1_s1_agent_rdata_fifo_src_ready),                //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                        //         .error
	);

	cineraria_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (clk_peri_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_7seg_2_s1_agent_rdata_fifo_src_data),                 //     in_0.data
		.in_0_valid     (led_7seg_2_s1_agent_rdata_fifo_src_valid),                //         .valid
		.in_0_ready     (led_7seg_2_s1_agent_rdata_fifo_src_ready),                //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                        //         .error
	);

	cineraria_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (clk_peri_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (psw_s1_agent_rdata_fifo_src_data),                        //     in_0.data
		.in_0_valid     (psw_s1_agent_rdata_fifo_src_valid),                       //         .valid
		.in_0_ready     (psw_s1_agent_rdata_fifo_src_ready),                       //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)                        //         .error
	);

	cineraria_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (clk_peri_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (dipsw_s1_agent_rdata_fifo_src_data),                      //     in_0.data
		.in_0_valid     (dipsw_s1_agent_rdata_fifo_src_valid),                     //         .valid
		.in_0_ready     (dipsw_s1_agent_rdata_fifo_src_ready),                     //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)                        //         .error
	);

	cineraria_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (clk_peri_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (gpio0_s1_agent_rdata_fifo_src_data),                      //     in_0.data
		.in_0_valid     (gpio0_s1_agent_rdata_fifo_src_valid),                     //         .valid
		.in_0_ready     (gpio0_s1_agent_rdata_fifo_src_ready),                     //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)                        //         .error
	);

	cineraria_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (clk_peri_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (peripherals_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (mmcdma_s1_agent_rdata_fifo_src_data),                     //     in_0.data
		.in_0_valid     (mmcdma_s1_agent_rdata_fifo_src_valid),                    //         .valid
		.in_0_ready     (mmcdma_s1_agent_rdata_fifo_src_ready),                    //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)                        //         .error
	);

endmodule
